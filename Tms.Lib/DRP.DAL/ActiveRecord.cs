


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using SubSonic.DataProviders;
using SubSonic.Extensions;
using System.Linq.Expressions;
using SubSonic.Schema;
using System.Collections;
using SubSonic;
using SubSonic.Repository;
using System.ComponentModel;
using System.Data.Common;
using SubSonic.Query;

namespace DRP.DAL
{
    
    
    /// <summary>
    /// A class which represents the Pro_QuotationSetting table in the DRP Database.
    /// </summary>
    public partial class Pro_QuotationSetting: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Pro_QuotationSetting> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Pro_QuotationSetting>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Pro_QuotationSetting> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Pro_QuotationSetting item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Pro_QuotationSetting item=new Pro_QuotationSetting();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Pro_QuotationSetting> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Pro_QuotationSetting(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Pro_QuotationSetting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_QuotationSetting>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Pro_QuotationSetting(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Pro_QuotationSetting(Expression<Func<Pro_QuotationSetting, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Pro_QuotationSetting> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Pro_QuotationSetting> _repo;
            
            if(db.TestMode){
                Pro_QuotationSetting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_QuotationSetting>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Pro_QuotationSetting> GetRepo(){
            return GetRepo("","");
        }
        
        public static Pro_QuotationSetting SingleOrDefault(Expression<Func<Pro_QuotationSetting, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Pro_QuotationSetting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Pro_QuotationSetting SingleOrDefault(Expression<Func<Pro_QuotationSetting, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Pro_QuotationSetting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Pro_QuotationSetting, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Pro_QuotationSetting, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Pro_QuotationSetting> Find(Expression<Func<Pro_QuotationSetting, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Pro_QuotationSetting> Find(Expression<Func<Pro_QuotationSetting, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Pro_QuotationSetting> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Pro_QuotationSetting> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Pro_QuotationSetting> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Pro_QuotationSetting> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Pro_QuotationSetting> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Pro_QuotationSetting> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Pro_QuotationSetting)){
                Pro_QuotationSetting compare=(Pro_QuotationSetting)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Template;
        public string Template
        {
            get { return _Template; }
            set
            {
                if(_Template!=value){
                    _Template=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Template");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Pro_QuotationSetting, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sys_CrmPermission table in the DRP Database.
    /// </summary>
    public partial class Sys_CrmPermission: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sys_CrmPermission> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sys_CrmPermission>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sys_CrmPermission> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sys_CrmPermission item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sys_CrmPermission item=new Sys_CrmPermission();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sys_CrmPermission> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sys_CrmPermission(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sys_CrmPermission.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_CrmPermission>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sys_CrmPermission(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sys_CrmPermission(Expression<Func<Sys_CrmPermission, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sys_CrmPermission> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sys_CrmPermission> _repo;
            
            if(db.TestMode){
                Sys_CrmPermission.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_CrmPermission>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sys_CrmPermission> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sys_CrmPermission SingleOrDefault(Expression<Func<Sys_CrmPermission, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sys_CrmPermission single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sys_CrmPermission SingleOrDefault(Expression<Func<Sys_CrmPermission, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sys_CrmPermission single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sys_CrmPermission, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sys_CrmPermission, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sys_CrmPermission> Find(Expression<Func<Sys_CrmPermission, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sys_CrmPermission> Find(Expression<Func<Sys_CrmPermission, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sys_CrmPermission> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sys_CrmPermission> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sys_CrmPermission> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sys_CrmPermission> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sys_CrmPermission> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sys_CrmPermission> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sys_CrmPermission)){
                Sys_CrmPermission compare=(Sys_CrmPermission)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RoleID;
        public string RoleID
        {
            get { return _RoleID; }
            set
            {
                if(_RoleID!=value){
                    _RoleID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoleID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BtnPermission;
        public int BtnPermission
        {
            get { return _BtnPermission; }
            set
            {
                if(_BtnPermission!=value){
                    _BtnPermission=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BtnPermission");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sys_CrmPermission, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Glo_BasicInfo table in the DRP Database.
    /// </summary>
    public partial class Glo_BasicInfo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Glo_BasicInfo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Glo_BasicInfo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Glo_BasicInfo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Glo_BasicInfo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Glo_BasicInfo item=new Glo_BasicInfo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Glo_BasicInfo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Glo_BasicInfo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Glo_BasicInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_BasicInfo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Glo_BasicInfo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Glo_BasicInfo(Expression<Func<Glo_BasicInfo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Glo_BasicInfo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Glo_BasicInfo> _repo;
            
            if(db.TestMode){
                Glo_BasicInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_BasicInfo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Glo_BasicInfo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Glo_BasicInfo SingleOrDefault(Expression<Func<Glo_BasicInfo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Glo_BasicInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Glo_BasicInfo SingleOrDefault(Expression<Func<Glo_BasicInfo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Glo_BasicInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Glo_BasicInfo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Glo_BasicInfo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Glo_BasicInfo> Find(Expression<Func<Glo_BasicInfo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Glo_BasicInfo> Find(Expression<Func<Glo_BasicInfo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Glo_BasicInfo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Glo_BasicInfo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Glo_BasicInfo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Glo_BasicInfo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Glo_BasicInfo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Glo_BasicInfo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Glo_BasicInfo)){
                Glo_BasicInfo compare=(Glo_BasicInfo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BasicType;
        public int BasicType
        {
            get { return _BasicType; }
            set
            {
                if(_BasicType!=value){
                    _BasicType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BasicType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Glo_BasicInfo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Glo_NoticeTrace table in the DRP Database.
    /// </summary>
    public partial class Glo_NoticeTrace: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Glo_NoticeTrace> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Glo_NoticeTrace>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Glo_NoticeTrace> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Glo_NoticeTrace item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Glo_NoticeTrace item=new Glo_NoticeTrace();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Glo_NoticeTrace> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Glo_NoticeTrace(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Glo_NoticeTrace.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_NoticeTrace>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Glo_NoticeTrace(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Glo_NoticeTrace(Expression<Func<Glo_NoticeTrace, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Glo_NoticeTrace> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Glo_NoticeTrace> _repo;
            
            if(db.TestMode){
                Glo_NoticeTrace.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_NoticeTrace>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Glo_NoticeTrace> GetRepo(){
            return GetRepo("","");
        }
        
        public static Glo_NoticeTrace SingleOrDefault(Expression<Func<Glo_NoticeTrace, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Glo_NoticeTrace single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Glo_NoticeTrace SingleOrDefault(Expression<Func<Glo_NoticeTrace, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Glo_NoticeTrace single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Glo_NoticeTrace, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Glo_NoticeTrace, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Glo_NoticeTrace> Find(Expression<Func<Glo_NoticeTrace, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Glo_NoticeTrace> Find(Expression<Func<Glo_NoticeTrace, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Glo_NoticeTrace> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Glo_NoticeTrace> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Glo_NoticeTrace> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Glo_NoticeTrace> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Glo_NoticeTrace> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Glo_NoticeTrace> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Glo_NoticeTrace)){
                Glo_NoticeTrace compare=(Glo_NoticeTrace)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NoticeID;
        public string NoticeID
        {
            get { return _NoticeID; }
            set
            {
                if(_NoticeID!=value){
                    _NoticeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NoticeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserID;
        public string UserID
        {
            get { return _UserID; }
            set
            {
                if(_UserID!=value){
                    _UserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserName;
        public string UserName
        {
            get { return _UserName; }
            set
            {
                if(_UserName!=value){
                    _UserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Glo_NoticeTrace, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Glo_Sms table in the DRP Database.
    /// </summary>
    public partial class Glo_Sm: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Glo_Sm> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Glo_Sm>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Glo_Sm> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Glo_Sm item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Glo_Sm item=new Glo_Sm();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Glo_Sm> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Glo_Sm(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Glo_Sm.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_Sm>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Glo_Sm(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Glo_Sm(Expression<Func<Glo_Sm, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Glo_Sm> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Glo_Sm> _repo;
            
            if(db.TestMode){
                Glo_Sm.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_Sm>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Glo_Sm> GetRepo(){
            return GetRepo("","");
        }
        
        public static Glo_Sm SingleOrDefault(Expression<Func<Glo_Sm, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Glo_Sm single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Glo_Sm SingleOrDefault(Expression<Func<Glo_Sm, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Glo_Sm single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Glo_Sm, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Glo_Sm, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Glo_Sm> Find(Expression<Func<Glo_Sm, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Glo_Sm> Find(Expression<Func<Glo_Sm, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Glo_Sm> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Glo_Sm> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Glo_Sm> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Glo_Sm> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Glo_Sm> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Glo_Sm> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Glo_Sm)){
                Glo_Sm compare=(Glo_Sm)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SendUserID;
        public string SendUserID
        {
            get { return _SendUserID; }
            set
            {
                if(_SendUserID!=value){
                    _SendUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SendUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SendUserName;
        public string SendUserName
        {
            get { return _SendUserName; }
            set
            {
                if(_SendUserName!=value){
                    _SendUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SendUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RecMobile;
        public string RecMobile
        {
            get { return _RecMobile; }
            set
            {
                if(_RecMobile!=value){
                    _RecMobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecMobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MsgContent;
        public string MsgContent
        {
            get { return _MsgContent; }
            set
            {
                if(_MsgContent!=value){
                    _MsgContent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MsgContent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Glo_Sm, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Glo_Message table in the DRP Database.
    /// </summary>
    public partial class Glo_Message: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Glo_Message> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Glo_Message>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Glo_Message> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Glo_Message item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Glo_Message item=new Glo_Message();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Glo_Message> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Glo_Message(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Glo_Message.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_Message>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Glo_Message(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Glo_Message(Expression<Func<Glo_Message, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Glo_Message> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Glo_Message> _repo;
            
            if(db.TestMode){
                Glo_Message.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_Message>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Glo_Message> GetRepo(){
            return GetRepo("","");
        }
        
        public static Glo_Message SingleOrDefault(Expression<Func<Glo_Message, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Glo_Message single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Glo_Message SingleOrDefault(Expression<Func<Glo_Message, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Glo_Message single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Glo_Message, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Glo_Message, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Glo_Message> Find(Expression<Func<Glo_Message, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Glo_Message> Find(Expression<Func<Glo_Message, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Glo_Message> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Glo_Message> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Glo_Message> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Glo_Message> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Glo_Message> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Glo_Message> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Glo_Message)){
                Glo_Message compare=(Glo_Message)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RecUserID;
        public string RecUserID
        {
            get { return _RecUserID; }
            set
            {
                if(_RecUserID!=value){
                    _RecUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RecUserName;
        public string RecUserName
        {
            get { return _RecUserName; }
            set
            {
                if(_RecUserName!=value){
                    _RecUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SendUserID;
        public string SendUserID
        {
            get { return _SendUserID; }
            set
            {
                if(_SendUserID!=value){
                    _SendUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SendUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SendUserName;
        public string SendUserName
        {
            get { return _SendUserName; }
            set
            {
                if(_SendUserName!=value){
                    _SendUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SendUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MsgTitle;
        public string MsgTitle
        {
            get { return _MsgTitle; }
            set
            {
                if(_MsgTitle!=value){
                    _MsgTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MsgTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MsgContent;
        public string MsgContent
        {
            get { return _MsgContent; }
            set
            {
                if(_MsgContent!=value){
                    _MsgContent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MsgContent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _URL;
        public string URL
        {
            get { return _URL; }
            set
            {
                if(_URL!=value){
                    _URL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="URL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Target;
        public string Target
        {
            get { return _Target; }
            set
            {
                if(_Target!=value){
                    _Target=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Target");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Glo_Message, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderInvoice table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderInvoice: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderInvoice> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderInvoice>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderInvoice> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderInvoice item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderInvoice item=new Ord_OrderInvoice();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderInvoice> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderInvoice(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderInvoice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderInvoice>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderInvoice(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderInvoice(Expression<Func<Ord_OrderInvoice, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderInvoice> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderInvoice> _repo;
            
            if(db.TestMode){
                Ord_OrderInvoice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderInvoice>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderInvoice> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderInvoice SingleOrDefault(Expression<Func<Ord_OrderInvoice, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderInvoice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderInvoice SingleOrDefault(Expression<Func<Ord_OrderInvoice, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderInvoice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderInvoice, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderInvoice, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderInvoice> Find(Expression<Func<Ord_OrderInvoice, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderInvoice> Find(Expression<Func<Ord_OrderInvoice, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderInvoice> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderInvoice> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderInvoice> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderInvoice> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderInvoice> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderInvoice> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderInvoice)){
                Ord_OrderInvoice compare=(Ord_OrderInvoice)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _InvoiceName;
        public string InvoiceName
        {
            get { return _InvoiceName; }
            set
            {
                if(_InvoiceName!=value){
                    _InvoiceName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _InvoiceAmt;
        public decimal InvoiceAmt
        {
            get { return _InvoiceAmt; }
            set
            {
                if(_InvoiceAmt!=value){
                    _InvoiceAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _InvoiceItem;
        public string InvoiceItem
        {
            get { return _InvoiceItem; }
            set
            {
                if(_InvoiceItem!=value){
                    _InvoiceItem=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceItem");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FetchType;
        public string FetchType
        {
            get { return _FetchType; }
            set
            {
                if(_FetchType!=value){
                    _FetchType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FetchType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _InvoiceUnit;
        public string InvoiceUnit
        {
            get { return _InvoiceUnit; }
            set
            {
                if(_InvoiceUnit!=value){
                    _InvoiceUnit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceUnit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsOverAmt;
        public bool IsOverAmt
        {
            get { return _IsOverAmt; }
            set
            {
                if(_IsOverAmt!=value){
                    _IsOverAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsOverAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _InvoiceStatus;
        public int InvoiceStatus
        {
            get { return _InvoiceStatus; }
            set
            {
                if(_InvoiceStatus!=value){
                    _InvoiceStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrderNum;
        public int? OrderNum
        {
            get { return _OrderNum; }
            set
            {
                if(_OrderNum!=value){
                    _OrderNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderName;
        public string OrderName
        {
            get { return _OrderName; }
            set
            {
                if(_OrderName!=value){
                    _OrderName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _InvoiceNo;
        public string InvoiceNo
        {
            get { return _InvoiceNo; }
            set
            {
                if(_InvoiceNo!=value){
                    _InvoiceNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _InvoiceDate;
        public DateTime? InvoiceDate
        {
            get { return _InvoiceDate; }
            set
            {
                if(_InvoiceDate!=value){
                    _InvoiceDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Auditor;
        public string Auditor
        {
            get { return _Auditor; }
            set
            {
                if(_Auditor!=value){
                    _Auditor=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Auditor");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _AuditDate;
        public DateTime? AuditDate
        {
            get { return _AuditDate; }
            set
            {
                if(_AuditDate!=value){
                    _AuditDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AuditDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AuditorID;
        public string AuditorID
        {
            get { return _AuditorID; }
            set
            {
                if(_AuditorID!=value){
                    _AuditorID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AuditorID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AuditRemark;
        public string AuditRemark
        {
            get { return _AuditRemark; }
            set
            {
                if(_AuditRemark!=value){
                    _AuditRemark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AuditRemark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderInvoice, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderGuide table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderGuide: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderGuide> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderGuide>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderGuide> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderGuide item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderGuide item=new Ord_OrderGuide();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderGuide> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderGuide(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderGuide.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderGuide>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderGuide(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderGuide(Expression<Func<Ord_OrderGuide, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderGuide> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderGuide> _repo;
            
            if(db.TestMode){
                Ord_OrderGuide.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderGuide>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderGuide> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderGuide SingleOrDefault(Expression<Func<Ord_OrderGuide, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderGuide single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderGuide SingleOrDefault(Expression<Func<Ord_OrderGuide, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderGuide single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderGuide, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderGuide, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderGuide> Find(Expression<Func<Ord_OrderGuide, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderGuide> Find(Expression<Func<Ord_OrderGuide, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderGuide> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderGuide> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderGuide> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderGuide> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderGuide> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderGuide> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderGuide)){
                Ord_OrderGuide compare=(Ord_OrderGuide)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GuideID;
        public string GuideID
        {
            get { return _GuideID; }
            set
            {
                if(_GuideID!=value){
                    _GuideID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuideID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GuideName;
        public string GuideName
        {
            get { return _GuideName; }
            set
            {
                if(_GuideName!=value){
                    _GuideName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuideName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AcctPwd;
        public string AcctPwd
        {
            get { return _AcctPwd; }
            set
            {
                if(_AcctPwd!=value){
                    _AcctPwd=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AcctPwd");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _IsOver;
        public int? IsOver
        {
            get { return _IsOver; }
            set
            {
                if(_IsOver!=value){
                    _IsOver=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsOver");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderBalanceID;
        public string OrderBalanceID
        {
            get { return _OrderBalanceID; }
            set
            {
                if(_OrderBalanceID!=value){
                    _OrderBalanceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderBalanceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderGuide, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Om_Navigate table in the DRP Database.
    /// </summary>
    public partial class Om_Navigate: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Om_Navigate> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Om_Navigate>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Om_Navigate> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Om_Navigate item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Om_Navigate item=new Om_Navigate();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Om_Navigate> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Om_Navigate(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Om_Navigate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_Navigate>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Om_Navigate(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Om_Navigate(Expression<Func<Om_Navigate, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Om_Navigate> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Om_Navigate> _repo;
            
            if(db.TestMode){
                Om_Navigate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_Navigate>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Om_Navigate> GetRepo(){
            return GetRepo("","");
        }
        
        public static Om_Navigate SingleOrDefault(Expression<Func<Om_Navigate, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Om_Navigate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Om_Navigate SingleOrDefault(Expression<Func<Om_Navigate, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Om_Navigate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Om_Navigate, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Om_Navigate, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Om_Navigate> Find(Expression<Func<Om_Navigate, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Om_Navigate> Find(Expression<Func<Om_Navigate, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Om_Navigate> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Om_Navigate> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Om_Navigate> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Om_Navigate> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Om_Navigate> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Om_Navigate> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Om_Navigate)){
                Om_Navigate compare=(Om_Navigate)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PageID;
        public string PageID
        {
            get { return _PageID; }
            set
            {
                if(_PageID!=value){
                    _PageID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PageID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ParentID;
        public string ParentID
        {
            get { return _ParentID; }
            set
            {
                if(_ParentID!=value){
                    _ParentID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NavName;
        public string NavName
        {
            get { return _NavName; }
            set
            {
                if(_NavName!=value){
                    _NavName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NavName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NavUrl;
        public string NavUrl
        {
            get { return _NavUrl; }
            set
            {
                if(_NavUrl!=value){
                    _NavUrl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NavUrl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NavCls;
        public string NavCls
        {
            get { return _NavCls; }
            set
            {
                if(_NavCls!=value){
                    _NavCls=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NavCls");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NavIcon;
        public string NavIcon
        {
            get { return _NavIcon; }
            set
            {
                if(_NavIcon!=value){
                    _NavIcon=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NavIcon");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsVisual;
        public bool IsVisual
        {
            get { return _IsVisual; }
            set
            {
                if(_IsVisual!=value){
                    _IsVisual=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsVisual");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrderIndex;
        public int? OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Om_Navigate, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Res_BizContact table in the DRP Database.
    /// </summary>
    public partial class Res_BizContact: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Res_BizContact> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Res_BizContact>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Res_BizContact> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Res_BizContact item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Res_BizContact item=new Res_BizContact();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Res_BizContact> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Res_BizContact(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Res_BizContact.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_BizContact>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Res_BizContact(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Res_BizContact(Expression<Func<Res_BizContact, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Res_BizContact> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Res_BizContact> _repo;
            
            if(db.TestMode){
                Res_BizContact.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_BizContact>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Res_BizContact> GetRepo(){
            return GetRepo("","");
        }
        
        public static Res_BizContact SingleOrDefault(Expression<Func<Res_BizContact, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Res_BizContact single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Res_BizContact SingleOrDefault(Expression<Func<Res_BizContact, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Res_BizContact single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Res_BizContact, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Res_BizContact, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Res_BizContact> Find(Expression<Func<Res_BizContact, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Res_BizContact> Find(Expression<Func<Res_BizContact, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Res_BizContact> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Res_BizContact> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Res_BizContact> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Res_BizContact> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Res_BizContact> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Res_BizContact> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Res_BizContact)){
                Res_BizContact compare=(Res_BizContact)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FKID;
        public string FKID
        {
            get { return _FKID; }
            set
            {
                if(_FKID!=value){
                    _FKID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FKID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Fax;
        public string Fax
        {
            get { return _Fax; }
            set
            {
                if(_Fax!=value){
                    _Fax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Fax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Res_BizContact, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Om_NavGroupRelation table in the DRP Database.
    /// </summary>
    public partial class Om_NavGroupRelation: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Om_NavGroupRelation> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Om_NavGroupRelation>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Om_NavGroupRelation> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Om_NavGroupRelation item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Om_NavGroupRelation item=new Om_NavGroupRelation();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Om_NavGroupRelation> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Om_NavGroupRelation(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Om_NavGroupRelation.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_NavGroupRelation>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Om_NavGroupRelation(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Om_NavGroupRelation(Expression<Func<Om_NavGroupRelation, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Om_NavGroupRelation> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Om_NavGroupRelation> _repo;
            
            if(db.TestMode){
                Om_NavGroupRelation.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_NavGroupRelation>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Om_NavGroupRelation> GetRepo(){
            return GetRepo("","");
        }
        
        public static Om_NavGroupRelation SingleOrDefault(Expression<Func<Om_NavGroupRelation, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Om_NavGroupRelation single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Om_NavGroupRelation SingleOrDefault(Expression<Func<Om_NavGroupRelation, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Om_NavGroupRelation single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Om_NavGroupRelation, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Om_NavGroupRelation, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Om_NavGroupRelation> Find(Expression<Func<Om_NavGroupRelation, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Om_NavGroupRelation> Find(Expression<Func<Om_NavGroupRelation, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Om_NavGroupRelation> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Om_NavGroupRelation> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Om_NavGroupRelation> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Om_NavGroupRelation> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Om_NavGroupRelation> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Om_NavGroupRelation> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Om_NavGroupRelation)){
                Om_NavGroupRelation compare=(Om_NavGroupRelation)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GroupID;
        public string GroupID
        {
            get { return _GroupID; }
            set
            {
                if(_GroupID!=value){
                    _GroupID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GroupID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NavID;
        public string NavID
        {
            get { return _NavID; }
            set
            {
                if(_NavID!=value){
                    _NavID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NavID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Om_NavGroupRelation, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderBalanceItem table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderBalanceItem: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderBalanceItem> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderBalanceItem>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderBalanceItem> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderBalanceItem item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderBalanceItem item=new Ord_OrderBalanceItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderBalanceItem> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderBalanceItem(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderBalanceItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderBalanceItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderBalanceItem(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderBalanceItem(Expression<Func<Ord_OrderBalanceItem, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderBalanceItem> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderBalanceItem> _repo;
            
            if(db.TestMode){
                Ord_OrderBalanceItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderBalanceItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderBalanceItem> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderBalanceItem SingleOrDefault(Expression<Func<Ord_OrderBalanceItem, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderBalanceItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderBalanceItem SingleOrDefault(Expression<Func<Ord_OrderBalanceItem, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderBalanceItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderBalanceItem, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderBalanceItem, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderBalanceItem> Find(Expression<Func<Ord_OrderBalanceItem, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderBalanceItem> Find(Expression<Func<Ord_OrderBalanceItem, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderBalanceItem> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderBalanceItem> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderBalanceItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderBalanceItem> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderBalanceItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderBalanceItem> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderBalanceItem)){
                Ord_OrderBalanceItem compare=(Ord_OrderBalanceItem)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderBalanceID;
        public string OrderBalanceID
        {
            get { return _OrderBalanceID; }
            set
            {
                if(_OrderBalanceID!=value){
                    _OrderBalanceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderBalanceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ItemName;
        public string ItemName
        {
            get { return _ItemName; }
            set
            {
                if(_ItemName!=value){
                    _ItemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ItemType;
        public int ItemType
        {
            get { return _ItemType; }
            set
            {
                if(_ItemType!=value){
                    _ItemType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _pSort;
        public int? pSort
        {
            get { return _pSort; }
            set
            {
                if(_pSort!=value){
                    _pSort=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="pSort");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderBalanceItem, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Pro_Quotation table in the DRP Database.
    /// </summary>
    public partial class Pro_Quotation: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Pro_Quotation> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Pro_Quotation>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Pro_Quotation> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Pro_Quotation item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Pro_Quotation item=new Pro_Quotation();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Pro_Quotation> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Pro_Quotation(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Pro_Quotation.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_Quotation>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Pro_Quotation(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Pro_Quotation(Expression<Func<Pro_Quotation, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Pro_Quotation> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Pro_Quotation> _repo;
            
            if(db.TestMode){
                Pro_Quotation.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_Quotation>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Pro_Quotation> GetRepo(){
            return GetRepo("","");
        }
        
        public static Pro_Quotation SingleOrDefault(Expression<Func<Pro_Quotation, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Pro_Quotation single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Pro_Quotation SingleOrDefault(Expression<Func<Pro_Quotation, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Pro_Quotation single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Pro_Quotation, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Pro_Quotation, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Pro_Quotation> Find(Expression<Func<Pro_Quotation, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Pro_Quotation> Find(Expression<Func<Pro_Quotation, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Pro_Quotation> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Pro_Quotation> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Pro_Quotation> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Pro_Quotation> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Pro_Quotation> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Pro_Quotation> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Pro_Quotation)){
                Pro_Quotation compare=(Pro_Quotation)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteName;
        public string RouteName
        {
            get { return _RouteName; }
            set
            {
                if(_RouteName!=value){
                    _RouteName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteNo;
        public string RouteNo
        {
            get { return _RouteNo; }
            set
            {
                if(_RouteNo!=value){
                    _RouteNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteType;
        public string RouteType
        {
            get { return _RouteType; }
            set
            {
                if(_RouteType!=value){
                    _RouteType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteTypeID;
        public string RouteTypeID
        {
            get { return _RouteTypeID; }
            set
            {
                if(_RouteTypeID!=value){
                    _RouteTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Destination;
        public string Destination
        {
            get { return _Destination; }
            set
            {
                if(_Destination!=value){
                    _Destination=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Destination");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationID;
        public string DestinationID
        {
            get { return _DestinationID; }
            set
            {
                if(_DestinationID!=value){
                    _DestinationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationPath;
        public string DestinationPath
        {
            get { return _DestinationPath; }
            set
            {
                if(_DestinationPath!=value){
                    _DestinationPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _VisitorNum;
        public int VisitorNum
        {
            get { return _VisitorNum; }
            set
            {
                if(_VisitorNum!=value){
                    _VisitorNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VisitorNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Days;
        public int Days
        {
            get { return _Days; }
            set
            {
                if(_Days!=value){
                    _Days=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Days");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Stay;
        public string Stay
        {
            get { return _Stay; }
            set
            {
                if(_Stay!=value){
                    _Stay=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Stay");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Dinner;
        public string Dinner
        {
            get { return _Dinner; }
            set
            {
                if(_Dinner!=value){
                    _Dinner=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dinner");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ViewSpot;
        public string ViewSpot
        {
            get { return _ViewSpot; }
            set
            {
                if(_ViewSpot!=value){
                    _ViewSpot=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ViewSpot");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Feature;
        public string Feature
        {
            get { return _Feature; }
            set
            {
                if(_Feature!=value){
                    _Feature=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Feature");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SelfItem;
        public string SelfItem
        {
            get { return _SelfItem; }
            set
            {
                if(_SelfItem!=value){
                    _SelfItem=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SelfItem");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Notes;
        public string Notes
        {
            get { return _Notes; }
            set
            {
                if(_Notes!=value){
                    _Notes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Notes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Cost;
        public decimal Cost
        {
            get { return _Cost; }
            set
            {
                if(_Cost!=value){
                    _Cost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Cost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _AvgPrice;
        public decimal AvgPrice
        {
            get { return _AvgPrice; }
            set
            {
                if(_AvgPrice!=value){
                    _AvgPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AvgPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Profit;
        public decimal Profit
        {
            get { return _Profit; }
            set
            {
                if(_Profit!=value){
                    _Profit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Profit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _ChildPrice;
        public decimal ChildPrice
        {
            get { return _ChildPrice; }
            set
            {
                if(_ChildPrice!=value){
                    _ChildPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ChildPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _ChildCost;
        public decimal ChildCost
        {
            get { return _ChildCost; }
            set
            {
                if(_ChildCost!=value){
                    _ChildCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ChildCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Pro_Quotation, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderBalanceItemData table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderBalanceItemDatum: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderBalanceItemDatum> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderBalanceItemDatum>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderBalanceItemDatum> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderBalanceItemDatum item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderBalanceItemDatum item=new Ord_OrderBalanceItemDatum();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderBalanceItemDatum> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderBalanceItemDatum(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderBalanceItemDatum.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderBalanceItemDatum>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderBalanceItemDatum(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderBalanceItemDatum(Expression<Func<Ord_OrderBalanceItemDatum, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderBalanceItemDatum> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderBalanceItemDatum> _repo;
            
            if(db.TestMode){
                Ord_OrderBalanceItemDatum.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderBalanceItemDatum>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderBalanceItemDatum> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderBalanceItemDatum SingleOrDefault(Expression<Func<Ord_OrderBalanceItemDatum, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderBalanceItemDatum single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderBalanceItemDatum SingleOrDefault(Expression<Func<Ord_OrderBalanceItemDatum, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderBalanceItemDatum single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderBalanceItemDatum, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderBalanceItemDatum, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderBalanceItemDatum> Find(Expression<Func<Ord_OrderBalanceItemDatum, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderBalanceItemDatum> Find(Expression<Func<Ord_OrderBalanceItemDatum, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderBalanceItemDatum> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderBalanceItemDatum> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderBalanceItemDatum> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderBalanceItemDatum> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderBalanceItemDatum> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderBalanceItemDatum> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderBalanceItemDatum)){
                Ord_OrderBalanceItemDatum compare=(Ord_OrderBalanceItemDatum)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderBalanceID;
        public string OrderBalanceID
        {
            get { return _OrderBalanceID; }
            set
            {
                if(_OrderBalanceID!=value){
                    _OrderBalanceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderBalanceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ItemID;
        public string ItemID
        {
            get { return _ItemID; }
            set
            {
                if(_ItemID!=value){
                    _ItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ItemName;
        public string ItemName
        {
            get { return _ItemName; }
            set
            {
                if(_ItemName!=value){
                    _ItemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _ItemPrice;
        public decimal ItemPrice
        {
            get { return _ItemPrice; }
            set
            {
                if(_ItemPrice!=value){
                    _ItemPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ItemNum;
        public int ItemNum
        {
            get { return _ItemNum; }
            set
            {
                if(_ItemNum!=value){
                    _ItemNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _ItemAmt;
        public decimal? ItemAmt
        {
            get { return _ItemAmt; }
            set
            {
                if(_ItemAmt!=value){
                    _ItemAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsSign;
        public bool IsSign
        {
            get { return _IsSign; }
            set
            {
                if(_IsSign!=value){
                    _IsSign=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsSign");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsInvoice;
        public bool IsInvoice
        {
            get { return _IsInvoice; }
            set
            {
                if(_IsInvoice!=value){
                    _IsInvoice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsInvoice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _pSort;
        public int pSort
        {
            get { return _pSort; }
            set
            {
                if(_pSort!=value){
                    _pSort=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="pSort");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderBalanceItemDatum, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderCollection table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderCollection: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderCollection> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderCollection>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderCollection> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderCollection item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderCollection item=new Ord_OrderCollection();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderCollection> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderCollection(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderCollection.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderCollection>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderCollection(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderCollection(Expression<Func<Ord_OrderCollection, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderCollection> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderCollection> _repo;
            
            if(db.TestMode){
                Ord_OrderCollection.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderCollection>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderCollection> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderCollection SingleOrDefault(Expression<Func<Ord_OrderCollection, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderCollection single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderCollection SingleOrDefault(Expression<Func<Ord_OrderCollection, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderCollection single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderCollection, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderCollection, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderCollection> Find(Expression<Func<Ord_OrderCollection, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderCollection> Find(Expression<Func<Ord_OrderCollection, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderCollection> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderCollection> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderCollection> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderCollection> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderCollection> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderCollection> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderCollection)){
                Ord_OrderCollection compare=(Ord_OrderCollection)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _CollectAmt;
        public decimal CollectAmt
        {
            get { return _CollectAmt; }
            set
            {
                if(_CollectAmt!=value){
                    _CollectAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CollectAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CollectType;
        public string CollectType
        {
            get { return _CollectType; }
            set
            {
                if(_CollectType!=value){
                    _CollectType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CollectType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CollectDate;
        public DateTime CollectDate
        {
            get { return _CollectDate; }
            set
            {
                if(_CollectDate!=value){
                    _CollectDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CollectDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CollectBill;
        public string CollectBill
        {
            get { return _CollectBill; }
            set
            {
                if(_CollectBill!=value){
                    _CollectBill=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CollectBill");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ClaimID;
        public string ClaimID
        {
            get { return _ClaimID; }
            set
            {
                if(_ClaimID!=value){
                    _ClaimID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClaimID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SrcBank;
        public string SrcBank
        {
            get { return _SrcBank; }
            set
            {
                if(_SrcBank!=value){
                    _SrcBank=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SrcBank");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SrcName;
        public string SrcName
        {
            get { return _SrcName; }
            set
            {
                if(_SrcName!=value){
                    _SrcName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SrcName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CollectStatus;
        public int CollectStatus
        {
            get { return _CollectStatus; }
            set
            {
                if(_CollectStatus!=value){
                    _CollectStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CollectStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Auditor;
        public string Auditor
        {
            get { return _Auditor; }
            set
            {
                if(_Auditor!=value){
                    _Auditor=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Auditor");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AuditorID;
        public string AuditorID
        {
            get { return _AuditorID; }
            set
            {
                if(_AuditorID!=value){
                    _AuditorID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AuditorID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _AuditDate;
        public DateTime? AuditDate
        {
            get { return _AuditDate; }
            set
            {
                if(_AuditDate!=value){
                    _AuditDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AuditDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderCollection, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Pro_QuotationCostItem table in the DRP Database.
    /// </summary>
    public partial class Pro_QuotationCostItem: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Pro_QuotationCostItem> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Pro_QuotationCostItem>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Pro_QuotationCostItem> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Pro_QuotationCostItem item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Pro_QuotationCostItem item=new Pro_QuotationCostItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Pro_QuotationCostItem> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Pro_QuotationCostItem(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Pro_QuotationCostItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_QuotationCostItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Pro_QuotationCostItem(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Pro_QuotationCostItem(Expression<Func<Pro_QuotationCostItem, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Pro_QuotationCostItem> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Pro_QuotationCostItem> _repo;
            
            if(db.TestMode){
                Pro_QuotationCostItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_QuotationCostItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Pro_QuotationCostItem> GetRepo(){
            return GetRepo("","");
        }
        
        public static Pro_QuotationCostItem SingleOrDefault(Expression<Func<Pro_QuotationCostItem, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Pro_QuotationCostItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Pro_QuotationCostItem SingleOrDefault(Expression<Func<Pro_QuotationCostItem, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Pro_QuotationCostItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Pro_QuotationCostItem, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Pro_QuotationCostItem, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Pro_QuotationCostItem> Find(Expression<Func<Pro_QuotationCostItem, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Pro_QuotationCostItem> Find(Expression<Func<Pro_QuotationCostItem, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Pro_QuotationCostItem> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Pro_QuotationCostItem> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Pro_QuotationCostItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Pro_QuotationCostItem> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Pro_QuotationCostItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Pro_QuotationCostItem> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Pro_QuotationCostItem)){
                Pro_QuotationCostItem compare=(Pro_QuotationCostItem)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QuotationID;
        public string QuotationID
        {
            get { return _QuotationID; }
            set
            {
                if(_QuotationID!=value){
                    _QuotationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QuotationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ItemName;
        public string ItemName
        {
            get { return _ItemName; }
            set
            {
                if(_ItemName!=value){
                    _ItemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ItemRemark;
        public string ItemRemark
        {
            get { return _ItemRemark; }
            set
            {
                if(_ItemRemark!=value){
                    _ItemRemark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemRemark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _ItemPrice;
        public decimal ItemPrice
        {
            get { return _ItemPrice; }
            set
            {
                if(_ItemPrice!=value){
                    _ItemPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ItemNum;
        public int ItemNum
        {
            get { return _ItemNum; }
            set
            {
                if(_ItemNum!=value){
                    _ItemNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _ItemSum;
        public decimal ItemSum
        {
            get { return _ItemSum; }
            set
            {
                if(_ItemSum!=value){
                    _ItemSum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemSum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrderIndex;
        public int? OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Pro_QuotationCostItem, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Om_OrgReceipt table in the DRP Database.
    /// </summary>
    public partial class Om_OrgReceipt: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Om_OrgReceipt> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Om_OrgReceipt>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Om_OrgReceipt> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Om_OrgReceipt item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Om_OrgReceipt item=new Om_OrgReceipt();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Om_OrgReceipt> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Om_OrgReceipt(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Om_OrgReceipt.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_OrgReceipt>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Om_OrgReceipt(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Om_OrgReceipt(Expression<Func<Om_OrgReceipt, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Om_OrgReceipt> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Om_OrgReceipt> _repo;
            
            if(db.TestMode){
                Om_OrgReceipt.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_OrgReceipt>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Om_OrgReceipt> GetRepo(){
            return GetRepo("","");
        }
        
        public static Om_OrgReceipt SingleOrDefault(Expression<Func<Om_OrgReceipt, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Om_OrgReceipt single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Om_OrgReceipt SingleOrDefault(Expression<Func<Om_OrgReceipt, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Om_OrgReceipt single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Om_OrgReceipt, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Om_OrgReceipt, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Om_OrgReceipt> Find(Expression<Func<Om_OrgReceipt, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Om_OrgReceipt> Find(Expression<Func<Om_OrgReceipt, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Om_OrgReceipt> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Om_OrgReceipt> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Om_OrgReceipt> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Om_OrgReceipt> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Om_OrgReceipt> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Om_OrgReceipt> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Receiver.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Om_OrgReceipt)){
                Om_OrgReceipt compare=(Om_OrgReceipt)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.Receiver.ToString();
                    }

        public string DescriptorColumn() {
            return "Receiver";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "Receiver";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        Guid _ID;
        public Guid ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _OrgID;
        public Guid OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PaidAmt;
        public decimal PaidAmt
        {
            get { return _PaidAmt; }
            set
            {
                if(_PaidAmt!=value){
                    _PaidAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaidAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _sDate;
        public DateTime sDate
        {
            get { return _sDate; }
            set
            {
                if(_sDate!=value){
                    _sDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="sDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _eDate;
        public DateTime eDate
        {
            get { return _eDate; }
            set
            {
                if(_eDate!=value){
                    _eDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="eDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Receiver;
        public string Receiver
        {
            get { return _Receiver; }
            set
            {
                if(_Receiver!=value){
                    _Receiver=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Receiver");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _ReceiveDate;
        public DateTime ReceiveDate
        {
            get { return _ReceiveDate; }
            set
            {
                if(_ReceiveDate!=value){
                    _ReceiveDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReceiveDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _UserCount;
        public int UserCount
        {
            get { return _UserCount; }
            set
            {
                if(_UserCount!=value){
                    _UserCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Om_OrgReceipt, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderBalance table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderBalance: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderBalance> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderBalance>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderBalance> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderBalance item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderBalance item=new Ord_OrderBalance();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderBalance> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderBalance(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderBalance.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderBalance>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderBalance(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderBalance(Expression<Func<Ord_OrderBalance, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderBalance> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderBalance> _repo;
            
            if(db.TestMode){
                Ord_OrderBalance.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderBalance>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderBalance> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderBalance SingleOrDefault(Expression<Func<Ord_OrderBalance, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderBalance single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderBalance SingleOrDefault(Expression<Func<Ord_OrderBalance, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderBalance single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderBalance, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderBalance, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderBalance> Find(Expression<Func<Ord_OrderBalance, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderBalance> Find(Expression<Func<Ord_OrderBalance, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderBalance> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderBalance> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderBalance> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderBalance> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderBalance> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderBalance> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderBalance)){
                Ord_OrderBalance compare=(Ord_OrderBalance)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderGuideID;
        public string OrderGuideID
        {
            get { return _OrderGuideID; }
            set
            {
                if(_OrderGuideID!=value){
                    _OrderGuideID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderGuideID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderType;
        public int OrderType
        {
            get { return _OrderType; }
            set
            {
                if(_OrderType!=value){
                    _OrderType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AdultNum;
        public int AdultNum
        {
            get { return _AdultNum; }
            set
            {
                if(_AdultNum!=value){
                    _AdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ChildNum;
        public int ChildNum
        {
            get { return _ChildNum; }
            set
            {
                if(_ChildNum!=value){
                    _ChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GuideName;
        public string GuideName
        {
            get { return _GuideName; }
            set
            {
                if(_GuideName!=value){
                    _GuideName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuideName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GuideMobile;
        public string GuideMobile
        {
            get { return _GuideMobile; }
            set
            {
                if(_GuideMobile!=value){
                    _GuideMobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuideMobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _YLTK;
        public decimal? YLTK
        {
            get { return _YLTK; }
            set
            {
                if(_YLTK!=value){
                    _YLTK=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="YLTK");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _YLTK_Remark;
        public string YLTK_Remark
        {
            get { return _YLTK_Remark; }
            set
            {
                if(_YLTK_Remark!=value){
                    _YLTK_Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="YLTK_Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _XSTK;
        public decimal? XSTK
        {
            get { return _XSTK; }
            set
            {
                if(_XSTK!=value){
                    _XSTK=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="XSTK");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _XSTK_Remark;
        public string XSTK_Remark
        {
            get { return _XSTK_Remark; }
            set
            {
                if(_XSTK_Remark!=value){
                    _XSTK_Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="XSTK_Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _YHZZ;
        public decimal? YHZZ
        {
            get { return _YHZZ; }
            set
            {
                if(_YHZZ!=value){
                    _YHZZ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="YHZZ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _YHZZ_Remark;
        public string YHZZ_Remark
        {
            get { return _YHZZ_Remark; }
            set
            {
                if(_YHZZ_Remark!=value){
                    _YHZZ_Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="YHZZ_Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _QTSR;
        public decimal? QTSR
        {
            get { return _QTSR; }
            set
            {
                if(_QTSR!=value){
                    _QTSR=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QTSR");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QTSR_Remark;
        public string QTSR_Remark
        {
            get { return _QTSR_Remark; }
            set
            {
                if(_QTSR_Remark!=value){
                    _QTSR_Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QTSR_Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderBalance, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Glo_PushNotice table in the DRP Database.
    /// </summary>
    public partial class Glo_PushNotice: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Glo_PushNotice> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Glo_PushNotice>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Glo_PushNotice> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Glo_PushNotice item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Glo_PushNotice item=new Glo_PushNotice();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Glo_PushNotice> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Glo_PushNotice(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Glo_PushNotice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_PushNotice>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Glo_PushNotice(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Glo_PushNotice(Expression<Func<Glo_PushNotice, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Glo_PushNotice> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Glo_PushNotice> _repo;
            
            if(db.TestMode){
                Glo_PushNotice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_PushNotice>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Glo_PushNotice> GetRepo(){
            return GetRepo("","");
        }
        
        public static Glo_PushNotice SingleOrDefault(Expression<Func<Glo_PushNotice, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Glo_PushNotice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Glo_PushNotice SingleOrDefault(Expression<Func<Glo_PushNotice, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Glo_PushNotice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Glo_PushNotice, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Glo_PushNotice, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Glo_PushNotice> Find(Expression<Func<Glo_PushNotice, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Glo_PushNotice> Find(Expression<Func<Glo_PushNotice, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Glo_PushNotice> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Glo_PushNotice> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Glo_PushNotice> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Glo_PushNotice> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Glo_PushNotice> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Glo_PushNotice> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.nContent.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Glo_PushNotice)){
                Glo_PushNotice compare=(Glo_PushNotice)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.nContent.ToString();
                    }

        public string DescriptorColumn() {
            return "nContent";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "nContent";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        Guid _ID;
        public Guid ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _nContent;
        public string nContent
        {
            get { return _nContent; }
            set
            {
                if(_nContent!=value){
                    _nContent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="nContent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LinkUrl;
        public string LinkUrl
        {
            get { return _LinkUrl; }
            set
            {
                if(_LinkUrl!=value){
                    _LinkUrl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LinkUrl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _sDate;
        public DateTime sDate
        {
            get { return _sDate; }
            set
            {
                if(_sDate!=value){
                    _sDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="sDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _eDate;
        public DateTime eDate
        {
            get { return _eDate; }
            set
            {
                if(_eDate!=value){
                    _eDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="eDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Creator;
        public string Creator
        {
            get { return _Creator; }
            set
            {
                if(_Creator!=value){
                    _Creator=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Creator");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Glo_PushNotice, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sys_UserInfo table in the DRP Database.
    /// </summary>
    public partial class Sys_UserInfo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sys_UserInfo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sys_UserInfo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sys_UserInfo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sys_UserInfo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sys_UserInfo item=new Sys_UserInfo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sys_UserInfo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sys_UserInfo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sys_UserInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_UserInfo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sys_UserInfo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sys_UserInfo(Expression<Func<Sys_UserInfo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sys_UserInfo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sys_UserInfo> _repo;
            
            if(db.TestMode){
                Sys_UserInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_UserInfo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sys_UserInfo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sys_UserInfo SingleOrDefault(Expression<Func<Sys_UserInfo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sys_UserInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sys_UserInfo SingleOrDefault(Expression<Func<Sys_UserInfo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sys_UserInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sys_UserInfo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sys_UserInfo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sys_UserInfo> Find(Expression<Func<Sys_UserInfo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sys_UserInfo> Find(Expression<Func<Sys_UserInfo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sys_UserInfo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sys_UserInfo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sys_UserInfo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sys_UserInfo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sys_UserInfo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sys_UserInfo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sys_UserInfo)){
                Sys_UserInfo compare=(Sys_UserInfo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IDNo;
        public string IDNo
        {
            get { return _IDNo; }
            set
            {
                if(_IDNo!=value){
                    _IDNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IDNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptName;
        public string DeptName
        {
            get { return _DeptName; }
            set
            {
                if(_DeptName!=value){
                    _DeptName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PartDeptID;
        public string PartDeptID
        {
            get { return _PartDeptID; }
            set
            {
                if(_PartDeptID!=value){
                    _PartDeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PartDeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PartDeptName;
        public string PartDeptName
        {
            get { return _PartDeptName; }
            set
            {
                if(_PartDeptName!=value){
                    _PartDeptName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PartDeptName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QQ;
        public string QQ
        {
            get { return _QQ; }
            set
            {
                if(_QQ!=value){
                    _QQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AcctID;
        public string AcctID
        {
            get { return _AcctID; }
            set
            {
                if(_AcctID!=value){
                    _AcctID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AcctID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AcctPwd;
        public string AcctPwd
        {
            get { return _AcctPwd; }
            set
            {
                if(_AcctPwd!=value){
                    _AcctPwd=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AcctPwd");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sys_UserInfo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Fin_IncomeCheckIn table in the DRP Database.
    /// </summary>
    public partial class Fin_IncomeCheckIn: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Fin_IncomeCheckIn> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Fin_IncomeCheckIn>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Fin_IncomeCheckIn> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Fin_IncomeCheckIn item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Fin_IncomeCheckIn item=new Fin_IncomeCheckIn();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Fin_IncomeCheckIn> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Fin_IncomeCheckIn(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Fin_IncomeCheckIn.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Fin_IncomeCheckIn>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Fin_IncomeCheckIn(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Fin_IncomeCheckIn(Expression<Func<Fin_IncomeCheckIn, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Fin_IncomeCheckIn> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Fin_IncomeCheckIn> _repo;
            
            if(db.TestMode){
                Fin_IncomeCheckIn.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Fin_IncomeCheckIn>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Fin_IncomeCheckIn> GetRepo(){
            return GetRepo("","");
        }
        
        public static Fin_IncomeCheckIn SingleOrDefault(Expression<Func<Fin_IncomeCheckIn, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Fin_IncomeCheckIn single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Fin_IncomeCheckIn SingleOrDefault(Expression<Func<Fin_IncomeCheckIn, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Fin_IncomeCheckIn single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Fin_IncomeCheckIn, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Fin_IncomeCheckIn, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Fin_IncomeCheckIn> Find(Expression<Func<Fin_IncomeCheckIn, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Fin_IncomeCheckIn> Find(Expression<Func<Fin_IncomeCheckIn, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Fin_IncomeCheckIn> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Fin_IncomeCheckIn> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Fin_IncomeCheckIn> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Fin_IncomeCheckIn> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Fin_IncomeCheckIn> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Fin_IncomeCheckIn> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Fin_IncomeCheckIn)){
                Fin_IncomeCheckIn compare=(Fin_IncomeCheckIn)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _IncomeAmt;
        public decimal IncomeAmt
        {
            get { return _IncomeAmt; }
            set
            {
                if(_IncomeAmt!=value){
                    _IncomeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncomeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _IncomeDate;
        public DateTime IncomeDate
        {
            get { return _IncomeDate; }
            set
            {
                if(_IncomeDate!=value){
                    _IncomeDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncomeDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IncomeMethod;
        public string IncomeMethod
        {
            get { return _IncomeMethod; }
            set
            {
                if(_IncomeMethod!=value){
                    _IncomeMethod=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncomeMethod");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IncomeType;
        public string IncomeType
        {
            get { return _IncomeType; }
            set
            {
                if(_IncomeType!=value){
                    _IncomeType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncomeType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IncomeTypeID;
        public string IncomeTypeID
        {
            get { return _IncomeTypeID; }
            set
            {
                if(_IncomeTypeID!=value){
                    _IncomeTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncomeTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Operator;
        public string Operator
        {
            get { return _Operator; }
            set
            {
                if(_Operator!=value){
                    _Operator=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Operator");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptName;
        public string DeptName
        {
            get { return _DeptName; }
            set
            {
                if(_DeptName!=value){
                    _DeptName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IncomeSource;
        public string IncomeSource
        {
            get { return _IncomeSource; }
            set
            {
                if(_IncomeSource!=value){
                    _IncomeSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncomeSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Fin_IncomeCheckIn, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sys_Department table in the DRP Database.
    /// </summary>
    public partial class Sys_Department: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sys_Department> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sys_Department>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sys_Department> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sys_Department item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sys_Department item=new Sys_Department();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sys_Department> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sys_Department(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sys_Department.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_Department>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sys_Department(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sys_Department(Expression<Func<Sys_Department, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sys_Department> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sys_Department> _repo;
            
            if(db.TestMode){
                Sys_Department.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_Department>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sys_Department> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sys_Department SingleOrDefault(Expression<Func<Sys_Department, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sys_Department single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sys_Department SingleOrDefault(Expression<Func<Sys_Department, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sys_Department single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sys_Department, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sys_Department, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sys_Department> Find(Expression<Func<Sys_Department, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sys_Department> Find(Expression<Func<Sys_Department, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sys_Department> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sys_Department> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sys_Department> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sys_Department> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sys_Department> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sys_Department> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sys_Department)){
                Sys_Department compare=(Sys_Department)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ParentID;
        public string ParentID
        {
            get { return _ParentID; }
            set
            {
                if(_ParentID!=value){
                    _ParentID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sys_Department, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderFile table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderFile: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderFile> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderFile>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderFile> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderFile item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderFile item=new Ord_OrderFile();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderFile> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderFile(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderFile.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderFile>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderFile(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderFile(Expression<Func<Ord_OrderFile, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderFile> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderFile> _repo;
            
            if(db.TestMode){
                Ord_OrderFile.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderFile>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderFile> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderFile SingleOrDefault(Expression<Func<Ord_OrderFile, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderFile single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderFile SingleOrDefault(Expression<Func<Ord_OrderFile, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderFile single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderFile, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderFile, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderFile> Find(Expression<Func<Ord_OrderFile, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderFile> Find(Expression<Func<Ord_OrderFile, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderFile> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderFile> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderFile> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderFile> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderFile> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderFile> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderFile)){
                Ord_OrderFile compare=(Ord_OrderFile)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FilleD;
        public string FilleD
        {
            get { return _FilleD; }
            set
            {
                if(_FilleD!=value){
                    _FilleD=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FilleD");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Text;
        public string Text
        {
            get { return _Text; }
            set
            {
                if(_Text!=value){
                    _Text=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Text");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderFile, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Om_OrgInfo table in the DRP Database.
    /// </summary>
    public partial class Om_OrgInfo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Om_OrgInfo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Om_OrgInfo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Om_OrgInfo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Om_OrgInfo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Om_OrgInfo item=new Om_OrgInfo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Om_OrgInfo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Om_OrgInfo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Om_OrgInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_OrgInfo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Om_OrgInfo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Om_OrgInfo(Expression<Func<Om_OrgInfo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Om_OrgInfo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Om_OrgInfo> _repo;
            
            if(db.TestMode){
                Om_OrgInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_OrgInfo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Om_OrgInfo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Om_OrgInfo SingleOrDefault(Expression<Func<Om_OrgInfo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Om_OrgInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Om_OrgInfo SingleOrDefault(Expression<Func<Om_OrgInfo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Om_OrgInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Om_OrgInfo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Om_OrgInfo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Om_OrgInfo> Find(Expression<Func<Om_OrgInfo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Om_OrgInfo> Find(Expression<Func<Om_OrgInfo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Om_OrgInfo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Om_OrgInfo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Om_OrgInfo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Om_OrgInfo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Om_OrgInfo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Om_OrgInfo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Om_OrgInfo)){
                Om_OrgInfo compare=(Om_OrgInfo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ProDomain;
        public string ProDomain
        {
            get { return _ProDomain; }
            set
            {
                if(_ProDomain!=value){
                    _ProDomain=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProDomain");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ProName;
        public string ProName
        {
            get { return _ProName; }
            set
            {
                if(_ProName!=value){
                    _ProName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AreaName;
        public string AreaName
        {
            get { return _AreaName; }
            set
            {
                if(_AreaName!=value){
                    _AreaName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AreaName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AreaID;
        public string AreaID
        {
            get { return _AreaID; }
            set
            {
                if(_AreaID!=value){
                    _AreaID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AreaID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AreaPath;
        public string AreaPath
        {
            get { return _AreaPath; }
            set
            {
                if(_AreaPath!=value){
                    _AreaPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AreaPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _OpenDate;
        public DateTime OpenDate
        {
            get { return _OpenDate; }
            set
            {
                if(_OpenDate!=value){
                    _OpenDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OpenDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _ExpiryDate;
        public DateTime ExpiryDate
        {
            get { return _ExpiryDate; }
            set
            {
                if(_ExpiryDate!=value){
                    _ExpiryDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExpiryDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgProp;
        public string OrgProp
        {
            get { return _OrgProp; }
            set
            {
                if(_OrgProp!=value){
                    _OrgProp=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgProp");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgContact;
        public string OrgContact
        {
            get { return _OrgContact; }
            set
            {
                if(_OrgContact!=value){
                    _OrgContact=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgContact");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ContactPhone;
        public string ContactPhone
        {
            get { return _ContactPhone; }
            set
            {
                if(_ContactPhone!=value){
                    _ContactPhone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ContactPhone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgAdmin;
        public string OrgAdmin
        {
            get { return _OrgAdmin; }
            set
            {
                if(_OrgAdmin!=value){
                    _OrgAdmin=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgAdmin");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgInfo;
        public string OrgInfo
        {
            get { return _OrgInfo; }
            set
            {
                if(_OrgInfo!=value){
                    _OrgInfo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgInfo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NavGroup;
        public string NavGroup
        {
            get { return _NavGroup; }
            set
            {
                if(_NavGroup!=value){
                    _NavGroup=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NavGroup");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NavGroupID;
        public string NavGroupID
        {
            get { return _NavGroupID; }
            set
            {
                if(_NavGroupID!=value){
                    _NavGroupID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NavGroupID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QRCode;
        public string QRCode
        {
            get { return _QRCode; }
            set
            {
                if(_QRCode!=value){
                    _QRCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QRCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _eShopGuid;
        public string eShopGuid
        {
            get { return _eShopGuid; }
            set
            {
                if(_eShopGuid!=value){
                    _eShopGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="eShopGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsOpenEShop;
        public bool? IsOpenEShop
        {
            get { return _IsOpenEShop; }
            set
            {
                if(_IsOpenEShop!=value){
                    _IsOpenEShop=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsOpenEShop");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SmsCount;
        public int? SmsCount
        {
            get { return _SmsCount; }
            set
            {
                if(_SmsCount!=value){
                    _SmsCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SmsCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SendSmsCount;
        public int? SendSmsCount
        {
            get { return _SendSmsCount; }
            set
            {
                if(_SendSmsCount!=value){
                    _SendSmsCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SendSmsCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Brand;
        public string Brand
        {
            get { return _Brand; }
            set
            {
                if(_Brand!=value){
                    _Brand=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Brand");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _ReceiptAmt;
        public decimal? ReceiptAmt
        {
            get { return _ReceiptAmt; }
            set
            {
                if(_ReceiptAmt!=value){
                    _ReceiptAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReceiptAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MaxUserCount;
        public int? MaxUserCount
        {
            get { return _MaxUserCount; }
            set
            {
                if(_MaxUserCount!=value){
                    _MaxUserCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxUserCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _logo;
        public string logo
        {
            get { return _logo; }
            set
            {
                if(_logo!=value){
                    _logo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="logo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Om_OrgInfo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Fin_PayCheckIn table in the DRP Database.
    /// </summary>
    public partial class Fin_PayCheckIn: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Fin_PayCheckIn> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Fin_PayCheckIn>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Fin_PayCheckIn> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Fin_PayCheckIn item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Fin_PayCheckIn item=new Fin_PayCheckIn();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Fin_PayCheckIn> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Fin_PayCheckIn(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Fin_PayCheckIn.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Fin_PayCheckIn>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Fin_PayCheckIn(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Fin_PayCheckIn(Expression<Func<Fin_PayCheckIn, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Fin_PayCheckIn> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Fin_PayCheckIn> _repo;
            
            if(db.TestMode){
                Fin_PayCheckIn.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Fin_PayCheckIn>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Fin_PayCheckIn> GetRepo(){
            return GetRepo("","");
        }
        
        public static Fin_PayCheckIn SingleOrDefault(Expression<Func<Fin_PayCheckIn, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Fin_PayCheckIn single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Fin_PayCheckIn SingleOrDefault(Expression<Func<Fin_PayCheckIn, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Fin_PayCheckIn single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Fin_PayCheckIn, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Fin_PayCheckIn, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Fin_PayCheckIn> Find(Expression<Func<Fin_PayCheckIn, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Fin_PayCheckIn> Find(Expression<Func<Fin_PayCheckIn, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Fin_PayCheckIn> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Fin_PayCheckIn> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Fin_PayCheckIn> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Fin_PayCheckIn> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Fin_PayCheckIn> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Fin_PayCheckIn> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Fin_PayCheckIn)){
                Fin_PayCheckIn compare=(Fin_PayCheckIn)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PayType;
        public string PayType
        {
            get { return _PayType; }
            set
            {
                if(_PayType!=value){
                    _PayType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PayType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PayTypeID;
        public string PayTypeID
        {
            get { return _PayTypeID; }
            set
            {
                if(_PayTypeID!=value){
                    _PayTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PayTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PayMethod;
        public string PayMethod
        {
            get { return _PayMethod; }
            set
            {
                if(_PayMethod!=value){
                    _PayMethod=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PayMethod");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PayAmt;
        public decimal PayAmt
        {
            get { return _PayAmt; }
            set
            {
                if(_PayAmt!=value){
                    _PayAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PayAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _PayDate;
        public DateTime PayDate
        {
            get { return _PayDate; }
            set
            {
                if(_PayDate!=value){
                    _PayDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PayDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Operator;
        public string Operator
        {
            get { return _Operator; }
            set
            {
                if(_Operator!=value){
                    _Operator=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Operator");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptName;
        public string DeptName
        {
            get { return _DeptName; }
            set
            {
                if(_DeptName!=value){
                    _DeptName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Fin_PayCheckIn, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_Budget table in the DRP Database.
    /// </summary>
    public partial class Ord_Budget: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_Budget> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_Budget>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_Budget> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_Budget item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_Budget item=new Ord_Budget();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_Budget> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_Budget(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_Budget.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_Budget>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_Budget(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_Budget(Expression<Func<Ord_Budget, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_Budget> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_Budget> _repo;
            
            if(db.TestMode){
                Ord_Budget.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_Budget>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_Budget> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_Budget SingleOrDefault(Expression<Func<Ord_Budget, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_Budget single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_Budget SingleOrDefault(Expression<Func<Ord_Budget, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_Budget single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_Budget, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_Budget, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_Budget> Find(Expression<Func<Ord_Budget, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_Budget> Find(Expression<Func<Ord_Budget, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_Budget> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_Budget> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_Budget> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_Budget> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_Budget> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_Budget> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_Budget)){
                Ord_Budget compare=(Ord_Budget)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AdultNum;
        public int AdultNum
        {
            get { return _AdultNum; }
            set
            {
                if(_AdultNum!=value){
                    _AdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ChildNum;
        public int ChildNum
        {
            get { return _ChildNum; }
            set
            {
                if(_ChildNum!=value){
                    _ChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderAmt;
        public decimal OrderAmt
        {
            get { return _OrderAmt; }
            set
            {
                if(_OrderAmt!=value){
                    _OrderAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderCost;
        public decimal OrderCost
        {
            get { return _OrderCost; }
            set
            {
                if(_OrderCost!=value){
                    _OrderCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderProfit;
        public decimal OrderProfit
        {
            get { return _OrderProfit; }
            set
            {
                if(_OrderProfit!=value){
                    _OrderProfit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderProfit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _ProfitRate;
        public decimal ProfitRate
        {
            get { return _ProfitRate; }
            set
            {
                if(_ProfitRate!=value){
                    _ProfitRate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProfitRate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_Budget, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Res_TravelAgency table in the DRP Database.
    /// </summary>
    public partial class Res_TravelAgency: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Res_TravelAgency> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Res_TravelAgency>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Res_TravelAgency> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Res_TravelAgency item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Res_TravelAgency item=new Res_TravelAgency();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Res_TravelAgency> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Res_TravelAgency(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Res_TravelAgency.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_TravelAgency>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Res_TravelAgency(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Res_TravelAgency(Expression<Func<Res_TravelAgency, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Res_TravelAgency> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Res_TravelAgency> _repo;
            
            if(db.TestMode){
                Res_TravelAgency.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_TravelAgency>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Res_TravelAgency> GetRepo(){
            return GetRepo("","");
        }
        
        public static Res_TravelAgency SingleOrDefault(Expression<Func<Res_TravelAgency, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Res_TravelAgency single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Res_TravelAgency SingleOrDefault(Expression<Func<Res_TravelAgency, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Res_TravelAgency single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Res_TravelAgency, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Res_TravelAgency, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Res_TravelAgency> Find(Expression<Func<Res_TravelAgency, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Res_TravelAgency> Find(Expression<Func<Res_TravelAgency, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Res_TravelAgency> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Res_TravelAgency> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Res_TravelAgency> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Res_TravelAgency> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Res_TravelAgency> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Res_TravelAgency> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Res_TravelAgency)){
                Res_TravelAgency compare=(Res_TravelAgency)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Spell;
        public string Spell
        {
            get { return _Spell; }
            set
            {
                if(_Spell!=value){
                    _Spell=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Spell");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Brand;
        public string Brand
        {
            get { return _Brand; }
            set
            {
                if(_Brand!=value){
                    _Brand=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Brand");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Contact;
        public string Contact
        {
            get { return _Contact; }
            set
            {
                if(_Contact!=value){
                    _Contact=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Contact");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Fax;
        public string Fax
        {
            get { return _Fax; }
            set
            {
                if(_Fax!=value){
                    _Fax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Fax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mail;
        public string Mail
        {
            get { return _Mail; }
            set
            {
                if(_Mail!=value){
                    _Mail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QQ;
        public string QQ
        {
            get { return _QQ; }
            set
            {
                if(_QQ!=value){
                    _QQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Addr;
        public string Addr
        {
            get { return _Addr; }
            set
            {
                if(_Addr!=value){
                    _Addr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Addr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsEnable;
        public bool IsEnable
        {
            get { return _IsEnable; }
            set
            {
                if(_IsEnable!=value){
                    _IsEnable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEnable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BizType;
        public string BizType
        {
            get { return _BizType; }
            set
            {
                if(_BizType!=value){
                    _BizType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BizType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Destination;
        public string Destination
        {
            get { return _Destination; }
            set
            {
                if(_Destination!=value){
                    _Destination=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Destination");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationID;
        public string DestinationID
        {
            get { return _DestinationID; }
            set
            {
                if(_DestinationID!=value){
                    _DestinationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationPath;
        public string DestinationPath
        {
            get { return _DestinationPath; }
            set
            {
                if(_DestinationPath!=value){
                    _DestinationPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteType;
        public string RouteType
        {
            get { return _RouteType; }
            set
            {
                if(_RouteType!=value){
                    _RouteType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteTypeID;
        public string RouteTypeID
        {
            get { return _RouteTypeID; }
            set
            {
                if(_RouteTypeID!=value){
                    _RouteTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BankName;
        public string BankName
        {
            get { return _BankName; }
            set
            {
                if(_BankName!=value){
                    _BankName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BankName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BankAcct;
        public string BankAcct
        {
            get { return _BankAcct; }
            set
            {
                if(_BankAcct!=value){
                    _BankAcct=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BankAcct");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeNum;
        public int TradeNum
        {
            get { return _TradeNum; }
            set
            {
                if(_TradeNum!=value){
                    _TradeNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _TradeAmt;
        public decimal TradeAmt
        {
            get { return _TradeAmt; }
            set
            {
                if(_TradeAmt!=value){
                    _TradeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeAdultNum;
        public int TradeAdultNum
        {
            get { return _TradeAdultNum; }
            set
            {
                if(_TradeAdultNum!=value){
                    _TradeAdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeChildNum;
        public int TradeChildNum
        {
            get { return _TradeChildNum; }
            set
            {
                if(_TradeChildNum!=value){
                    _TradeChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Res_TravelAgency, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderInvoiceItem table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderInvoiceItem: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderInvoiceItem> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderInvoiceItem>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderInvoiceItem> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderInvoiceItem item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderInvoiceItem item=new Ord_OrderInvoiceItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderInvoiceItem> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderInvoiceItem(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderInvoiceItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderInvoiceItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderInvoiceItem(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderInvoiceItem(Expression<Func<Ord_OrderInvoiceItem, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderInvoiceItem> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderInvoiceItem> _repo;
            
            if(db.TestMode){
                Ord_OrderInvoiceItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderInvoiceItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderInvoiceItem> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderInvoiceItem SingleOrDefault(Expression<Func<Ord_OrderInvoiceItem, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderInvoiceItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderInvoiceItem SingleOrDefault(Expression<Func<Ord_OrderInvoiceItem, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderInvoiceItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderInvoiceItem, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderInvoiceItem, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderInvoiceItem> Find(Expression<Func<Ord_OrderInvoiceItem, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderInvoiceItem> Find(Expression<Func<Ord_OrderInvoiceItem, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderInvoiceItem> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderInvoiceItem> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderInvoiceItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderInvoiceItem> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderInvoiceItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderInvoiceItem> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderInvoiceItem)){
                Ord_OrderInvoiceItem compare=(Ord_OrderInvoiceItem)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _InvoiceID;
        public string InvoiceID
        {
            get { return _InvoiceID; }
            set
            {
                if(_InvoiceID!=value){
                    _InvoiceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _InvoiceAmt;
        public decimal InvoiceAmt
        {
            get { return _InvoiceAmt; }
            set
            {
                if(_InvoiceAmt!=value){
                    _InvoiceAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderInvoiceItem, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderLog table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderLog: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderLog> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderLog>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderLog> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderLog item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderLog item=new Ord_OrderLog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderLog> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderLog(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderLog>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderLog(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderLog(Expression<Func<Ord_OrderLog, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderLog> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderLog> _repo;
            
            if(db.TestMode){
                Ord_OrderLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderLog>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderLog> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderLog SingleOrDefault(Expression<Func<Ord_OrderLog, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderLog SingleOrDefault(Expression<Func<Ord_OrderLog, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderLog, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderLog, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderLog> Find(Expression<Func<Ord_OrderLog, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderLog> Find(Expression<Func<Ord_OrderLog, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderLog> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderLog> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderLog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderLog> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderLog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderLog> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderLog)){
                Ord_OrderLog compare=(Ord_OrderLog)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OpIP;
        public string OpIP
        {
            get { return _OpIP; }
            set
            {
                if(_OpIP!=value){
                    _OpIP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OpIP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OpBrowser;
        public string OpBrowser
        {
            get { return _OpBrowser; }
            set
            {
                if(_OpBrowser!=value){
                    _OpBrowser=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OpBrowser");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderLog, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sys_RoleInfo table in the DRP Database.
    /// </summary>
    public partial class Sys_RoleInfo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sys_RoleInfo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sys_RoleInfo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sys_RoleInfo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sys_RoleInfo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sys_RoleInfo item=new Sys_RoleInfo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sys_RoleInfo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sys_RoleInfo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sys_RoleInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_RoleInfo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sys_RoleInfo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sys_RoleInfo(Expression<Func<Sys_RoleInfo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sys_RoleInfo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sys_RoleInfo> _repo;
            
            if(db.TestMode){
                Sys_RoleInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_RoleInfo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sys_RoleInfo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sys_RoleInfo SingleOrDefault(Expression<Func<Sys_RoleInfo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sys_RoleInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sys_RoleInfo SingleOrDefault(Expression<Func<Sys_RoleInfo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sys_RoleInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sys_RoleInfo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sys_RoleInfo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sys_RoleInfo> Find(Expression<Func<Sys_RoleInfo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sys_RoleInfo> Find(Expression<Func<Sys_RoleInfo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sys_RoleInfo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sys_RoleInfo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sys_RoleInfo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sys_RoleInfo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sys_RoleInfo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sys_RoleInfo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sys_RoleInfo)){
                Sys_RoleInfo compare=(Sys_RoleInfo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RoleName;
        public string RoleName
        {
            get { return _RoleName; }
            set
            {
                if(_RoleName!=value){
                    _RoleName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoleName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RoleMember;
        public string RoleMember
        {
            get { return _RoleMember; }
            set
            {
                if(_RoleMember!=value){
                    _RoleMember=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoleMember");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sys_RoleInfo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sys_RoleMember table in the DRP Database.
    /// </summary>
    public partial class Sys_RoleMember: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sys_RoleMember> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sys_RoleMember>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sys_RoleMember> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sys_RoleMember item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sys_RoleMember item=new Sys_RoleMember();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sys_RoleMember> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sys_RoleMember(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sys_RoleMember.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_RoleMember>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sys_RoleMember(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sys_RoleMember(Expression<Func<Sys_RoleMember, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sys_RoleMember> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sys_RoleMember> _repo;
            
            if(db.TestMode){
                Sys_RoleMember.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_RoleMember>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sys_RoleMember> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sys_RoleMember SingleOrDefault(Expression<Func<Sys_RoleMember, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sys_RoleMember single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sys_RoleMember SingleOrDefault(Expression<Func<Sys_RoleMember, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sys_RoleMember single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sys_RoleMember, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sys_RoleMember, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sys_RoleMember> Find(Expression<Func<Sys_RoleMember, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sys_RoleMember> Find(Expression<Func<Sys_RoleMember, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sys_RoleMember> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sys_RoleMember> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sys_RoleMember> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sys_RoleMember> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sys_RoleMember> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sys_RoleMember> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sys_RoleMember)){
                Sys_RoleMember compare=(Sys_RoleMember)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RoleID;
        public string RoleID
        {
            get { return _RoleID; }
            set
            {
                if(_RoleID!=value){
                    _RoleID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoleID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserID;
        public string UserID
        {
            get { return _UserID; }
            set
            {
                if(_UserID!=value){
                    _UserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserName;
        public string UserName
        {
            get { return _UserName; }
            set
            {
                if(_UserName!=value){
                    _UserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sys_RoleMember, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Rpt_BizStatistic table in the DRP Database.
    /// </summary>
    public partial class Rpt_BizStatistic: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Rpt_BizStatistic> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Rpt_BizStatistic>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Rpt_BizStatistic> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Rpt_BizStatistic item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Rpt_BizStatistic item=new Rpt_BizStatistic();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Rpt_BizStatistic> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Rpt_BizStatistic(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Rpt_BizStatistic.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Rpt_BizStatistic>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Rpt_BizStatistic(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Rpt_BizStatistic(Expression<Func<Rpt_BizStatistic, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Rpt_BizStatistic> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Rpt_BizStatistic> _repo;
            
            if(db.TestMode){
                Rpt_BizStatistic.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Rpt_BizStatistic>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Rpt_BizStatistic> GetRepo(){
            return GetRepo("","");
        }
        
        public static Rpt_BizStatistic SingleOrDefault(Expression<Func<Rpt_BizStatistic, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Rpt_BizStatistic single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Rpt_BizStatistic SingleOrDefault(Expression<Func<Rpt_BizStatistic, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Rpt_BizStatistic single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Rpt_BizStatistic, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Rpt_BizStatistic, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Rpt_BizStatistic> Find(Expression<Func<Rpt_BizStatistic, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Rpt_BizStatistic> Find(Expression<Func<Rpt_BizStatistic, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Rpt_BizStatistic> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Rpt_BizStatistic> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Rpt_BizStatistic> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Rpt_BizStatistic> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Rpt_BizStatistic> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Rpt_BizStatistic> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Rpt_BizStatistic)){
                Rpt_BizStatistic compare=(Rpt_BizStatistic)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerNum;
        public int CustomerNum
        {
            get { return _CustomerNum; }
            set
            {
                if(_CustomerNum!=value){
                    _CustomerNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerNumDay;
        public int CustomerNumDay
        {
            get { return _CustomerNumDay; }
            set
            {
                if(_CustomerNumDay!=value){
                    _CustomerNumDay=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerNumDay");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderNum;
        public int OrderNum
        {
            get { return _OrderNum; }
            set
            {
                if(_OrderNum!=value){
                    _OrderNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderNumDay;
        public int OrderNumDay
        {
            get { return _OrderNumDay; }
            set
            {
                if(_OrderNumDay!=value){
                    _OrderNumDay=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderNumDay");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _VisitorNum;
        public int VisitorNum
        {
            get { return _VisitorNum; }
            set
            {
                if(_VisitorNum!=value){
                    _VisitorNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VisitorNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _VisitorNumDay;
        public int VisitorNumDay
        {
            get { return _VisitorNumDay; }
            set
            {
                if(_VisitorNumDay!=value){
                    _VisitorNumDay=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VisitorNumDay");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrdeAmt;
        public decimal OrdeAmt
        {
            get { return _OrdeAmt; }
            set
            {
                if(_OrdeAmt!=value){
                    _OrdeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrdeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderAmtDay;
        public decimal OrderAmtDay
        {
            get { return _OrderAmtDay; }
            set
            {
                if(_OrderAmtDay!=value){
                    _OrderAmtDay=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderAmtDay");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderCost;
        public decimal OrderCost
        {
            get { return _OrderCost; }
            set
            {
                if(_OrderCost!=value){
                    _OrderCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderCostDay;
        public decimal OrderCostDay
        {
            get { return _OrderCostDay; }
            set
            {
                if(_OrderCostDay!=value){
                    _OrderCostDay=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderCostDay");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgName;
        public string OrgName
        {
            get { return _OrgName; }
            set
            {
                if(_OrgName!=value){
                    _OrgName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Rpt_BizStatistic, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderSeat table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderSeat: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderSeat> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderSeat>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderSeat> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderSeat item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderSeat item=new Ord_OrderSeat();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderSeat> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderSeat(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderSeat.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderSeat>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderSeat(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderSeat(Expression<Func<Ord_OrderSeat, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderSeat> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderSeat> _repo;
            
            if(db.TestMode){
                Ord_OrderSeat.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderSeat>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderSeat> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderSeat SingleOrDefault(Expression<Func<Ord_OrderSeat, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderSeat single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderSeat SingleOrDefault(Expression<Func<Ord_OrderSeat, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderSeat single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderSeat, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderSeat, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderSeat> Find(Expression<Func<Ord_OrderSeat, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderSeat> Find(Expression<Func<Ord_OrderSeat, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderSeat> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderSeat> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderSeat> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderSeat> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderSeat> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderSeat> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderSeat)){
                Ord_OrderSeat compare=(Ord_OrderSeat)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TourID;
        public string TourID
        {
            get { return _TourID; }
            set
            {
                if(_TourID!=value){
                    _TourID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SeatNum;
        public int SeatNum
        {
            get { return _SeatNum; }
            set
            {
                if(_SeatNum!=value){
                    _SeatNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SeatNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderSeat, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Fin_OrderPayable table in the DRP Database.
    /// </summary>
    public partial class Fin_OrderPayable: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Fin_OrderPayable> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Fin_OrderPayable>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Fin_OrderPayable> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Fin_OrderPayable item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Fin_OrderPayable item=new Fin_OrderPayable();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Fin_OrderPayable> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Fin_OrderPayable(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Fin_OrderPayable.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Fin_OrderPayable>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Fin_OrderPayable(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Fin_OrderPayable(Expression<Func<Fin_OrderPayable, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Fin_OrderPayable> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Fin_OrderPayable> _repo;
            
            if(db.TestMode){
                Fin_OrderPayable.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Fin_OrderPayable>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Fin_OrderPayable> GetRepo(){
            return GetRepo("","");
        }
        
        public static Fin_OrderPayable SingleOrDefault(Expression<Func<Fin_OrderPayable, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Fin_OrderPayable single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Fin_OrderPayable SingleOrDefault(Expression<Func<Fin_OrderPayable, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Fin_OrderPayable single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Fin_OrderPayable, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Fin_OrderPayable, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Fin_OrderPayable> Find(Expression<Func<Fin_OrderPayable, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Fin_OrderPayable> Find(Expression<Func<Fin_OrderPayable, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Fin_OrderPayable> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Fin_OrderPayable> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Fin_OrderPayable> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Fin_OrderPayable> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Fin_OrderPayable> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Fin_OrderPayable> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Fin_OrderPayable)){
                Fin_OrderPayable compare=(Fin_OrderPayable)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderCostItemID;
        public string OrderCostItemID
        {
            get { return _OrderCostItemID; }
            set
            {
                if(_OrderCostItemID!=value){
                    _OrderCostItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderCostItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SupplierID;
        public string SupplierID
        {
            get { return _SupplierID; }
            set
            {
                if(_SupplierID!=value){
                    _SupplierID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SupplierID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SupplierName;
        public string SupplierName
        {
            get { return _SupplierName; }
            set
            {
                if(_SupplierName!=value){
                    _SupplierName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SupplierName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Amount;
        public decimal Amount
        {
            get { return _Amount; }
            set
            {
                if(_Amount!=value){
                    _Amount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Amount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _PayDate;
        public DateTime PayDate
        {
            get { return _PayDate; }
            set
            {
                if(_PayDate!=value){
                    _PayDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PayDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PayType;
        public string PayType
        {
            get { return _PayType; }
            set
            {
                if(_PayType!=value){
                    _PayType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PayType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Fin_OrderPayable, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Glo_Notice table in the DRP Database.
    /// </summary>
    public partial class Glo_Notice: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Glo_Notice> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Glo_Notice>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Glo_Notice> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Glo_Notice item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Glo_Notice item=new Glo_Notice();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Glo_Notice> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Glo_Notice(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Glo_Notice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_Notice>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Glo_Notice(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Glo_Notice(Expression<Func<Glo_Notice, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Glo_Notice> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Glo_Notice> _repo;
            
            if(db.TestMode){
                Glo_Notice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_Notice>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Glo_Notice> GetRepo(){
            return GetRepo("","");
        }
        
        public static Glo_Notice SingleOrDefault(Expression<Func<Glo_Notice, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Glo_Notice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Glo_Notice SingleOrDefault(Expression<Func<Glo_Notice, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Glo_Notice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Glo_Notice, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Glo_Notice, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Glo_Notice> Find(Expression<Func<Glo_Notice, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Glo_Notice> Find(Expression<Func<Glo_Notice, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Glo_Notice> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Glo_Notice> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Glo_Notice> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Glo_Notice> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Glo_Notice> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Glo_Notice> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Glo_Notice)){
                Glo_Notice compare=(Glo_Notice)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Subject;
        public string Subject
        {
            get { return _Subject; }
            set
            {
                if(_Subject!=value){
                    _Subject=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Subject");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _nContent;
        public string nContent
        {
            get { return _nContent; }
            set
            {
                if(_nContent!=value){
                    _nContent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="nContent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptName;
        public string DeptName
        {
            get { return _DeptName; }
            set
            {
                if(_DeptName!=value){
                    _DeptName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsAll;
        public bool IsAll
        {
            get { return _IsAll; }
            set
            {
                if(_IsAll!=value){
                    _IsAll=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsAll");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Glo_Notice, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sys_Permission table in the DRP Database.
    /// </summary>
    public partial class Sys_Permission: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sys_Permission> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sys_Permission>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sys_Permission> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sys_Permission item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sys_Permission item=new Sys_Permission();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sys_Permission> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sys_Permission(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sys_Permission.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_Permission>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sys_Permission(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sys_Permission(Expression<Func<Sys_Permission, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sys_Permission> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sys_Permission> _repo;
            
            if(db.TestMode){
                Sys_Permission.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_Permission>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sys_Permission> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sys_Permission SingleOrDefault(Expression<Func<Sys_Permission, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sys_Permission single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sys_Permission SingleOrDefault(Expression<Func<Sys_Permission, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sys_Permission single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sys_Permission, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sys_Permission, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sys_Permission> Find(Expression<Func<Sys_Permission, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sys_Permission> Find(Expression<Func<Sys_Permission, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sys_Permission> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sys_Permission> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sys_Permission> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sys_Permission> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sys_Permission> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sys_Permission> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sys_Permission)){
                Sys_Permission compare=(Sys_Permission)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RoleID;
        public string RoleID
        {
            get { return _RoleID; }
            set
            {
                if(_RoleID!=value){
                    _RoleID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoleID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NavID;
        public string NavID
        {
            get { return _NavID; }
            set
            {
                if(_NavID!=value){
                    _NavID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NavID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Permission;
        public int Permission
        {
            get { return _Permission; }
            set
            {
                if(_Permission!=value){
                    _Permission=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Permission");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sys_Permission, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sys_OrderPermission table in the DRP Database.
    /// </summary>
    public partial class Sys_OrderPermission: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sys_OrderPermission> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sys_OrderPermission>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sys_OrderPermission> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sys_OrderPermission item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sys_OrderPermission item=new Sys_OrderPermission();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sys_OrderPermission> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sys_OrderPermission(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sys_OrderPermission.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_OrderPermission>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sys_OrderPermission(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sys_OrderPermission(Expression<Func<Sys_OrderPermission, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sys_OrderPermission> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sys_OrderPermission> _repo;
            
            if(db.TestMode){
                Sys_OrderPermission.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_OrderPermission>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sys_OrderPermission> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sys_OrderPermission SingleOrDefault(Expression<Func<Sys_OrderPermission, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sys_OrderPermission single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sys_OrderPermission SingleOrDefault(Expression<Func<Sys_OrderPermission, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sys_OrderPermission single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sys_OrderPermission, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sys_OrderPermission, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sys_OrderPermission> Find(Expression<Func<Sys_OrderPermission, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sys_OrderPermission> Find(Expression<Func<Sys_OrderPermission, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sys_OrderPermission> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sys_OrderPermission> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sys_OrderPermission> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sys_OrderPermission> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sys_OrderPermission> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sys_OrderPermission> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sys_OrderPermission)){
                Sys_OrderPermission compare=(Sys_OrderPermission)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RoleID;
        public string RoleID
        {
            get { return _RoleID; }
            set
            {
                if(_RoleID!=value){
                    _RoleID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoleID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteTypeID;
        public string RouteTypeID
        {
            get { return _RouteTypeID; }
            set
            {
                if(_RouteTypeID!=value){
                    _RouteTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sys_OrderPermission, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sys_Log table in the DRP Database.
    /// </summary>
    public partial class Sys_Log: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sys_Log> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sys_Log>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sys_Log> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sys_Log item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sys_Log item=new Sys_Log();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sys_Log> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sys_Log(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sys_Log.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_Log>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sys_Log(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sys_Log(Expression<Func<Sys_Log, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sys_Log> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sys_Log> _repo;
            
            if(db.TestMode){
                Sys_Log.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_Log>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sys_Log> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sys_Log SingleOrDefault(Expression<Func<Sys_Log, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sys_Log single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sys_Log SingleOrDefault(Expression<Func<Sys_Log, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sys_Log single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sys_Log, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sys_Log, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sys_Log> Find(Expression<Func<Sys_Log, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sys_Log> Find(Expression<Func<Sys_Log, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sys_Log> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sys_Log> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sys_Log> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sys_Log> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sys_Log> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sys_Log> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sys_Log)){
                Sys_Log compare=(Sys_Log)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _LogDate;
        public DateTime LogDate
        {
            get { return _LogDate; }
            set
            {
                if(_LogDate!=value){
                    _LogDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LogDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Message;
        public string Message
        {
            get { return _Message; }
            set
            {
                if(_Message!=value){
                    _Message=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Message");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Exception;
        public string Exception
        {
            get { return _Exception; }
            set
            {
                if(_Exception!=value){
                    _Exception=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Exception");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LogType;
        public int LogType
        {
            get { return _LogType; }
            set
            {
                if(_LogType!=value){
                    _LogType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LogType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _LogAction;
        public int? LogAction
        {
            get { return _LogAction; }
            set
            {
                if(_LogAction!=value){
                    _LogAction=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LogAction");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IP;
        public string IP
        {
            get { return _IP; }
            set
            {
                if(_IP!=value){
                    _IP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Browser;
        public string Browser
        {
            get { return _Browser; }
            set
            {
                if(_Browser!=value){
                    _Browser=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Browser");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Platform;
        public string Platform
        {
            get { return _Platform; }
            set
            {
                if(_Platform!=value){
                    _Platform=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Platform");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Creator;
        public string Creator
        {
            get { return _Creator; }
            set
            {
                if(_Creator!=value){
                    _Creator=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Creator");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreatorID;
        public string CreatorID
        {
            get { return _CreatorID; }
            set
            {
                if(_CreatorID!=value){
                    _CreatorID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatorID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sys_Log, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sys_DataPermission table in the DRP Database.
    /// </summary>
    public partial class Sys_DataPermission: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sys_DataPermission> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sys_DataPermission>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sys_DataPermission> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sys_DataPermission item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sys_DataPermission item=new Sys_DataPermission();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sys_DataPermission> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sys_DataPermission(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sys_DataPermission.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_DataPermission>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sys_DataPermission(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sys_DataPermission(Expression<Func<Sys_DataPermission, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sys_DataPermission> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sys_DataPermission> _repo;
            
            if(db.TestMode){
                Sys_DataPermission.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_DataPermission>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sys_DataPermission> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sys_DataPermission SingleOrDefault(Expression<Func<Sys_DataPermission, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sys_DataPermission single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sys_DataPermission SingleOrDefault(Expression<Func<Sys_DataPermission, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sys_DataPermission single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sys_DataPermission, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sys_DataPermission, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sys_DataPermission> Find(Expression<Func<Sys_DataPermission, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sys_DataPermission> Find(Expression<Func<Sys_DataPermission, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sys_DataPermission> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sys_DataPermission> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sys_DataPermission> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sys_DataPermission> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sys_DataPermission> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sys_DataPermission> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sys_DataPermission)){
                Sys_DataPermission compare=(Sys_DataPermission)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RoleID;
        public string RoleID
        {
            get { return _RoleID; }
            set
            {
                if(_RoleID!=value){
                    _RoleID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoleID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Permission;
        public int Permission
        {
            get { return _Permission; }
            set
            {
                if(_Permission!=value){
                    _Permission=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Permission");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sys_DataPermission, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Pro_RouteSchedule table in the DRP Database.
    /// </summary>
    public partial class Pro_RouteSchedule: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Pro_RouteSchedule> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Pro_RouteSchedule>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Pro_RouteSchedule> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Pro_RouteSchedule item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Pro_RouteSchedule item=new Pro_RouteSchedule();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Pro_RouteSchedule> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Pro_RouteSchedule(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Pro_RouteSchedule.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_RouteSchedule>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Pro_RouteSchedule(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Pro_RouteSchedule(Expression<Func<Pro_RouteSchedule, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Pro_RouteSchedule> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Pro_RouteSchedule> _repo;
            
            if(db.TestMode){
                Pro_RouteSchedule.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_RouteSchedule>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Pro_RouteSchedule> GetRepo(){
            return GetRepo("","");
        }
        
        public static Pro_RouteSchedule SingleOrDefault(Expression<Func<Pro_RouteSchedule, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Pro_RouteSchedule single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Pro_RouteSchedule SingleOrDefault(Expression<Func<Pro_RouteSchedule, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Pro_RouteSchedule single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Pro_RouteSchedule, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Pro_RouteSchedule, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Pro_RouteSchedule> Find(Expression<Func<Pro_RouteSchedule, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Pro_RouteSchedule> Find(Expression<Func<Pro_RouteSchedule, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Pro_RouteSchedule> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Pro_RouteSchedule> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Pro_RouteSchedule> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Pro_RouteSchedule> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Pro_RouteSchedule> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Pro_RouteSchedule> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Pro_RouteSchedule)){
                Pro_RouteSchedule compare=(Pro_RouteSchedule)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteID;
        public string RouteID
        {
            get { return _RouteID; }
            set
            {
                if(_RouteID!=value){
                    _RouteID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DayNum;
        public int DayNum
        {
            get { return _DayNum; }
            set
            {
                if(_DayNum!=value){
                    _DayNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DayNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Schedule;
        public string Schedule
        {
            get { return _Schedule; }
            set
            {
                if(_Schedule!=value){
                    _Schedule=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Schedule");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Dinner;
        public string Dinner
        {
            get { return _Dinner; }
            set
            {
                if(_Dinner!=value){
                    _Dinner=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dinner");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Stay;
        public string Stay
        {
            get { return _Stay; }
            set
            {
                if(_Stay!=value){
                    _Stay=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Stay");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Traffic;
        public string Traffic
        {
            get { return _Traffic; }
            set
            {
                if(_Traffic!=value){
                    _Traffic=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Traffic");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Pro_RouteSchedule, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Res_Guide table in the DRP Database.
    /// </summary>
    public partial class Res_Guide: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Res_Guide> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Res_Guide>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Res_Guide> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Res_Guide item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Res_Guide item=new Res_Guide();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Res_Guide> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Res_Guide(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Res_Guide.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Guide>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Res_Guide(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Res_Guide(Expression<Func<Res_Guide, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Res_Guide> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Res_Guide> _repo;
            
            if(db.TestMode){
                Res_Guide.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Guide>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Res_Guide> GetRepo(){
            return GetRepo("","");
        }
        
        public static Res_Guide SingleOrDefault(Expression<Func<Res_Guide, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Res_Guide single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Res_Guide SingleOrDefault(Expression<Func<Res_Guide, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Res_Guide single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Res_Guide, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Res_Guide, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Res_Guide> Find(Expression<Func<Res_Guide, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Res_Guide> Find(Expression<Func<Res_Guide, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Res_Guide> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Res_Guide> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Res_Guide> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Res_Guide> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Res_Guide> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Res_Guide> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Res_Guide)){
                Res_Guide compare=(Res_Guide)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DepartureID;
        public string DepartureID
        {
            get { return _DepartureID; }
            set
            {
                if(_DepartureID!=value){
                    _DepartureID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartureID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DepartureName;
        public string DepartureName
        {
            get { return _DepartureName; }
            set
            {
                if(_DepartureName!=value){
                    _DepartureName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartureName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Sex;
        public string Sex
        {
            get { return _Sex; }
            set
            {
                if(_Sex!=value){
                    _Sex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Sex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GuideLevel;
        public string GuideLevel
        {
            get { return _GuideLevel; }
            set
            {
                if(_GuideLevel!=value){
                    _GuideLevel=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuideLevel");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Spell;
        public string Spell
        {
            get { return _Spell; }
            set
            {
                if(_Spell!=value){
                    _Spell=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Spell");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsIDCard;
        public bool? IsIDCard
        {
            get { return _IsIDCard; }
            set
            {
                if(_IsIDCard!=value){
                    _IsIDCard=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsIDCard");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IDCardNum;
        public string IDCardNum
        {
            get { return _IDCardNum; }
            set
            {
                if(_IDCardNum!=value){
                    _IDCardNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IDCardNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsLeaderCard;
        public bool IsLeaderCard
        {
            get { return _IsLeaderCard; }
            set
            {
                if(_IsLeaderCard!=value){
                    _IsLeaderCard=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsLeaderCard");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mail;
        public string Mail
        {
            get { return _Mail; }
            set
            {
                if(_Mail!=value){
                    _Mail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QQ;
        public string QQ
        {
            get { return _QQ; }
            set
            {
                if(_QQ!=value){
                    _QQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Language;
        public string Language
        {
            get { return _Language; }
            set
            {
                if(_Language!=value){
                    _Language=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Language");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsEnable;
        public bool IsEnable
        {
            get { return _IsEnable; }
            set
            {
                if(_IsEnable!=value){
                    _IsEnable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEnable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeNum;
        public int TradeNum
        {
            get { return _TradeNum; }
            set
            {
                if(_TradeNum!=value){
                    _TradeNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _TradeAmt;
        public decimal TradeAmt
        {
            get { return _TradeAmt; }
            set
            {
                if(_TradeAmt!=value){
                    _TradeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeAdultNum;
        public int TradeAdultNum
        {
            get { return _TradeAdultNum; }
            set
            {
                if(_TradeAdultNum!=value){
                    _TradeAdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeChildNum;
        public int TradeChildNum
        {
            get { return _TradeChildNum; }
            set
            {
                if(_TradeChildNum!=value){
                    _TradeChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Skill;
        public string Skill
        {
            get { return _Skill; }
            set
            {
                if(_Skill!=value){
                    _Skill=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Skill");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BankName;
        public string BankName
        {
            get { return _BankName; }
            set
            {
                if(_BankName!=value){
                    _BankName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BankName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BankAcct;
        public string BankAcct
        {
            get { return _BankAcct; }
            set
            {
                if(_BankAcct!=value){
                    _BankAcct=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BankAcct");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IDNum;
        public string IDNum
        {
            get { return _IDNum; }
            set
            {
                if(_IDNum!=value){
                    _IDNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IDNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Res_Guide, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Pro_TourInfo table in the DRP Database.
    /// </summary>
    public partial class Pro_TourInfo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Pro_TourInfo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Pro_TourInfo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Pro_TourInfo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Pro_TourInfo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Pro_TourInfo item=new Pro_TourInfo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Pro_TourInfo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Pro_TourInfo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Pro_TourInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_TourInfo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Pro_TourInfo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Pro_TourInfo(Expression<Func<Pro_TourInfo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Pro_TourInfo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Pro_TourInfo> _repo;
            
            if(db.TestMode){
                Pro_TourInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_TourInfo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Pro_TourInfo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Pro_TourInfo SingleOrDefault(Expression<Func<Pro_TourInfo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Pro_TourInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Pro_TourInfo SingleOrDefault(Expression<Func<Pro_TourInfo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Pro_TourInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Pro_TourInfo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Pro_TourInfo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Pro_TourInfo> Find(Expression<Func<Pro_TourInfo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Pro_TourInfo> Find(Expression<Func<Pro_TourInfo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Pro_TourInfo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Pro_TourInfo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Pro_TourInfo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Pro_TourInfo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Pro_TourInfo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Pro_TourInfo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Pro_TourInfo)){
                Pro_TourInfo compare=(Pro_TourInfo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteID;
        public string RouteID
        {
            get { return _RouteID; }
            set
            {
                if(_RouteID!=value){
                    _RouteID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TourStatus;
        public int TourStatus
        {
            get { return _TourStatus; }
            set
            {
                if(_TourStatus!=value){
                    _TourStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TourName;
        public string TourName
        {
            get { return _TourName; }
            set
            {
                if(_TourName!=value){
                    _TourName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TourNo;
        public string TourNo
        {
            get { return _TourNo; }
            set
            {
                if(_TourNo!=value){
                    _TourNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SeatNum;
        public int SeatNum
        {
            get { return _SeatNum; }
            set
            {
                if(_SeatNum!=value){
                    _SeatNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SeatNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PlanNum;
        public int PlanNum
        {
            get { return _PlanNum; }
            set
            {
                if(_PlanNum!=value){
                    _PlanNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PlanNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ClusterNum;
        public int ClusterNum
        {
            get { return _ClusterNum; }
            set
            {
                if(_ClusterNum!=value){
                    _ClusterNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClusterNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _TourDate;
        public DateTime TourDate
        {
            get { return _TourDate; }
            set
            {
                if(_TourDate!=value){
                    _TourDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TourDays;
        public int TourDays
        {
            get { return _TourDays; }
            set
            {
                if(_TourDays!=value){
                    _TourDays=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourDays");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _ExpiryDate;
        public DateTime ExpiryDate
        {
            get { return _ExpiryDate; }
            set
            {
                if(_ExpiryDate!=value){
                    _ExpiryDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExpiryDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _ReturnDate;
        public DateTime ReturnDate
        {
            get { return _ReturnDate; }
            set
            {
                if(_ReturnDate!=value){
                    _ReturnDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReturnDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DefaultPrice;
        public int DefaultPrice
        {
            get { return _DefaultPrice; }
            set
            {
                if(_DefaultPrice!=value){
                    _DefaultPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DefaultPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NoticePath;
        public string NoticePath
        {
            get { return _NoticePath; }
            set
            {
                if(_NoticePath!=value){
                    _NoticePath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NoticePath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserID;
        public string UpdateUserID
        {
            get { return _UpdateUserID; }
            set
            {
                if(_UpdateUserID!=value){
                    _UpdateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserName;
        public string UpdateUserName
        {
            get { return _UpdateUserName; }
            set
            {
                if(_UpdateUserName!=value){
                    _UpdateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdateDate;
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set
            {
                if(_UpdateDate!=value){
                    _UpdateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Pro_TourInfo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Fin_CollectedItem table in the DRP Database.
    /// </summary>
    public partial class Fin_CollectedItem: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Fin_CollectedItem> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Fin_CollectedItem>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Fin_CollectedItem> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Fin_CollectedItem item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Fin_CollectedItem item=new Fin_CollectedItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Fin_CollectedItem> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Fin_CollectedItem(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Fin_CollectedItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Fin_CollectedItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Fin_CollectedItem(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Fin_CollectedItem(Expression<Func<Fin_CollectedItem, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Fin_CollectedItem> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Fin_CollectedItem> _repo;
            
            if(db.TestMode){
                Fin_CollectedItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Fin_CollectedItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Fin_CollectedItem> GetRepo(){
            return GetRepo("","");
        }
        
        public static Fin_CollectedItem SingleOrDefault(Expression<Func<Fin_CollectedItem, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Fin_CollectedItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Fin_CollectedItem SingleOrDefault(Expression<Func<Fin_CollectedItem, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Fin_CollectedItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Fin_CollectedItem, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Fin_CollectedItem, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Fin_CollectedItem> Find(Expression<Func<Fin_CollectedItem, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Fin_CollectedItem> Find(Expression<Func<Fin_CollectedItem, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Fin_CollectedItem> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Fin_CollectedItem> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Fin_CollectedItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Fin_CollectedItem> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Fin_CollectedItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Fin_CollectedItem> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Fin_CollectedItem)){
                Fin_CollectedItem compare=(Fin_CollectedItem)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BankName;
        public string BankName
        {
            get { return _BankName; }
            set
            {
                if(_BankName!=value){
                    _BankName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BankName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _TradeDate;
        public DateTime TradeDate
        {
            get { return _TradeDate; }
            set
            {
                if(_TradeDate!=value){
                    _TradeDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TradeTime;
        public string TradeTime
        {
            get { return _TradeTime; }
            set
            {
                if(_TradeTime!=value){
                    _TradeTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Summary;
        public string Summary
        {
            get { return _Summary; }
            set
            {
                if(_Summary!=value){
                    _Summary=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Summary");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _IncomeAmt;
        public decimal IncomeAmt
        {
            get { return _IncomeAmt; }
            set
            {
                if(_IncomeAmt!=value){
                    _IncomeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncomeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FromBank;
        public string FromBank
        {
            get { return _FromBank; }
            set
            {
                if(_FromBank!=value){
                    _FromBank=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromBank");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FromAcct;
        public string FromAcct
        {
            get { return _FromAcct; }
            set
            {
                if(_FromAcct!=value){
                    _FromAcct=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromAcct");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderNo;
        public string OrderNo
        {
            get { return _OrderNo; }
            set
            {
                if(_OrderNo!=value){
                    _OrderNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrderType;
        public int? OrderType
        {
            get { return _OrderType; }
            set
            {
                if(_OrderType!=value){
                    _OrderType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BillNo;
        public string BillNo
        {
            get { return _BillNo; }
            set
            {
                if(_BillNo!=value){
                    _BillNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BillNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ClaimUser;
        public string ClaimUser
        {
            get { return _ClaimUser; }
            set
            {
                if(_ClaimUser!=value){
                    _ClaimUser=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClaimUser");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Creator;
        public string Creator
        {
            get { return _Creator; }
            set
            {
                if(_Creator!=value){
                    _Creator=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Creator");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreatorID;
        public string CreatorID
        {
            get { return _CreatorID; }
            set
            {
                if(_CreatorID!=value){
                    _CreatorID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatorID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _BatchCollected;
        public bool? BatchCollected
        {
            get { return _BatchCollected; }
            set
            {
                if(_BatchCollected!=value){
                    _BatchCollected=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BatchCollected");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Fin_CollectedItem, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Glo_SerialNo table in the DRP Database.
    /// </summary>
    public partial class Glo_SerialNo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Glo_SerialNo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Glo_SerialNo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Glo_SerialNo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Glo_SerialNo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Glo_SerialNo item=new Glo_SerialNo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Glo_SerialNo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Glo_SerialNo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Glo_SerialNo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_SerialNo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Glo_SerialNo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Glo_SerialNo(Expression<Func<Glo_SerialNo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Glo_SerialNo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Glo_SerialNo> _repo;
            
            if(db.TestMode){
                Glo_SerialNo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_SerialNo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Glo_SerialNo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Glo_SerialNo SingleOrDefault(Expression<Func<Glo_SerialNo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Glo_SerialNo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Glo_SerialNo SingleOrDefault(Expression<Func<Glo_SerialNo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Glo_SerialNo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Glo_SerialNo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Glo_SerialNo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Glo_SerialNo> Find(Expression<Func<Glo_SerialNo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Glo_SerialNo> Find(Expression<Func<Glo_SerialNo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Glo_SerialNo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Glo_SerialNo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Glo_SerialNo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Glo_SerialNo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Glo_SerialNo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Glo_SerialNo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Glo_SerialNo)){
                Glo_SerialNo compare=(Glo_SerialNo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SerialType;
        public string SerialType
        {
            get { return _SerialType; }
            set
            {
                if(_SerialType!=value){
                    _SerialType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SerialType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SerialNo;
        public int SerialNo
        {
            get { return _SerialNo; }
            set
            {
                if(_SerialNo!=value){
                    _SerialNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SerialNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Glo_SerialNo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Pro_TourPrice table in the DRP Database.
    /// </summary>
    public partial class Pro_TourPrice: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Pro_TourPrice> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Pro_TourPrice>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Pro_TourPrice> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Pro_TourPrice item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Pro_TourPrice item=new Pro_TourPrice();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Pro_TourPrice> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Pro_TourPrice(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Pro_TourPrice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_TourPrice>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Pro_TourPrice(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Pro_TourPrice(Expression<Func<Pro_TourPrice, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Pro_TourPrice> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Pro_TourPrice> _repo;
            
            if(db.TestMode){
                Pro_TourPrice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_TourPrice>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Pro_TourPrice> GetRepo(){
            return GetRepo("","");
        }
        
        public static Pro_TourPrice SingleOrDefault(Expression<Func<Pro_TourPrice, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Pro_TourPrice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Pro_TourPrice SingleOrDefault(Expression<Func<Pro_TourPrice, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Pro_TourPrice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Pro_TourPrice, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Pro_TourPrice, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Pro_TourPrice> Find(Expression<Func<Pro_TourPrice, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Pro_TourPrice> Find(Expression<Func<Pro_TourPrice, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Pro_TourPrice> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Pro_TourPrice> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Pro_TourPrice> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Pro_TourPrice> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Pro_TourPrice> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Pro_TourPrice> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Pro_TourPrice)){
                Pro_TourPrice compare=(Pro_TourPrice)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TourID;
        public string TourID
        {
            get { return _TourID; }
            set
            {
                if(_TourID!=value){
                    _TourID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SalePrice;
        public int SalePrice
        {
            get { return _SalePrice; }
            set
            {
                if(_SalePrice!=value){
                    _SalePrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SalePrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Rebate;
        public int Rebate
        {
            get { return _Rebate; }
            set
            {
                if(_Rebate!=value){
                    _Rebate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Rebate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _RoomRate;
        public int RoomRate
        {
            get { return _RoomRate; }
            set
            {
                if(_RoomRate!=value){
                    _RoomRate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomRate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsSeat;
        public bool IsSeat
        {
            get { return _IsSeat; }
            set
            {
                if(_IsSeat!=value){
                    _IsSeat=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsSeat");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsChild;
        public bool IsChild
        {
            get { return _IsChild; }
            set
            {
                if(_IsChild!=value){
                    _IsChild=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsChild");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsDefault;
        public bool IsDefault
        {
            get { return _IsDefault; }
            set
            {
                if(_IsDefault!=value){
                    _IsDefault=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDefault");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserID;
        public string UpdateUserID
        {
            get { return _UpdateUserID; }
            set
            {
                if(_UpdateUserID!=value){
                    _UpdateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserName;
        public string UpdateUserName
        {
            get { return _UpdateUserName; }
            set
            {
                if(_UpdateUserName!=value){
                    _UpdateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdateDate;
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set
            {
                if(_UpdateDate!=value){
                    _UpdateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Pro_TourPrice, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Pro_TourSeatLock table in the DRP Database.
    /// </summary>
    public partial class Pro_TourSeatLock: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Pro_TourSeatLock> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Pro_TourSeatLock>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Pro_TourSeatLock> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Pro_TourSeatLock item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Pro_TourSeatLock item=new Pro_TourSeatLock();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Pro_TourSeatLock> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Pro_TourSeatLock(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Pro_TourSeatLock.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_TourSeatLock>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Pro_TourSeatLock(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Pro_TourSeatLock(Expression<Func<Pro_TourSeatLock, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Pro_TourSeatLock> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Pro_TourSeatLock> _repo;
            
            if(db.TestMode){
                Pro_TourSeatLock.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_TourSeatLock>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Pro_TourSeatLock> GetRepo(){
            return GetRepo("","");
        }
        
        public static Pro_TourSeatLock SingleOrDefault(Expression<Func<Pro_TourSeatLock, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Pro_TourSeatLock single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Pro_TourSeatLock SingleOrDefault(Expression<Func<Pro_TourSeatLock, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Pro_TourSeatLock single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Pro_TourSeatLock, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Pro_TourSeatLock, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Pro_TourSeatLock> Find(Expression<Func<Pro_TourSeatLock, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Pro_TourSeatLock> Find(Expression<Func<Pro_TourSeatLock, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Pro_TourSeatLock> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Pro_TourSeatLock> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Pro_TourSeatLock> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Pro_TourSeatLock> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Pro_TourSeatLock> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Pro_TourSeatLock> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Pro_TourSeatLock)){
                Pro_TourSeatLock compare=(Pro_TourSeatLock)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TourID;
        public string TourID
        {
            get { return _TourID; }
            set
            {
                if(_TourID!=value){
                    _TourID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SeatNo;
        public int SeatNo
        {
            get { return _SeatNo; }
            set
            {
                if(_SeatNo!=value){
                    _SeatNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SeatNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserID;
        public string UpdateUserID
        {
            get { return _UpdateUserID; }
            set
            {
                if(_UpdateUserID!=value){
                    _UpdateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserName;
        public string UpdateUserName
        {
            get { return _UpdateUserName; }
            set
            {
                if(_UpdateUserName!=value){
                    _UpdateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdateDate;
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set
            {
                if(_UpdateDate!=value){
                    _UpdateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Pro_TourSeatLock, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Pro_TourVenue table in the DRP Database.
    /// </summary>
    public partial class Pro_TourVenue: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Pro_TourVenue> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Pro_TourVenue>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Pro_TourVenue> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Pro_TourVenue item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Pro_TourVenue item=new Pro_TourVenue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Pro_TourVenue> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Pro_TourVenue(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Pro_TourVenue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_TourVenue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Pro_TourVenue(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Pro_TourVenue(Expression<Func<Pro_TourVenue, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Pro_TourVenue> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Pro_TourVenue> _repo;
            
            if(db.TestMode){
                Pro_TourVenue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_TourVenue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Pro_TourVenue> GetRepo(){
            return GetRepo("","");
        }
        
        public static Pro_TourVenue SingleOrDefault(Expression<Func<Pro_TourVenue, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Pro_TourVenue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Pro_TourVenue SingleOrDefault(Expression<Func<Pro_TourVenue, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Pro_TourVenue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Pro_TourVenue, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Pro_TourVenue, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Pro_TourVenue> Find(Expression<Func<Pro_TourVenue, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Pro_TourVenue> Find(Expression<Func<Pro_TourVenue, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Pro_TourVenue> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Pro_TourVenue> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Pro_TourVenue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Pro_TourVenue> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Pro_TourVenue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Pro_TourVenue> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Pro_TourVenue)){
                Pro_TourVenue compare=(Pro_TourVenue)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TourID;
        public string TourID
        {
            get { return _TourID; }
            set
            {
                if(_TourID!=value){
                    _TourID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MeetTime;
        public string MeetTime
        {
            get { return _MeetTime; }
            set
            {
                if(_MeetTime!=value){
                    _MeetTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PickAmt;
        public int PickAmt
        {
            get { return _PickAmt; }
            set
            {
                if(_PickAmt!=value){
                    _PickAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PickAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SendAmt;
        public int SendAmt
        {
            get { return _SendAmt; }
            set
            {
                if(_SendAmt!=value){
                    _SendAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SendAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DepartureID;
        public string DepartureID
        {
            get { return _DepartureID; }
            set
            {
                if(_DepartureID!=value){
                    _DepartureID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartureID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Departure;
        public string Departure
        {
            get { return _Departure; }
            set
            {
                if(_Departure!=value){
                    _Departure=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Departure");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserID;
        public string UpdateUserID
        {
            get { return _UpdateUserID; }
            set
            {
                if(_UpdateUserID!=value){
                    _UpdateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserName;
        public string UpdateUserName
        {
            get { return _UpdateUserName; }
            set
            {
                if(_UpdateUserName!=value){
                    _UpdateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdateDate;
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set
            {
                if(_UpdateDate!=value){
                    _UpdateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Pro_TourVenue, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Res_Other table in the DRP Database.
    /// </summary>
    public partial class Res_Other: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Res_Other> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Res_Other>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Res_Other> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Res_Other item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Res_Other item=new Res_Other();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Res_Other> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Res_Other(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Res_Other.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Other>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Res_Other(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Res_Other(Expression<Func<Res_Other, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Res_Other> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Res_Other> _repo;
            
            if(db.TestMode){
                Res_Other.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Other>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Res_Other> GetRepo(){
            return GetRepo("","");
        }
        
        public static Res_Other SingleOrDefault(Expression<Func<Res_Other, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Res_Other single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Res_Other SingleOrDefault(Expression<Func<Res_Other, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Res_Other single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Res_Other, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Res_Other, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Res_Other> Find(Expression<Func<Res_Other, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Res_Other> Find(Expression<Func<Res_Other, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Res_Other> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Res_Other> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Res_Other> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Res_Other> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Res_Other> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Res_Other> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Res_Other)){
                Res_Other compare=(Res_Other)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Spell;
        public string Spell
        {
            get { return _Spell; }
            set
            {
                if(_Spell!=value){
                    _Spell=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Spell");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TicketType;
        public string TicketType
        {
            get { return _TicketType; }
            set
            {
                if(_TicketType!=value){
                    _TicketType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Contact;
        public string Contact
        {
            get { return _Contact; }
            set
            {
                if(_Contact!=value){
                    _Contact=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Contact");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mail;
        public string Mail
        {
            get { return _Mail; }
            set
            {
                if(_Mail!=value){
                    _Mail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsEnable;
        public bool IsEnable
        {
            get { return _IsEnable; }
            set
            {
                if(_IsEnable!=value){
                    _IsEnable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEnable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Addr;
        public string Addr
        {
            get { return _Addr; }
            set
            {
                if(_Addr!=value){
                    _Addr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Addr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeNum;
        public int TradeNum
        {
            get { return _TradeNum; }
            set
            {
                if(_TradeNum!=value){
                    _TradeNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _TradeAmt;
        public decimal TradeAmt
        {
            get { return _TradeAmt; }
            set
            {
                if(_TradeAmt!=value){
                    _TradeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeAdultNum;
        public int TradeAdultNum
        {
            get { return _TradeAdultNum; }
            set
            {
                if(_TradeAdultNum!=value){
                    _TradeAdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeChildNum;
        public int TradeChildNum
        {
            get { return _TradeChildNum; }
            set
            {
                if(_TradeChildNum!=value){
                    _TradeChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Res_Other, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sys_IPFilter table in the DRP Database.
    /// </summary>
    public partial class Sys_IPFilter: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sys_IPFilter> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sys_IPFilter>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sys_IPFilter> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sys_IPFilter item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sys_IPFilter item=new Sys_IPFilter();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sys_IPFilter> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sys_IPFilter(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sys_IPFilter.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_IPFilter>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sys_IPFilter(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sys_IPFilter(Expression<Func<Sys_IPFilter, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sys_IPFilter> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sys_IPFilter> _repo;
            
            if(db.TestMode){
                Sys_IPFilter.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sys_IPFilter>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sys_IPFilter> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sys_IPFilter SingleOrDefault(Expression<Func<Sys_IPFilter, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sys_IPFilter single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sys_IPFilter SingleOrDefault(Expression<Func<Sys_IPFilter, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sys_IPFilter single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sys_IPFilter, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sys_IPFilter, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sys_IPFilter> Find(Expression<Func<Sys_IPFilter, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sys_IPFilter> Find(Expression<Func<Sys_IPFilter, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sys_IPFilter> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sys_IPFilter> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sys_IPFilter> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sys_IPFilter> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sys_IPFilter> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sys_IPFilter> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sys_IPFilter)){
                Sys_IPFilter compare=(Sys_IPFilter)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StartIP;
        public string StartIP
        {
            get { return _StartIP; }
            set
            {
                if(_StartIP!=value){
                    _StartIP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartIP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EndIP;
        public string EndIP
        {
            get { return _EndIP; }
            set
            {
                if(_EndIP!=value){
                    _EndIP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndIP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _xType;
        public int xType
        {
            get { return _xType; }
            set
            {
                if(_xType!=value){
                    _xType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="xType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Creator;
        public string Creator
        {
            get { return _Creator; }
            set
            {
                if(_Creator!=value){
                    _Creator=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Creator");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreatorID;
        public string CreatorID
        {
            get { return _CreatorID; }
            set
            {
                if(_CreatorID!=value){
                    _CreatorID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatorID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sys_IPFilter, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_SupplierInvoice table in the DRP Database.
    /// </summary>
    public partial class Ord_SupplierInvoice: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_SupplierInvoice> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_SupplierInvoice>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_SupplierInvoice> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_SupplierInvoice item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_SupplierInvoice item=new Ord_SupplierInvoice();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_SupplierInvoice> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_SupplierInvoice(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_SupplierInvoice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_SupplierInvoice>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_SupplierInvoice(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_SupplierInvoice(Expression<Func<Ord_SupplierInvoice, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_SupplierInvoice> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_SupplierInvoice> _repo;
            
            if(db.TestMode){
                Ord_SupplierInvoice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_SupplierInvoice>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_SupplierInvoice> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_SupplierInvoice SingleOrDefault(Expression<Func<Ord_SupplierInvoice, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_SupplierInvoice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_SupplierInvoice SingleOrDefault(Expression<Func<Ord_SupplierInvoice, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_SupplierInvoice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_SupplierInvoice, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_SupplierInvoice, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_SupplierInvoice> Find(Expression<Func<Ord_SupplierInvoice, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_SupplierInvoice> Find(Expression<Func<Ord_SupplierInvoice, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_SupplierInvoice> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_SupplierInvoice> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_SupplierInvoice> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_SupplierInvoice> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_SupplierInvoice> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_SupplierInvoice> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_SupplierInvoice)){
                Ord_SupplierInvoice compare=(Ord_SupplierInvoice)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _InvoiceNo;
        public string InvoiceNo
        {
            get { return _InvoiceNo; }
            set
            {
                if(_InvoiceNo!=value){
                    _InvoiceNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _InvoiceAmt;
        public decimal InvoiceAmt
        {
            get { return _InvoiceAmt; }
            set
            {
                if(_InvoiceAmt!=value){
                    _InvoiceAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_SupplierInvoice, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderCostItem table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderCostItem: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderCostItem> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderCostItem>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderCostItem> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderCostItem item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderCostItem item=new Ord_OrderCostItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderCostItem> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderCostItem(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderCostItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderCostItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderCostItem(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderCostItem(Expression<Func<Ord_OrderCostItem, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderCostItem> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderCostItem> _repo;
            
            if(db.TestMode){
                Ord_OrderCostItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderCostItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderCostItem> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderCostItem SingleOrDefault(Expression<Func<Ord_OrderCostItem, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderCostItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderCostItem SingleOrDefault(Expression<Func<Ord_OrderCostItem, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderCostItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderCostItem, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderCostItem, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderCostItem> Find(Expression<Func<Ord_OrderCostItem, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderCostItem> Find(Expression<Func<Ord_OrderCostItem, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderCostItem> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderCostItem> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderCostItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderCostItem> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderCostItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderCostItem> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderCostItem)){
                Ord_OrderCostItem compare=(Ord_OrderCostItem)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ItemType;
        public int ItemType
        {
            get { return _ItemType; }
            set
            {
                if(_ItemType!=value){
                    _ItemType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ItemName;
        public string ItemName
        {
            get { return _ItemName; }
            set
            {
                if(_ItemName!=value){
                    _ItemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SupplierID;
        public string SupplierID
        {
            get { return _SupplierID; }
            set
            {
                if(_SupplierID!=value){
                    _SupplierID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SupplierID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Supplier;
        public string Supplier
        {
            get { return _Supplier; }
            set
            {
                if(_Supplier!=value){
                    _Supplier=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Supplier");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _CostAmt;
        public decimal CostAmt
        {
            get { return _CostAmt; }
            set
            {
                if(_CostAmt!=value){
                    _CostAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CostAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderCostItem, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Res_Visa table in the DRP Database.
    /// </summary>
    public partial class Res_Visa: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Res_Visa> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Res_Visa>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Res_Visa> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Res_Visa item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Res_Visa item=new Res_Visa();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Res_Visa> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Res_Visa(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Res_Visa.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Visa>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Res_Visa(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Res_Visa(Expression<Func<Res_Visa, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Res_Visa> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Res_Visa> _repo;
            
            if(db.TestMode){
                Res_Visa.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Visa>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Res_Visa> GetRepo(){
            return GetRepo("","");
        }
        
        public static Res_Visa SingleOrDefault(Expression<Func<Res_Visa, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Res_Visa single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Res_Visa SingleOrDefault(Expression<Func<Res_Visa, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Res_Visa single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Res_Visa, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Res_Visa, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Res_Visa> Find(Expression<Func<Res_Visa, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Res_Visa> Find(Expression<Func<Res_Visa, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Res_Visa> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Res_Visa> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Res_Visa> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Res_Visa> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Res_Visa> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Res_Visa> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Res_Visa)){
                Res_Visa compare=(Res_Visa)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Spell;
        public string Spell
        {
            get { return _Spell; }
            set
            {
                if(_Spell!=value){
                    _Spell=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Spell");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Contact;
        public string Contact
        {
            get { return _Contact; }
            set
            {
                if(_Contact!=value){
                    _Contact=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Contact");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mail;
        public string Mail
        {
            get { return _Mail; }
            set
            {
                if(_Mail!=value){
                    _Mail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsEnable;
        public bool IsEnable
        {
            get { return _IsEnable; }
            set
            {
                if(_IsEnable!=value){
                    _IsEnable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEnable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Addr;
        public string Addr
        {
            get { return _Addr; }
            set
            {
                if(_Addr!=value){
                    _Addr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Addr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeNum;
        public int TradeNum
        {
            get { return _TradeNum; }
            set
            {
                if(_TradeNum!=value){
                    _TradeNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _TradeAmt;
        public decimal TradeAmt
        {
            get { return _TradeAmt; }
            set
            {
                if(_TradeAmt!=value){
                    _TradeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeAdultNum;
        public int TradeAdultNum
        {
            get { return _TradeAdultNum; }
            set
            {
                if(_TradeAdultNum!=value){
                    _TradeAdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeChildNum;
        public int TradeChildNum
        {
            get { return _TradeChildNum; }
            set
            {
                if(_TradeChildNum!=value){
                    _TradeChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QQ;
        public string QQ
        {
            get { return _QQ; }
            set
            {
                if(_QQ!=value){
                    _QQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Wechat;
        public string Wechat
        {
            get { return _Wechat; }
            set
            {
                if(_Wechat!=value){
                    _Wechat=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Wechat");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BizType;
        public string BizType
        {
            get { return _BizType; }
            set
            {
                if(_BizType!=value){
                    _BizType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BizType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BankInfo;
        public string BankInfo
        {
            get { return _BankInfo; }
            set
            {
                if(_BankInfo!=value){
                    _BankInfo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BankInfo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Res_Visa, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the OTA_AreaSetting table in the DRP Database.
    /// </summary>
    public partial class OTA_AreaSetting: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<OTA_AreaSetting> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<OTA_AreaSetting>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<OTA_AreaSetting> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(OTA_AreaSetting item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                OTA_AreaSetting item=new OTA_AreaSetting();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<OTA_AreaSetting> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public OTA_AreaSetting(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                OTA_AreaSetting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<OTA_AreaSetting>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public OTA_AreaSetting(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public OTA_AreaSetting(Expression<Func<OTA_AreaSetting, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<OTA_AreaSetting> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<OTA_AreaSetting> _repo;
            
            if(db.TestMode){
                OTA_AreaSetting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<OTA_AreaSetting>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OTA_AreaSetting> GetRepo(){
            return GetRepo("","");
        }
        
        public static OTA_AreaSetting SingleOrDefault(Expression<Func<OTA_AreaSetting, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            OTA_AreaSetting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static OTA_AreaSetting SingleOrDefault(Expression<Func<OTA_AreaSetting, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            OTA_AreaSetting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<OTA_AreaSetting, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<OTA_AreaSetting, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<OTA_AreaSetting> Find(Expression<Func<OTA_AreaSetting, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OTA_AreaSetting> Find(Expression<Func<OTA_AreaSetting, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<OTA_AreaSetting> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<OTA_AreaSetting> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OTA_AreaSetting> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OTA_AreaSetting> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OTA_AreaSetting> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<OTA_AreaSetting> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.OTAareaID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(OTA_AreaSetting)){
                OTA_AreaSetting compare=(OTA_AreaSetting)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.OTAareaID.ToString();
                    }

        public string DescriptorColumn() {
            return "OTAareaID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "OTAareaID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        Guid _ID;
        public Guid ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _OTAID;
        public Guid OTAID
        {
            get { return _OTAID; }
            set
            {
                if(_OTAID!=value){
                    _OTAID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OTAID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OTAareaID;
        public string OTAareaID
        {
            get { return _OTAareaID; }
            set
            {
                if(_OTAareaID!=value){
                    _OTAareaID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OTAareaID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OTAareaName;
        public string OTAareaName
        {
            get { return _OTAareaName; }
            set
            {
                if(_OTAareaName!=value){
                    _OTAareaName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OTAareaName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OTAareaType;
        public int OTAareaType
        {
            get { return _OTAareaType; }
            set
            {
                if(_OTAareaType!=value){
                    _OTAareaType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OTAareaType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _AreaID;
        public Guid AreaID
        {
            get { return _AreaID; }
            set
            {
                if(_AreaID!=value){
                    _AreaID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AreaID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AreaName;
        public string AreaName
        {
            get { return _AreaName; }
            set
            {
                if(_AreaName!=value){
                    _AreaName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AreaName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _OrgID;
        public Guid OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<OTA_AreaSetting, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Crm_Customer table in the DRP Database.
    /// </summary>
    public partial class Crm_Customer: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Crm_Customer> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Crm_Customer>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Crm_Customer> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Crm_Customer item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Crm_Customer item=new Crm_Customer();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Crm_Customer> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Crm_Customer(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Crm_Customer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Crm_Customer>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Crm_Customer(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Crm_Customer(Expression<Func<Crm_Customer, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Crm_Customer> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Crm_Customer> _repo;
            
            if(db.TestMode){
                Crm_Customer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Crm_Customer>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Crm_Customer> GetRepo(){
            return GetRepo("","");
        }
        
        public static Crm_Customer SingleOrDefault(Expression<Func<Crm_Customer, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Crm_Customer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Crm_Customer SingleOrDefault(Expression<Func<Crm_Customer, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Crm_Customer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Crm_Customer, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Crm_Customer, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Crm_Customer> Find(Expression<Func<Crm_Customer, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Crm_Customer> Find(Expression<Func<Crm_Customer, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Crm_Customer> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Crm_Customer> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Crm_Customer> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Crm_Customer> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Crm_Customer> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Crm_Customer> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Crm_Customer)){
                Crm_Customer compare=(Crm_Customer)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Company;
        public string Company
        {
            get { return _Company; }
            set
            {
                if(_Company!=value){
                    _Company=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Company");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Sex;
        public string Sex
        {
            get { return _Sex; }
            set
            {
                if(_Sex!=value){
                    _Sex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Sex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IDNum;
        public string IDNum
        {
            get { return _IDNum; }
            set
            {
                if(_IDNum!=value){
                    _IDNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IDNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Fax;
        public string Fax
        {
            get { return _Fax; }
            set
            {
                if(_Fax!=value){
                    _Fax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Fax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mail;
        public string Mail
        {
            get { return _Mail; }
            set
            {
                if(_Mail!=value){
                    _Mail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Addr;
        public string Addr
        {
            get { return _Addr; }
            set
            {
                if(_Addr!=value){
                    _Addr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Addr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomerType;
        public string CustomerType
        {
            get { return _CustomerType; }
            set
            {
                if(_CustomerType!=value){
                    _CustomerType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeNum;
        public int TradeNum
        {
            get { return _TradeNum; }
            set
            {
                if(_TradeNum!=value){
                    _TradeNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _TradeAmt;
        public decimal TradeAmt
        {
            get { return _TradeAmt; }
            set
            {
                if(_TradeAmt!=value){
                    _TradeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CommunicateNum;
        public int CommunicateNum
        {
            get { return _CommunicateNum; }
            set
            {
                if(_CommunicateNum!=value){
                    _CommunicateNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CommunicateNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QQ;
        public string QQ
        {
            get { return _QQ; }
            set
            {
                if(_QQ!=value){
                    _QQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomerCertificate;
        public string CustomerCertificate
        {
            get { return _CustomerCertificate; }
            set
            {
                if(_CustomerCertificate!=value){
                    _CustomerCertificate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerCertificate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EngName;
        public string EngName
        {
            get { return _EngName; }
            set
            {
                if(_EngName!=value){
                    _EngName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EngName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _BirthDay;
        public DateTime? BirthDay
        {
            get { return _BirthDay; }
            set
            {
                if(_BirthDay!=value){
                    _BirthDay=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BirthDay");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Crm_Customer, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the OTA_Setting table in the DRP Database.
    /// </summary>
    public partial class OTA_Setting: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<OTA_Setting> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<OTA_Setting>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<OTA_Setting> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(OTA_Setting item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                OTA_Setting item=new OTA_Setting();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<OTA_Setting> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public OTA_Setting(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                OTA_Setting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<OTA_Setting>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public OTA_Setting(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public OTA_Setting(Expression<Func<OTA_Setting, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<OTA_Setting> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<OTA_Setting> _repo;
            
            if(db.TestMode){
                OTA_Setting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<OTA_Setting>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OTA_Setting> GetRepo(){
            return GetRepo("","");
        }
        
        public static OTA_Setting SingleOrDefault(Expression<Func<OTA_Setting, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            OTA_Setting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static OTA_Setting SingleOrDefault(Expression<Func<OTA_Setting, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            OTA_Setting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<OTA_Setting, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<OTA_Setting, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<OTA_Setting> Find(Expression<Func<OTA_Setting, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OTA_Setting> Find(Expression<Func<OTA_Setting, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<OTA_Setting> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<OTA_Setting> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OTA_Setting> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OTA_Setting> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OTA_Setting> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<OTA_Setting> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.OTAName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(OTA_Setting)){
                OTA_Setting compare=(OTA_Setting)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.OTAName.ToString();
                    }

        public string DescriptorColumn() {
            return "OTAName";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "OTAName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        Guid _ID;
        public Guid ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _OTAID;
        public Guid OTAID
        {
            get { return _OTAID; }
            set
            {
                if(_OTAID!=value){
                    _OTAID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OTAID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OTAName;
        public string OTAName
        {
            get { return _OTAName; }
            set
            {
                if(_OTAName!=value){
                    _OTAName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OTAName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AcctID;
        public string AcctID
        {
            get { return _AcctID; }
            set
            {
                if(_AcctID!=value){
                    _AcctID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AcctID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AcctPwd;
        public string AcctPwd
        {
            get { return _AcctPwd; }
            set
            {
                if(_AcctPwd!=value){
                    _AcctPwd=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AcctPwd");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AppId;
        public string AppId
        {
            get { return _AppId; }
            set
            {
                if(_AppId!=value){
                    _AppId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AppKey;
        public string AppKey
        {
            get { return _AppKey; }
            set
            {
                if(_AppKey!=value){
                    _AppKey=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppKey");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OTA;
        public string OTA
        {
            get { return _OTA; }
            set
            {
                if(_OTA!=value){
                    _OTA=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OTA");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SyncType;
        public int SyncType
        {
            get { return _SyncType; }
            set
            {
                if(_SyncType!=value){
                    _SyncType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SyncType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Creator;
        public string Creator
        {
            get { return _Creator; }
            set
            {
                if(_Creator!=value){
                    _Creator=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Creator");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _CreatorID;
        public Guid CreatorID
        {
            get { return _CreatorID; }
            set
            {
                if(_CreatorID!=value){
                    _CreatorID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatorID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _DeptID;
        public Guid DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OTAServiceUrl;
        public string OTAServiceUrl
        {
            get { return _OTAServiceUrl; }
            set
            {
                if(_OTAServiceUrl!=value){
                    _OTAServiceUrl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OTAServiceUrl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _OrgID;
        public Guid OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<OTA_Setting, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderPrice table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderPrice: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderPrice> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderPrice>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderPrice> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderPrice item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderPrice item=new Ord_OrderPrice();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderPrice> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderPrice(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderPrice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderPrice>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderPrice(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderPrice(Expression<Func<Ord_OrderPrice, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderPrice> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderPrice> _repo;
            
            if(db.TestMode){
                Ord_OrderPrice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderPrice>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderPrice> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderPrice SingleOrDefault(Expression<Func<Ord_OrderPrice, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderPrice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderPrice SingleOrDefault(Expression<Func<Ord_OrderPrice, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderPrice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderPrice, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderPrice, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderPrice> Find(Expression<Func<Ord_OrderPrice, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderPrice> Find(Expression<Func<Ord_OrderPrice, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderPrice> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderPrice> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderPrice> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderPrice> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderPrice> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderPrice> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderPrice)){
                Ord_OrderPrice compare=(Ord_OrderPrice)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SalePrice;
        public int SalePrice
        {
            get { return _SalePrice; }
            set
            {
                if(_SalePrice!=value){
                    _SalePrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SalePrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Rebate;
        public int Rebate
        {
            get { return _Rebate; }
            set
            {
                if(_Rebate!=value){
                    _Rebate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Rebate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _VisitorNum;
        public int VisitorNum
        {
            get { return _VisitorNum; }
            set
            {
                if(_VisitorNum!=value){
                    _VisitorNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VisitorNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _RoomRate;
        public int RoomRate
        {
            get { return _RoomRate; }
            set
            {
                if(_RoomRate!=value){
                    _RoomRate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomRate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsSeat;
        public bool IsSeat
        {
            get { return _IsSeat; }
            set
            {
                if(_IsSeat!=value){
                    _IsSeat=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsSeat");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsChild;
        public bool IsChild
        {
            get { return _IsChild; }
            set
            {
                if(_IsChild!=value){
                    _IsChild=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsChild");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _InsuranceAmt;
        public decimal? InsuranceAmt
        {
            get { return _InsuranceAmt; }
            set
            {
                if(_InsuranceAmt!=value){
                    _InsuranceAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InsuranceAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _InsuranceCost;
        public decimal? InsuranceCost
        {
            get { return _InsuranceCost; }
            set
            {
                if(_InsuranceCost!=value){
                    _InsuranceCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InsuranceCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TourPriceID;
        public string TourPriceID
        {
            get { return _TourPriceID; }
            set
            {
                if(_TourPriceID!=value){
                    _TourPriceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourPriceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderPrice, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sms_Message table in the DRP Database.
    /// </summary>
    public partial class Sms_Message: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sms_Message> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sms_Message>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sms_Message> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sms_Message item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sms_Message item=new Sms_Message();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sms_Message> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sms_Message(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sms_Message.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sms_Message>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sms_Message(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sms_Message(Expression<Func<Sms_Message, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sms_Message> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sms_Message> _repo;
            
            if(db.TestMode){
                Sms_Message.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sms_Message>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sms_Message> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sms_Message SingleOrDefault(Expression<Func<Sms_Message, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sms_Message single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sms_Message SingleOrDefault(Expression<Func<Sms_Message, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sms_Message single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sms_Message, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sms_Message, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sms_Message> Find(Expression<Func<Sms_Message, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sms_Message> Find(Expression<Func<Sms_Message, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sms_Message> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sms_Message> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sms_Message> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sms_Message> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sms_Message> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sms_Message> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sms_Message)){
                Sms_Message compare=(Sms_Message)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SendUserID;
        public string SendUserID
        {
            get { return _SendUserID; }
            set
            {
                if(_SendUserID!=value){
                    _SendUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SendUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SendUserName;
        public string SendUserName
        {
            get { return _SendUserName; }
            set
            {
                if(_SendUserName!=value){
                    _SendUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SendUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RecMobile;
        public string RecMobile
        {
            get { return _RecMobile; }
            set
            {
                if(_RecMobile!=value){
                    _RecMobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecMobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MsgContent;
        public string MsgContent
        {
            get { return _MsgContent; }
            set
            {
                if(_MsgContent!=value){
                    _MsgContent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MsgContent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sms_Message, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the OTA_UserInfo table in the DRP Database.
    /// </summary>
    public partial class OTA_UserInfo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<OTA_UserInfo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<OTA_UserInfo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<OTA_UserInfo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(OTA_UserInfo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                OTA_UserInfo item=new OTA_UserInfo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<OTA_UserInfo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public OTA_UserInfo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                OTA_UserInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<OTA_UserInfo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public OTA_UserInfo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public OTA_UserInfo(Expression<Func<OTA_UserInfo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<OTA_UserInfo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<OTA_UserInfo> _repo;
            
            if(db.TestMode){
                OTA_UserInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<OTA_UserInfo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OTA_UserInfo> GetRepo(){
            return GetRepo("","");
        }
        
        public static OTA_UserInfo SingleOrDefault(Expression<Func<OTA_UserInfo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            OTA_UserInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static OTA_UserInfo SingleOrDefault(Expression<Func<OTA_UserInfo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            OTA_UserInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<OTA_UserInfo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<OTA_UserInfo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<OTA_UserInfo> Find(Expression<Func<OTA_UserInfo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OTA_UserInfo> Find(Expression<Func<OTA_UserInfo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<OTA_UserInfo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<OTA_UserInfo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OTA_UserInfo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OTA_UserInfo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OTA_UserInfo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<OTA_UserInfo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.OTAUID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(OTA_UserInfo)){
                OTA_UserInfo compare=(OTA_UserInfo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.OTAUID.ToString();
                    }

        public string DescriptorColumn() {
            return "OTAUID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "OTAUID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        Guid _ID;
        public Guid ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _OTAID;
        public Guid OTAID
        {
            get { return _OTAID; }
            set
            {
                if(_OTAID!=value){
                    _OTAID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OTAID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OTAUID;
        public string OTAUID
        {
            get { return _OTAUID; }
            set
            {
                if(_OTAUID!=value){
                    _OTAUID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OTAUID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OTAUName;
        public string OTAUName
        {
            get { return _OTAUName; }
            set
            {
                if(_OTAUName!=value){
                    _OTAUName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OTAUName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _UID;
        public Guid UID
        {
            get { return _UID; }
            set
            {
                if(_UID!=value){
                    _UID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UName;
        public string UName
        {
            get { return _UName; }
            set
            {
                if(_UName!=value){
                    _UName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _OrgID;
        public Guid OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<OTA_UserInfo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Res_Hotel table in the DRP Database.
    /// </summary>
    public partial class Res_Hotel: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Res_Hotel> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Res_Hotel>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Res_Hotel> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Res_Hotel item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Res_Hotel item=new Res_Hotel();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Res_Hotel> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Res_Hotel(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Res_Hotel.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Hotel>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Res_Hotel(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Res_Hotel(Expression<Func<Res_Hotel, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Res_Hotel> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Res_Hotel> _repo;
            
            if(db.TestMode){
                Res_Hotel.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Hotel>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Res_Hotel> GetRepo(){
            return GetRepo("","");
        }
        
        public static Res_Hotel SingleOrDefault(Expression<Func<Res_Hotel, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Res_Hotel single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Res_Hotel SingleOrDefault(Expression<Func<Res_Hotel, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Res_Hotel single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Res_Hotel, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Res_Hotel, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Res_Hotel> Find(Expression<Func<Res_Hotel, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Res_Hotel> Find(Expression<Func<Res_Hotel, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Res_Hotel> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Res_Hotel> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Res_Hotel> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Res_Hotel> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Res_Hotel> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Res_Hotel> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Res_Hotel)){
                Res_Hotel compare=(Res_Hotel)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Spell;
        public string Spell
        {
            get { return _Spell; }
            set
            {
                if(_Spell!=value){
                    _Spell=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Spell");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StarLv;
        public string StarLv
        {
            get { return _StarLv; }
            set
            {
                if(_StarLv!=value){
                    _StarLv=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StarLv");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Contact;
        public string Contact
        {
            get { return _Contact; }
            set
            {
                if(_Contact!=value){
                    _Contact=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Contact");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Fax;
        public string Fax
        {
            get { return _Fax; }
            set
            {
                if(_Fax!=value){
                    _Fax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Fax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mail;
        public string Mail
        {
            get { return _Mail; }
            set
            {
                if(_Mail!=value){
                    _Mail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QQ;
        public string QQ
        {
            get { return _QQ; }
            set
            {
                if(_QQ!=value){
                    _QQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Addr;
        public string Addr
        {
            get { return _Addr; }
            set
            {
                if(_Addr!=value){
                    _Addr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Addr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsEnable;
        public bool IsEnable
        {
            get { return _IsEnable; }
            set
            {
                if(_IsEnable!=value){
                    _IsEnable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEnable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Price;
        public string Price
        {
            get { return _Price; }
            set
            {
                if(_Price!=value){
                    _Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteType;
        public string RouteType
        {
            get { return _RouteType; }
            set
            {
                if(_RouteType!=value){
                    _RouteType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteTypeID;
        public string RouteTypeID
        {
            get { return _RouteTypeID; }
            set
            {
                if(_RouteTypeID!=value){
                    _RouteTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Destination;
        public string Destination
        {
            get { return _Destination; }
            set
            {
                if(_Destination!=value){
                    _Destination=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Destination");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationPath;
        public string DestinationPath
        {
            get { return _DestinationPath; }
            set
            {
                if(_DestinationPath!=value){
                    _DestinationPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationID;
        public string DestinationID
        {
            get { return _DestinationID; }
            set
            {
                if(_DestinationID!=value){
                    _DestinationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeNum;
        public int TradeNum
        {
            get { return _TradeNum; }
            set
            {
                if(_TradeNum!=value){
                    _TradeNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _TradeAmt;
        public decimal TradeAmt
        {
            get { return _TradeAmt; }
            set
            {
                if(_TradeAmt!=value){
                    _TradeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeAdultNum;
        public int TradeAdultNum
        {
            get { return _TradeAdultNum; }
            set
            {
                if(_TradeAdultNum!=value){
                    _TradeAdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeChildNum;
        public int TradeChildNum
        {
            get { return _TradeChildNum; }
            set
            {
                if(_TradeChildNum!=value){
                    _TradeChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Res_Hotel, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sms_Platform table in the DRP Database.
    /// </summary>
    public partial class Sms_Platform: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sms_Platform> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sms_Platform>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sms_Platform> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sms_Platform item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sms_Platform item=new Sms_Platform();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sms_Platform> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sms_Platform(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sms_Platform.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sms_Platform>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sms_Platform(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sms_Platform(Expression<Func<Sms_Platform, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sms_Platform> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sms_Platform> _repo;
            
            if(db.TestMode){
                Sms_Platform.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sms_Platform>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sms_Platform> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sms_Platform SingleOrDefault(Expression<Func<Sms_Platform, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sms_Platform single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sms_Platform SingleOrDefault(Expression<Func<Sms_Platform, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sms_Platform single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sms_Platform, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sms_Platform, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sms_Platform> Find(Expression<Func<Sms_Platform, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sms_Platform> Find(Expression<Func<Sms_Platform, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sms_Platform> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sms_Platform> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sms_Platform> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sms_Platform> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sms_Platform> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sms_Platform> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sms_Platform)){
                Sms_Platform compare=(Sms_Platform)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SmsCount;
        public int SmsCount
        {
            get { return _SmsCount; }
            set
            {
                if(_SmsCount!=value){
                    _SmsCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SmsCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _UnitPrice;
        public decimal UnitPrice
        {
            get { return _UnitPrice; }
            set
            {
                if(_UnitPrice!=value){
                    _UnitPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UnitPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Amount;
        public int Amount
        {
            get { return _Amount; }
            set
            {
                if(_Amount!=value){
                    _Amount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Amount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sms_Platform, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sms_ValidateCode table in the DRP Database.
    /// </summary>
    public partial class Sms_ValidateCode: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sms_ValidateCode> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sms_ValidateCode>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sms_ValidateCode> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sms_ValidateCode item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sms_ValidateCode item=new Sms_ValidateCode();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sms_ValidateCode> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sms_ValidateCode(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sms_ValidateCode.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sms_ValidateCode>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sms_ValidateCode(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sms_ValidateCode(Expression<Func<Sms_ValidateCode, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sms_ValidateCode> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sms_ValidateCode> _repo;
            
            if(db.TestMode){
                Sms_ValidateCode.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sms_ValidateCode>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sms_ValidateCode> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sms_ValidateCode SingleOrDefault(Expression<Func<Sms_ValidateCode, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sms_ValidateCode single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sms_ValidateCode SingleOrDefault(Expression<Func<Sms_ValidateCode, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sms_ValidateCode single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sms_ValidateCode, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sms_ValidateCode, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sms_ValidateCode> Find(Expression<Func<Sms_ValidateCode, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sms_ValidateCode> Find(Expression<Func<Sms_ValidateCode, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sms_ValidateCode> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sms_ValidateCode> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sms_ValidateCode> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sms_ValidateCode> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sms_ValidateCode> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sms_ValidateCode> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sms_ValidateCode)){
                Sms_ValidateCode compare=(Sms_ValidateCode)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Code;
        public string Code
        {
            get { return _Code; }
            set
            {
                if(_Code!=value){
                    _Code=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Code");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sms_ValidateCode, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Glo_UpdateLog table in the DRP Database.
    /// </summary>
    public partial class Glo_UpdateLog: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Glo_UpdateLog> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Glo_UpdateLog>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Glo_UpdateLog> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Glo_UpdateLog item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Glo_UpdateLog item=new Glo_UpdateLog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Glo_UpdateLog> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Glo_UpdateLog(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Glo_UpdateLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_UpdateLog>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Glo_UpdateLog(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Glo_UpdateLog(Expression<Func<Glo_UpdateLog, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Glo_UpdateLog> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Glo_UpdateLog> _repo;
            
            if(db.TestMode){
                Glo_UpdateLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_UpdateLog>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Glo_UpdateLog> GetRepo(){
            return GetRepo("","");
        }
        
        public static Glo_UpdateLog SingleOrDefault(Expression<Func<Glo_UpdateLog, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Glo_UpdateLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Glo_UpdateLog SingleOrDefault(Expression<Func<Glo_UpdateLog, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Glo_UpdateLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Glo_UpdateLog, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Glo_UpdateLog, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Glo_UpdateLog> Find(Expression<Func<Glo_UpdateLog, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Glo_UpdateLog> Find(Expression<Func<Glo_UpdateLog, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Glo_UpdateLog> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Glo_UpdateLog> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Glo_UpdateLog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Glo_UpdateLog> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Glo_UpdateLog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Glo_UpdateLog> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Glo_UpdateLog)){
                Glo_UpdateLog compare=(Glo_UpdateLog)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Summary;
        public string Summary
        {
            get { return _Summary; }
            set
            {
                if(_Summary!=value){
                    _Summary=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Summary");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _xType;
        public string xType
        {
            get { return _xType; }
            set
            {
                if(_xType!=value){
                    _xType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="xType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Glo_UpdateLog, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Res_Motorcade table in the DRP Database.
    /// </summary>
    public partial class Res_Motorcade: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Res_Motorcade> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Res_Motorcade>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Res_Motorcade> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Res_Motorcade item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Res_Motorcade item=new Res_Motorcade();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Res_Motorcade> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Res_Motorcade(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Res_Motorcade.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Motorcade>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Res_Motorcade(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Res_Motorcade(Expression<Func<Res_Motorcade, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Res_Motorcade> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Res_Motorcade> _repo;
            
            if(db.TestMode){
                Res_Motorcade.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Motorcade>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Res_Motorcade> GetRepo(){
            return GetRepo("","");
        }
        
        public static Res_Motorcade SingleOrDefault(Expression<Func<Res_Motorcade, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Res_Motorcade single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Res_Motorcade SingleOrDefault(Expression<Func<Res_Motorcade, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Res_Motorcade single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Res_Motorcade, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Res_Motorcade, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Res_Motorcade> Find(Expression<Func<Res_Motorcade, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Res_Motorcade> Find(Expression<Func<Res_Motorcade, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Res_Motorcade> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Res_Motorcade> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Res_Motorcade> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Res_Motorcade> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Res_Motorcade> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Res_Motorcade> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Res_Motorcade)){
                Res_Motorcade compare=(Res_Motorcade)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Spell;
        public string Spell
        {
            get { return _Spell; }
            set
            {
                if(_Spell!=value){
                    _Spell=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Spell");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Scale;
        public string Scale
        {
            get { return _Scale; }
            set
            {
                if(_Scale!=value){
                    _Scale=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Scale");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Contact;
        public string Contact
        {
            get { return _Contact; }
            set
            {
                if(_Contact!=value){
                    _Contact=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Contact");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Fax;
        public string Fax
        {
            get { return _Fax; }
            set
            {
                if(_Fax!=value){
                    _Fax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Fax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mail;
        public string Mail
        {
            get { return _Mail; }
            set
            {
                if(_Mail!=value){
                    _Mail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QQ;
        public string QQ
        {
            get { return _QQ; }
            set
            {
                if(_QQ!=value){
                    _QQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Addr;
        public string Addr
        {
            get { return _Addr; }
            set
            {
                if(_Addr!=value){
                    _Addr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Addr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsEnable;
        public bool IsEnable
        {
            get { return _IsEnable; }
            set
            {
                if(_IsEnable!=value){
                    _IsEnable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEnable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Departure;
        public string Departure
        {
            get { return _Departure; }
            set
            {
                if(_Departure!=value){
                    _Departure=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Departure");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DepartureID;
        public string DepartureID
        {
            get { return _DepartureID; }
            set
            {
                if(_DepartureID!=value){
                    _DepartureID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartureID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeNum;
        public int TradeNum
        {
            get { return _TradeNum; }
            set
            {
                if(_TradeNum!=value){
                    _TradeNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _TradeAmt;
        public decimal TradeAmt
        {
            get { return _TradeAmt; }
            set
            {
                if(_TradeAmt!=value){
                    _TradeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeAdultNum;
        public int TradeAdultNum
        {
            get { return _TradeAdultNum; }
            set
            {
                if(_TradeAdultNum!=value){
                    _TradeAdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeChildNum;
        public int TradeChildNum
        {
            get { return _TradeChildNum; }
            set
            {
                if(_TradeChildNum!=value){
                    _TradeChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Res_Motorcade, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sn_Complain table in the DRP Database.
    /// </summary>
    public partial class Sn_Complain: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sn_Complain> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sn_Complain>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sn_Complain> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sn_Complain item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sn_Complain item=new Sn_Complain();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sn_Complain> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sn_Complain(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sn_Complain.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_Complain>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sn_Complain(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sn_Complain(Expression<Func<Sn_Complain, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sn_Complain> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sn_Complain> _repo;
            
            if(db.TestMode){
                Sn_Complain.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_Complain>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sn_Complain> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sn_Complain SingleOrDefault(Expression<Func<Sn_Complain, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sn_Complain single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sn_Complain SingleOrDefault(Expression<Func<Sn_Complain, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sn_Complain single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sn_Complain, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sn_Complain, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sn_Complain> Find(Expression<Func<Sn_Complain, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sn_Complain> Find(Expression<Func<Sn_Complain, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sn_Complain> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sn_Complain> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sn_Complain> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sn_Complain> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sn_Complain> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sn_Complain> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sn_Complain)){
                Sn_Complain compare=(Sn_Complain)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _xType;
        public string xType
        {
            get { return _xType; }
            set
            {
                if(_xType!=value){
                    _xType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="xType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _nContent;
        public string nContent
        {
            get { return _nContent; }
            set
            {
                if(_nContent!=value){
                    _nContent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="nContent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DataStatus;
        public int? DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sn_Complain, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Res_Insurance table in the DRP Database.
    /// </summary>
    public partial class Res_Insurance: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Res_Insurance> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Res_Insurance>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Res_Insurance> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Res_Insurance item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Res_Insurance item=new Res_Insurance();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Res_Insurance> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Res_Insurance(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Res_Insurance.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Insurance>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Res_Insurance(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Res_Insurance(Expression<Func<Res_Insurance, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Res_Insurance> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Res_Insurance> _repo;
            
            if(db.TestMode){
                Res_Insurance.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Insurance>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Res_Insurance> GetRepo(){
            return GetRepo("","");
        }
        
        public static Res_Insurance SingleOrDefault(Expression<Func<Res_Insurance, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Res_Insurance single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Res_Insurance SingleOrDefault(Expression<Func<Res_Insurance, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Res_Insurance single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Res_Insurance, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Res_Insurance, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Res_Insurance> Find(Expression<Func<Res_Insurance, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Res_Insurance> Find(Expression<Func<Res_Insurance, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Res_Insurance> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Res_Insurance> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Res_Insurance> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Res_Insurance> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Res_Insurance> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Res_Insurance> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Res_Insurance)){
                Res_Insurance compare=(Res_Insurance)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Spell;
        public string Spell
        {
            get { return _Spell; }
            set
            {
                if(_Spell!=value){
                    _Spell=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Spell");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Contact;
        public string Contact
        {
            get { return _Contact; }
            set
            {
                if(_Contact!=value){
                    _Contact=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Contact");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mail;
        public string Mail
        {
            get { return _Mail; }
            set
            {
                if(_Mail!=value){
                    _Mail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsEnable;
        public bool IsEnable
        {
            get { return _IsEnable; }
            set
            {
                if(_IsEnable!=value){
                    _IsEnable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEnable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Addr;
        public string Addr
        {
            get { return _Addr; }
            set
            {
                if(_Addr!=value){
                    _Addr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Addr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeNum;
        public int TradeNum
        {
            get { return _TradeNum; }
            set
            {
                if(_TradeNum!=value){
                    _TradeNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _TradeAmt;
        public decimal TradeAmt
        {
            get { return _TradeAmt; }
            set
            {
                if(_TradeAmt!=value){
                    _TradeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeAdultNum;
        public int TradeAdultNum
        {
            get { return _TradeAdultNum; }
            set
            {
                if(_TradeAdultNum!=value){
                    _TradeAdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeChildNum;
        public int TradeChildNum
        {
            get { return _TradeChildNum; }
            set
            {
                if(_TradeChildNum!=value){
                    _TradeChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Res_Insurance, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sn_ComplainResult table in the DRP Database.
    /// </summary>
    public partial class Sn_ComplainResult: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sn_ComplainResult> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sn_ComplainResult>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sn_ComplainResult> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sn_ComplainResult item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sn_ComplainResult item=new Sn_ComplainResult();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sn_ComplainResult> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sn_ComplainResult(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sn_ComplainResult.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_ComplainResult>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sn_ComplainResult(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sn_ComplainResult(Expression<Func<Sn_ComplainResult, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sn_ComplainResult> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sn_ComplainResult> _repo;
            
            if(db.TestMode){
                Sn_ComplainResult.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_ComplainResult>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sn_ComplainResult> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sn_ComplainResult SingleOrDefault(Expression<Func<Sn_ComplainResult, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sn_ComplainResult single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sn_ComplainResult SingleOrDefault(Expression<Func<Sn_ComplainResult, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sn_ComplainResult single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sn_ComplainResult, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sn_ComplainResult, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sn_ComplainResult> Find(Expression<Func<Sn_ComplainResult, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sn_ComplainResult> Find(Expression<Func<Sn_ComplainResult, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sn_ComplainResult> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sn_ComplainResult> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sn_ComplainResult> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sn_ComplainResult> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sn_ComplainResult> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sn_ComplainResult> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sn_ComplainResult)){
                Sn_ComplainResult compare=(Sn_ComplainResult)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ComplainID;
        public string ComplainID
        {
            get { return _ComplainID; }
            set
            {
                if(_ComplainID!=value){
                    _ComplainID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ComplainID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Summary;
        public string Summary
        {
            get { return _Summary; }
            set
            {
                if(_Summary!=value){
                    _Summary=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Summary");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sn_ComplainResult, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderExtend table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderExtend: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderExtend> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderExtend>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderExtend> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderExtend item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderExtend item=new Ord_OrderExtend();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderExtend> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderExtend(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderExtend.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderExtend>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderExtend(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderExtend(Expression<Func<Ord_OrderExtend, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderExtend> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderExtend> _repo;
            
            if(db.TestMode){
                Ord_OrderExtend.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderExtend>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderExtend> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderExtend SingleOrDefault(Expression<Func<Ord_OrderExtend, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderExtend single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderExtend SingleOrDefault(Expression<Func<Ord_OrderExtend, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderExtend single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderExtend, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderExtend, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderExtend> Find(Expression<Func<Ord_OrderExtend, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderExtend> Find(Expression<Func<Ord_OrderExtend, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderExtend> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderExtend> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderExtend> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderExtend> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderExtend> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderExtend> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderExtend)){
                Ord_OrderExtend compare=(Ord_OrderExtend)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AdultNum;
        public int AdultNum
        {
            get { return _AdultNum; }
            set
            {
                if(_AdultNum!=value){
                    _AdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ChildNum;
        public int ChildNum
        {
            get { return _ChildNum; }
            set
            {
                if(_ChildNum!=value){
                    _ChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderAmt;
        public decimal OrderAmt
        {
            get { return _OrderAmt; }
            set
            {
                if(_OrderAmt!=value){
                    _OrderAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderCost;
        public decimal OrderCost
        {
            get { return _OrderCost; }
            set
            {
                if(_OrderCost!=value){
                    _OrderCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderProfit;
        public decimal OrderProfit
        {
            get { return _OrderProfit; }
            set
            {
                if(_OrderProfit!=value){
                    _OrderProfit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderProfit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _ProfitRate;
        public decimal ProfitRate
        {
            get { return _ProfitRate; }
            set
            {
                if(_ProfitRate!=value){
                    _ProfitRate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProfitRate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _DrawMoneyAmt;
        public decimal DrawMoneyAmt
        {
            get { return _DrawMoneyAmt; }
            set
            {
                if(_DrawMoneyAmt!=value){
                    _DrawMoneyAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DrawMoneyAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PaidAmt;
        public decimal PaidAmt
        {
            get { return _PaidAmt; }
            set
            {
                if(_PaidAmt!=value){
                    _PaidAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaidAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderInvoiceAmt;
        public decimal OrderInvoiceAmt
        {
            get { return _OrderInvoiceAmt; }
            set
            {
                if(_OrderInvoiceAmt!=value){
                    _OrderInvoiceAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderInvoiceAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _CostInvoiceAmt;
        public decimal CostInvoiceAmt
        {
            get { return _CostInvoiceAmt; }
            set
            {
                if(_CostInvoiceAmt!=value){
                    _CostInvoiceAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CostInvoiceAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderStatus;
        public int OrderStatus
        {
            get { return _OrderStatus; }
            set
            {
                if(_OrderStatus!=value){
                    _OrderStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BudgetStatus;
        public int BudgetStatus
        {
            get { return _BudgetStatus; }
            set
            {
                if(_BudgetStatus!=value){
                    _BudgetStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BudgetStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _IsCloseCollected;
        public int IsCloseCollected
        {
            get { return _IsCloseCollected; }
            set
            {
                if(_IsCloseCollected!=value){
                    _IsCloseCollected=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsCloseCollected");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsCheckAccount;
        public bool IsCheckAccount
        {
            get { return _IsCheckAccount; }
            set
            {
                if(_IsCheckAccount!=value){
                    _IsCheckAccount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsCheckAccount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderExtend, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Glo_Departure table in the DRP Database.
    /// </summary>
    public partial class Glo_Departure: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Glo_Departure> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Glo_Departure>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Glo_Departure> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Glo_Departure item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Glo_Departure item=new Glo_Departure();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Glo_Departure> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Glo_Departure(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Glo_Departure.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_Departure>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Glo_Departure(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Glo_Departure(Expression<Func<Glo_Departure, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Glo_Departure> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Glo_Departure> _repo;
            
            if(db.TestMode){
                Glo_Departure.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_Departure>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Glo_Departure> GetRepo(){
            return GetRepo("","");
        }
        
        public static Glo_Departure SingleOrDefault(Expression<Func<Glo_Departure, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Glo_Departure single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Glo_Departure SingleOrDefault(Expression<Func<Glo_Departure, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Glo_Departure single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Glo_Departure, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Glo_Departure, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Glo_Departure> Find(Expression<Func<Glo_Departure, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Glo_Departure> Find(Expression<Func<Glo_Departure, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Glo_Departure> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Glo_Departure> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Glo_Departure> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Glo_Departure> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Glo_Departure> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Glo_Departure> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Glo_Departure)){
                Glo_Departure compare=(Glo_Departure)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Glo_Departure, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Res_Shopping table in the DRP Database.
    /// </summary>
    public partial class Res_Shopping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Res_Shopping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Res_Shopping>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Res_Shopping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Res_Shopping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Res_Shopping item=new Res_Shopping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Res_Shopping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Res_Shopping(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Res_Shopping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Shopping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Res_Shopping(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Res_Shopping(Expression<Func<Res_Shopping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Res_Shopping> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Res_Shopping> _repo;
            
            if(db.TestMode){
                Res_Shopping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_Shopping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Res_Shopping> GetRepo(){
            return GetRepo("","");
        }
        
        public static Res_Shopping SingleOrDefault(Expression<Func<Res_Shopping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Res_Shopping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Res_Shopping SingleOrDefault(Expression<Func<Res_Shopping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Res_Shopping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Res_Shopping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Res_Shopping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Res_Shopping> Find(Expression<Func<Res_Shopping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Res_Shopping> Find(Expression<Func<Res_Shopping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Res_Shopping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Res_Shopping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Res_Shopping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Res_Shopping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Res_Shopping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Res_Shopping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Res_Shopping)){
                Res_Shopping compare=(Res_Shopping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Spell;
        public string Spell
        {
            get { return _Spell; }
            set
            {
                if(_Spell!=value){
                    _Spell=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Spell");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Contact;
        public string Contact
        {
            get { return _Contact; }
            set
            {
                if(_Contact!=value){
                    _Contact=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Contact");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mail;
        public string Mail
        {
            get { return _Mail; }
            set
            {
                if(_Mail!=value){
                    _Mail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsEnable;
        public bool IsEnable
        {
            get { return _IsEnable; }
            set
            {
                if(_IsEnable!=value){
                    _IsEnable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEnable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Addr;
        public string Addr
        {
            get { return _Addr; }
            set
            {
                if(_Addr!=value){
                    _Addr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Addr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteType;
        public string RouteType
        {
            get { return _RouteType; }
            set
            {
                if(_RouteType!=value){
                    _RouteType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteTypeID;
        public string RouteTypeID
        {
            get { return _RouteTypeID; }
            set
            {
                if(_RouteTypeID!=value){
                    _RouteTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Destination;
        public string Destination
        {
            get { return _Destination; }
            set
            {
                if(_Destination!=value){
                    _Destination=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Destination");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationPath;
        public string DestinationPath
        {
            get { return _DestinationPath; }
            set
            {
                if(_DestinationPath!=value){
                    _DestinationPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationID;
        public string DestinationID
        {
            get { return _DestinationID; }
            set
            {
                if(_DestinationID!=value){
                    _DestinationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeNum;
        public int TradeNum
        {
            get { return _TradeNum; }
            set
            {
                if(_TradeNum!=value){
                    _TradeNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _TradeAmt;
        public decimal TradeAmt
        {
            get { return _TradeAmt; }
            set
            {
                if(_TradeAmt!=value){
                    _TradeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeAdultNum;
        public int TradeAdultNum
        {
            get { return _TradeAdultNum; }
            set
            {
                if(_TradeAdultNum!=value){
                    _TradeAdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeChildNum;
        public int TradeChildNum
        {
            get { return _TradeChildNum; }
            set
            {
                if(_TradeChildNum!=value){
                    _TradeChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Res_Shopping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sn_NoteInfo table in the DRP Database.
    /// </summary>
    public partial class Sn_NoteInfo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sn_NoteInfo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sn_NoteInfo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sn_NoteInfo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sn_NoteInfo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sn_NoteInfo item=new Sn_NoteInfo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sn_NoteInfo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sn_NoteInfo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sn_NoteInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_NoteInfo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sn_NoteInfo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sn_NoteInfo(Expression<Func<Sn_NoteInfo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sn_NoteInfo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sn_NoteInfo> _repo;
            
            if(db.TestMode){
                Sn_NoteInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_NoteInfo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sn_NoteInfo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sn_NoteInfo SingleOrDefault(Expression<Func<Sn_NoteInfo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sn_NoteInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sn_NoteInfo SingleOrDefault(Expression<Func<Sn_NoteInfo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sn_NoteInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sn_NoteInfo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sn_NoteInfo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sn_NoteInfo> Find(Expression<Func<Sn_NoteInfo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sn_NoteInfo> Find(Expression<Func<Sn_NoteInfo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sn_NoteInfo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sn_NoteInfo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sn_NoteInfo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sn_NoteInfo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sn_NoteInfo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sn_NoteInfo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sn_NoteInfo)){
                Sn_NoteInfo compare=(Sn_NoteInfo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Subject;
        public string Subject
        {
            get { return _Subject; }
            set
            {
                if(_Subject!=value){
                    _Subject=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Subject");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _nContent;
        public string nContent
        {
            get { return _nContent; }
            set
            {
                if(_nContent!=value){
                    _nContent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="nContent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sn_NoteInfo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Crm_VisitTrace table in the DRP Database.
    /// </summary>
    public partial class Crm_VisitTrace: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Crm_VisitTrace> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Crm_VisitTrace>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Crm_VisitTrace> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Crm_VisitTrace item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Crm_VisitTrace item=new Crm_VisitTrace();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Crm_VisitTrace> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Crm_VisitTrace(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Crm_VisitTrace.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Crm_VisitTrace>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Crm_VisitTrace(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Crm_VisitTrace(Expression<Func<Crm_VisitTrace, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Crm_VisitTrace> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Crm_VisitTrace> _repo;
            
            if(db.TestMode){
                Crm_VisitTrace.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Crm_VisitTrace>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Crm_VisitTrace> GetRepo(){
            return GetRepo("","");
        }
        
        public static Crm_VisitTrace SingleOrDefault(Expression<Func<Crm_VisitTrace, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Crm_VisitTrace single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Crm_VisitTrace SingleOrDefault(Expression<Func<Crm_VisitTrace, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Crm_VisitTrace single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Crm_VisitTrace, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Crm_VisitTrace, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Crm_VisitTrace> Find(Expression<Func<Crm_VisitTrace, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Crm_VisitTrace> Find(Expression<Func<Crm_VisitTrace, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Crm_VisitTrace> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Crm_VisitTrace> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Crm_VisitTrace> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Crm_VisitTrace> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Crm_VisitTrace> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Crm_VisitTrace> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Crm_VisitTrace)){
                Crm_VisitTrace compare=(Crm_VisitTrace)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomerID;
        public string CustomerID
        {
            get { return _CustomerID; }
            set
            {
                if(_CustomerID!=value){
                    _CustomerID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ItemName;
        public string ItemName
        {
            get { return _ItemName; }
            set
            {
                if(_ItemName!=value){
                    _ItemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ItemType;
        public string ItemType
        {
            get { return _ItemType; }
            set
            {
                if(_ItemType!=value){
                    _ItemType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Contact;
        public string Contact
        {
            get { return _Contact; }
            set
            {
                if(_Contact!=value){
                    _Contact=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Contact");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _TradeDate;
        public DateTime? TradeDate
        {
            get { return _TradeDate; }
            set
            {
                if(_TradeDate!=value){
                    _TradeDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Crm_VisitTrace, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sn_Recommend table in the DRP Database.
    /// </summary>
    public partial class Sn_Recommend: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sn_Recommend> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sn_Recommend>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sn_Recommend> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sn_Recommend item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sn_Recommend item=new Sn_Recommend();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sn_Recommend> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sn_Recommend(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sn_Recommend.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_Recommend>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sn_Recommend(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sn_Recommend(Expression<Func<Sn_Recommend, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sn_Recommend> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sn_Recommend> _repo;
            
            if(db.TestMode){
                Sn_Recommend.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_Recommend>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sn_Recommend> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sn_Recommend SingleOrDefault(Expression<Func<Sn_Recommend, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sn_Recommend single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sn_Recommend SingleOrDefault(Expression<Func<Sn_Recommend, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sn_Recommend single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sn_Recommend, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sn_Recommend, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sn_Recommend> Find(Expression<Func<Sn_Recommend, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sn_Recommend> Find(Expression<Func<Sn_Recommend, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sn_Recommend> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sn_Recommend> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sn_Recommend> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sn_Recommend> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sn_Recommend> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sn_Recommend> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sn_Recommend)){
                Sn_Recommend compare=(Sn_Recommend)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _nContent;
        public string nContent
        {
            get { return _nContent; }
            set
            {
                if(_nContent!=value){
                    _nContent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="nContent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sn_Recommend, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Glo_Files table in the DRP Database.
    /// </summary>
    public partial class Glo_File: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Glo_File> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Glo_File>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Glo_File> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Glo_File item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Glo_File item=new Glo_File();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Glo_File> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Glo_File(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Glo_File.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_File>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Glo_File(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Glo_File(Expression<Func<Glo_File, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Glo_File> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Glo_File> _repo;
            
            if(db.TestMode){
                Glo_File.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_File>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Glo_File> GetRepo(){
            return GetRepo("","");
        }
        
        public static Glo_File SingleOrDefault(Expression<Func<Glo_File, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Glo_File single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Glo_File SingleOrDefault(Expression<Func<Glo_File, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Glo_File single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Glo_File, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Glo_File, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Glo_File> Find(Expression<Func<Glo_File, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Glo_File> Find(Expression<Func<Glo_File, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Glo_File> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Glo_File> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Glo_File> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Glo_File> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Glo_File> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Glo_File> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Glo_File)){
                Glo_File compare=(Glo_File)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FileName;
        public string FileName
        {
            get { return _FileName; }
            set
            {
                if(_FileName!=value){
                    _FileName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FileName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FileSize;
        public string FileSize
        {
            get { return _FileSize; }
            set
            {
                if(_FileSize!=value){
                    _FileSize=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FileSize");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FilePath;
        public string FilePath
        {
            get { return _FilePath; }
            set
            {
                if(_FilePath!=value){
                    _FilePath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FilePath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FileType;
        public string FileType
        {
            get { return _FileType; }
            set
            {
                if(_FileType!=value){
                    _FileType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FileType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Glo_File, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Res_ScenicTicket table in the DRP Database.
    /// </summary>
    public partial class Res_ScenicTicket: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Res_ScenicTicket> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Res_ScenicTicket>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Res_ScenicTicket> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Res_ScenicTicket item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Res_ScenicTicket item=new Res_ScenicTicket();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Res_ScenicTicket> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Res_ScenicTicket(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Res_ScenicTicket.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_ScenicTicket>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Res_ScenicTicket(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Res_ScenicTicket(Expression<Func<Res_ScenicTicket, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Res_ScenicTicket> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Res_ScenicTicket> _repo;
            
            if(db.TestMode){
                Res_ScenicTicket.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_ScenicTicket>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Res_ScenicTicket> GetRepo(){
            return GetRepo("","");
        }
        
        public static Res_ScenicTicket SingleOrDefault(Expression<Func<Res_ScenicTicket, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Res_ScenicTicket single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Res_ScenicTicket SingleOrDefault(Expression<Func<Res_ScenicTicket, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Res_ScenicTicket single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Res_ScenicTicket, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Res_ScenicTicket, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Res_ScenicTicket> Find(Expression<Func<Res_ScenicTicket, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Res_ScenicTicket> Find(Expression<Func<Res_ScenicTicket, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Res_ScenicTicket> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Res_ScenicTicket> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Res_ScenicTicket> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Res_ScenicTicket> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Res_ScenicTicket> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Res_ScenicTicket> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Res_ScenicTicket)){
                Res_ScenicTicket compare=(Res_ScenicTicket)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Spell;
        public string Spell
        {
            get { return _Spell; }
            set
            {
                if(_Spell!=value){
                    _Spell=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Spell");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Contact;
        public string Contact
        {
            get { return _Contact; }
            set
            {
                if(_Contact!=value){
                    _Contact=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Contact");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Fax;
        public string Fax
        {
            get { return _Fax; }
            set
            {
                if(_Fax!=value){
                    _Fax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Fax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mail;
        public string Mail
        {
            get { return _Mail; }
            set
            {
                if(_Mail!=value){
                    _Mail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QQ;
        public string QQ
        {
            get { return _QQ; }
            set
            {
                if(_QQ!=value){
                    _QQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Addr;
        public string Addr
        {
            get { return _Addr; }
            set
            {
                if(_Addr!=value){
                    _Addr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Addr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsEnable;
        public bool IsEnable
        {
            get { return _IsEnable; }
            set
            {
                if(_IsEnable!=value){
                    _IsEnable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEnable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NormalPrice;
        public string NormalPrice
        {
            get { return _NormalPrice; }
            set
            {
                if(_NormalPrice!=value){
                    _NormalPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NormalPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CooperatePrice;
        public string CooperatePrice
        {
            get { return _CooperatePrice; }
            set
            {
                if(_CooperatePrice!=value){
                    _CooperatePrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CooperatePrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TeamPrice;
        public string TeamPrice
        {
            get { return _TeamPrice; }
            set
            {
                if(_TeamPrice!=value){
                    _TeamPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TeamPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteType;
        public string RouteType
        {
            get { return _RouteType; }
            set
            {
                if(_RouteType!=value){
                    _RouteType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteTypeID;
        public string RouteTypeID
        {
            get { return _RouteTypeID; }
            set
            {
                if(_RouteTypeID!=value){
                    _RouteTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Destination;
        public string Destination
        {
            get { return _Destination; }
            set
            {
                if(_Destination!=value){
                    _Destination=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Destination");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationPath;
        public string DestinationPath
        {
            get { return _DestinationPath; }
            set
            {
                if(_DestinationPath!=value){
                    _DestinationPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationID;
        public string DestinationID
        {
            get { return _DestinationID; }
            set
            {
                if(_DestinationID!=value){
                    _DestinationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeNum;
        public int TradeNum
        {
            get { return _TradeNum; }
            set
            {
                if(_TradeNum!=value){
                    _TradeNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _TradeAmt;
        public decimal TradeAmt
        {
            get { return _TradeAmt; }
            set
            {
                if(_TradeAmt!=value){
                    _TradeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeAdultNum;
        public int TradeAdultNum
        {
            get { return _TradeAdultNum; }
            set
            {
                if(_TradeAdultNum!=value){
                    _TradeAdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeChildNum;
        public int TradeChildNum
        {
            get { return _TradeChildNum; }
            set
            {
                if(_TradeChildNum!=value){
                    _TradeChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Res_ScenicTicket, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sn_TravelInfo table in the DRP Database.
    /// </summary>
    public partial class Sn_TravelInfo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sn_TravelInfo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sn_TravelInfo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sn_TravelInfo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sn_TravelInfo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sn_TravelInfo item=new Sn_TravelInfo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sn_TravelInfo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sn_TravelInfo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sn_TravelInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_TravelInfo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sn_TravelInfo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sn_TravelInfo(Expression<Func<Sn_TravelInfo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sn_TravelInfo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sn_TravelInfo> _repo;
            
            if(db.TestMode){
                Sn_TravelInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_TravelInfo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sn_TravelInfo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sn_TravelInfo SingleOrDefault(Expression<Func<Sn_TravelInfo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sn_TravelInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sn_TravelInfo SingleOrDefault(Expression<Func<Sn_TravelInfo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sn_TravelInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sn_TravelInfo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sn_TravelInfo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sn_TravelInfo> Find(Expression<Func<Sn_TravelInfo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sn_TravelInfo> Find(Expression<Func<Sn_TravelInfo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sn_TravelInfo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sn_TravelInfo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sn_TravelInfo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sn_TravelInfo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sn_TravelInfo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sn_TravelInfo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sn_TravelInfo)){
                Sn_TravelInfo compare=(Sn_TravelInfo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Schedule;
        public string Schedule
        {
            get { return _Schedule; }
            set
            {
                if(_Schedule!=value){
                    _Schedule=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Schedule");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GuideName;
        public string GuideName
        {
            get { return _GuideName; }
            set
            {
                if(_GuideName!=value){
                    _GuideName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuideName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GuideMobile;
        public string GuideMobile
        {
            get { return _GuideMobile; }
            set
            {
                if(_GuideMobile!=value){
                    _GuideMobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuideMobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MeetPlace;
        public string MeetPlace
        {
            get { return _MeetPlace; }
            set
            {
                if(_MeetPlace!=value){
                    _MeetPlace=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetPlace");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MeetTime;
        public string MeetTime
        {
            get { return _MeetTime; }
            set
            {
                if(_MeetTime!=value){
                    _MeetTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PlateNumber;
        public string PlateNumber
        {
            get { return _PlateNumber; }
            set
            {
                if(_PlateNumber!=value){
                    _PlateNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PlateNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Driver;
        public string Driver
        {
            get { return _Driver; }
            set
            {
                if(_Driver!=value){
                    _Driver=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Driver");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DriverMobile;
        public string DriverMobile
        {
            get { return _DriverMobile; }
            set
            {
                if(_DriverMobile!=value){
                    _DriverMobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DriverMobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EmergencyUser;
        public string EmergencyUser
        {
            get { return _EmergencyUser; }
            set
            {
                if(_EmergencyUser!=value){
                    _EmergencyUser=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmergencyUser");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EmergencyMobile;
        public string EmergencyMobile
        {
            get { return _EmergencyMobile; }
            set
            {
                if(_EmergencyMobile!=value){
                    _EmergencyMobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmergencyMobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sn_TravelInfo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Res_TicketAgency table in the DRP Database.
    /// </summary>
    public partial class Res_TicketAgency: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Res_TicketAgency> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Res_TicketAgency>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Res_TicketAgency> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Res_TicketAgency item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Res_TicketAgency item=new Res_TicketAgency();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Res_TicketAgency> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Res_TicketAgency(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Res_TicketAgency.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_TicketAgency>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Res_TicketAgency(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Res_TicketAgency(Expression<Func<Res_TicketAgency, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Res_TicketAgency> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Res_TicketAgency> _repo;
            
            if(db.TestMode){
                Res_TicketAgency.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Res_TicketAgency>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Res_TicketAgency> GetRepo(){
            return GetRepo("","");
        }
        
        public static Res_TicketAgency SingleOrDefault(Expression<Func<Res_TicketAgency, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Res_TicketAgency single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Res_TicketAgency SingleOrDefault(Expression<Func<Res_TicketAgency, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Res_TicketAgency single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Res_TicketAgency, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Res_TicketAgency, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Res_TicketAgency> Find(Expression<Func<Res_TicketAgency, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Res_TicketAgency> Find(Expression<Func<Res_TicketAgency, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Res_TicketAgency> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Res_TicketAgency> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Res_TicketAgency> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Res_TicketAgency> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Res_TicketAgency> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Res_TicketAgency> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Res_TicketAgency)){
                Res_TicketAgency compare=(Res_TicketAgency)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Spell;
        public string Spell
        {
            get { return _Spell; }
            set
            {
                if(_Spell!=value){
                    _Spell=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Spell");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TicketType;
        public string TicketType
        {
            get { return _TicketType; }
            set
            {
                if(_TicketType!=value){
                    _TicketType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Contact;
        public string Contact
        {
            get { return _Contact; }
            set
            {
                if(_Contact!=value){
                    _Contact=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Contact");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mail;
        public string Mail
        {
            get { return _Mail; }
            set
            {
                if(_Mail!=value){
                    _Mail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QQ;
        public string QQ
        {
            get { return _QQ; }
            set
            {
                if(_QQ!=value){
                    _QQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsEnable;
        public bool IsEnable
        {
            get { return _IsEnable; }
            set
            {
                if(_IsEnable!=value){
                    _IsEnable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEnable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Addr;
        public string Addr
        {
            get { return _Addr; }
            set
            {
                if(_Addr!=value){
                    _Addr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Addr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeNum;
        public int TradeNum
        {
            get { return _TradeNum; }
            set
            {
                if(_TradeNum!=value){
                    _TradeNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _TradeAmt;
        public decimal TradeAmt
        {
            get { return _TradeAmt; }
            set
            {
                if(_TradeAmt!=value){
                    _TradeAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeAdultNum;
        public int TradeAdultNum
        {
            get { return _TradeAdultNum; }
            set
            {
                if(_TradeAdultNum!=value){
                    _TradeAdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeAdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TradeChildNum;
        public int TradeChildNum
        {
            get { return _TradeChildNum; }
            set
            {
                if(_TradeChildNum!=value){
                    _TradeChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TradeChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Res_TicketAgency, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sn_Shared table in the DRP Database.
    /// </summary>
    public partial class Sn_Shared: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sn_Shared> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sn_Shared>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sn_Shared> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sn_Shared item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sn_Shared item=new Sn_Shared();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sn_Shared> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sn_Shared(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sn_Shared.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_Shared>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sn_Shared(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sn_Shared(Expression<Func<Sn_Shared, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sn_Shared> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sn_Shared> _repo;
            
            if(db.TestMode){
                Sn_Shared.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_Shared>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sn_Shared> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sn_Shared SingleOrDefault(Expression<Func<Sn_Shared, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sn_Shared single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sn_Shared SingleOrDefault(Expression<Func<Sn_Shared, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sn_Shared single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sn_Shared, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sn_Shared, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sn_Shared> Find(Expression<Func<Sn_Shared, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sn_Shared> Find(Expression<Func<Sn_Shared, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sn_Shared> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sn_Shared> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sn_Shared> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sn_Shared> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sn_Shared> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sn_Shared> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sn_Shared)){
                Sn_Shared compare=(Sn_Shared)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserName;
        public string UserName
        {
            get { return _UserName; }
            set
            {
                if(_UserName!=value){
                    _UserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserMobile;
        public string UserMobile
        {
            get { return _UserMobile; }
            set
            {
                if(_UserMobile!=value){
                    _UserMobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserMobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QQ;
        public string QQ
        {
            get { return _QQ; }
            set
            {
                if(_QQ!=value){
                    _QQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Subject;
        public string Subject
        {
            get { return _Subject; }
            set
            {
                if(_Subject!=value){
                    _Subject=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Subject");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _nContent;
        public string nContent
        {
            get { return _nContent; }
            set
            {
                if(_nContent!=value){
                    _nContent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="nContent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sn_Shared, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sn_Order table in the DRP Database.
    /// </summary>
    public partial class Sn_Order: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sn_Order> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sn_Order>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sn_Order> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sn_Order item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sn_Order item=new Sn_Order();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sn_Order> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sn_Order(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sn_Order.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_Order>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sn_Order(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sn_Order(Expression<Func<Sn_Order, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sn_Order> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sn_Order> _repo;
            
            if(db.TestMode){
                Sn_Order.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_Order>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sn_Order> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sn_Order SingleOrDefault(Expression<Func<Sn_Order, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sn_Order single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sn_Order SingleOrDefault(Expression<Func<Sn_Order, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sn_Order single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sn_Order, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sn_Order, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sn_Order> Find(Expression<Func<Sn_Order, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sn_Order> Find(Expression<Func<Sn_Order, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sn_Order> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sn_Order> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sn_Order> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sn_Order> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sn_Order> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sn_Order> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sn_Order)){
                Sn_Order compare=(Sn_Order)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _TourDate;
        public DateTime TourDate
        {
            get { return _TourDate; }
            set
            {
                if(_TourDate!=value){
                    _TourDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteName;
        public string RouteName
        {
            get { return _RouteName; }
            set
            {
                if(_RouteName!=value){
                    _RouteName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _VisitorNum;
        public int? VisitorNum
        {
            get { return _VisitorNum; }
            set
            {
                if(_VisitorNum!=value){
                    _VisitorNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VisitorNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sn_Order, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the User_Setting table in the DRP Database.
    /// </summary>
    public partial class User_Setting: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<User_Setting> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<User_Setting>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<User_Setting> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(User_Setting item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                User_Setting item=new User_Setting();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<User_Setting> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public User_Setting(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                User_Setting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<User_Setting>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public User_Setting(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public User_Setting(Expression<Func<User_Setting, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<User_Setting> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<User_Setting> _repo;
            
            if(db.TestMode){
                User_Setting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<User_Setting>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<User_Setting> GetRepo(){
            return GetRepo("","");
        }
        
        public static User_Setting SingleOrDefault(Expression<Func<User_Setting, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            User_Setting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static User_Setting SingleOrDefault(Expression<Func<User_Setting, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            User_Setting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<User_Setting, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<User_Setting, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<User_Setting> Find(Expression<Func<User_Setting, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<User_Setting> Find(Expression<Func<User_Setting, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<User_Setting> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<User_Setting> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<User_Setting> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<User_Setting> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<User_Setting> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<User_Setting> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(User_Setting)){
                User_Setting compare=(User_Setting)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _xType;
        public int xType
        {
            get { return _xType; }
            set
            {
                if(_xType!=value){
                    _xType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="xType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserID;
        public string UserID
        {
            get { return _UserID; }
            set
            {
                if(_UserID!=value){
                    _UserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<User_Setting, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Crm_Level table in the DRP Database.
    /// </summary>
    public partial class Crm_Level: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Crm_Level> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Crm_Level>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Crm_Level> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Crm_Level item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Crm_Level item=new Crm_Level();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Crm_Level> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Crm_Level(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Crm_Level.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Crm_Level>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Crm_Level(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Crm_Level(Expression<Func<Crm_Level, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Crm_Level> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Crm_Level> _repo;
            
            if(db.TestMode){
                Crm_Level.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Crm_Level>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Crm_Level> GetRepo(){
            return GetRepo("","");
        }
        
        public static Crm_Level SingleOrDefault(Expression<Func<Crm_Level, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Crm_Level single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Crm_Level SingleOrDefault(Expression<Func<Crm_Level, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Crm_Level single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Crm_Level, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Crm_Level, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Crm_Level> Find(Expression<Func<Crm_Level, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Crm_Level> Find(Expression<Func<Crm_Level, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Crm_Level> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Crm_Level> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Crm_Level> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Crm_Level> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Crm_Level> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Crm_Level> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Crm_Level)){
                Crm_Level compare=(Crm_Level)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _MinAmt;
        public int MinAmt
        {
            get { return _MinAmt; }
            set
            {
                if(_MinAmt!=value){
                    _MinAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _MaxAmt;
        public int MaxAmt
        {
            get { return _MaxAmt; }
            set
            {
                if(_MaxAmt!=value){
                    _MaxAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Crm_Level, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderBalanceSettlement table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderBalanceSettlement: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderBalanceSettlement> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderBalanceSettlement>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderBalanceSettlement> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderBalanceSettlement item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderBalanceSettlement item=new Ord_OrderBalanceSettlement();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderBalanceSettlement> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderBalanceSettlement(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderBalanceSettlement.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderBalanceSettlement>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderBalanceSettlement(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderBalanceSettlement(Expression<Func<Ord_OrderBalanceSettlement, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderBalanceSettlement> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderBalanceSettlement> _repo;
            
            if(db.TestMode){
                Ord_OrderBalanceSettlement.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderBalanceSettlement>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderBalanceSettlement> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderBalanceSettlement SingleOrDefault(Expression<Func<Ord_OrderBalanceSettlement, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderBalanceSettlement single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderBalanceSettlement SingleOrDefault(Expression<Func<Ord_OrderBalanceSettlement, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderBalanceSettlement single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderBalanceSettlement, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderBalanceSettlement, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderBalanceSettlement> Find(Expression<Func<Ord_OrderBalanceSettlement, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderBalanceSettlement> Find(Expression<Func<Ord_OrderBalanceSettlement, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderBalanceSettlement> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderBalanceSettlement> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderBalanceSettlement> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderBalanceSettlement> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderBalanceSettlement> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderBalanceSettlement> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderBalanceSettlement)){
                Ord_OrderBalanceSettlement compare=(Ord_OrderBalanceSettlement)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderType;
        public int OrderType
        {
            get { return _OrderType; }
            set
            {
                if(_OrderType!=value){
                    _OrderType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderBalanceID;
        public string OrderBalanceID
        {
            get { return _OrderBalanceID; }
            set
            {
                if(_OrderBalanceID!=value){
                    _OrderBalanceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderBalanceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GuideName;
        public string GuideName
        {
            get { return _GuideName; }
            set
            {
                if(_GuideName!=value){
                    _GuideName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuideName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GuideMobile;
        public string GuideMobile
        {
            get { return _GuideMobile; }
            set
            {
                if(_GuideMobile!=value){
                    _GuideMobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuideMobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BankAcct;
        public string BankAcct
        {
            get { return _BankAcct; }
            set
            {
                if(_BankAcct!=value){
                    _BankAcct=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BankAcct");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BankName;
        public string BankName
        {
            get { return _BankName; }
            set
            {
                if(_BankName!=value){
                    _BankName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BankName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _DrawMoneyAmt;
        public decimal DrawMoneyAmt
        {
            get { return _DrawMoneyAmt; }
            set
            {
                if(_DrawMoneyAmt!=value){
                    _DrawMoneyAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DrawMoneyAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _BalanceIncome;
        public decimal BalanceIncome
        {
            get { return _BalanceIncome; }
            set
            {
                if(_BalanceIncome!=value){
                    _BalanceIncome=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BalanceIncome");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _BalanceCost;
        public decimal BalanceCost
        {
            get { return _BalanceCost; }
            set
            {
                if(_BalanceCost!=value){
                    _BalanceCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BalanceCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _SettlementAmt;
        public decimal SettlementAmt
        {
            get { return _SettlementAmt; }
            set
            {
                if(_SettlementAmt!=value){
                    _SettlementAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SettlementAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SettlementType;
        public string SettlementType
        {
            get { return _SettlementType; }
            set
            {
                if(_SettlementType!=value){
                    _SettlementType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SettlementType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Auditor;
        public string Auditor
        {
            get { return _Auditor; }
            set
            {
                if(_Auditor!=value){
                    _Auditor=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Auditor");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _AuditDate;
        public DateTime? AuditDate
        {
            get { return _AuditDate; }
            set
            {
                if(_AuditDate!=value){
                    _AuditDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AuditDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderBalanceSettlement, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Om_NavGroup table in the DRP Database.
    /// </summary>
    public partial class Om_NavGroup: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Om_NavGroup> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Om_NavGroup>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Om_NavGroup> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Om_NavGroup item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Om_NavGroup item=new Om_NavGroup();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Om_NavGroup> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Om_NavGroup(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Om_NavGroup.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_NavGroup>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Om_NavGroup(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Om_NavGroup(Expression<Func<Om_NavGroup, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Om_NavGroup> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Om_NavGroup> _repo;
            
            if(db.TestMode){
                Om_NavGroup.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_NavGroup>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Om_NavGroup> GetRepo(){
            return GetRepo("","");
        }
        
        public static Om_NavGroup SingleOrDefault(Expression<Func<Om_NavGroup, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Om_NavGroup single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Om_NavGroup SingleOrDefault(Expression<Func<Om_NavGroup, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Om_NavGroup single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Om_NavGroup, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Om_NavGroup, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Om_NavGroup> Find(Expression<Func<Om_NavGroup, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Om_NavGroup> Find(Expression<Func<Om_NavGroup, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Om_NavGroup> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Om_NavGroup> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Om_NavGroup> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Om_NavGroup> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Om_NavGroup> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Om_NavGroup> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Om_NavGroup)){
                Om_NavGroup compare=(Om_NavGroup)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NavGroup;
        public string NavGroup
        {
            get { return _NavGroup; }
            set
            {
                if(_NavGroup!=value){
                    _NavGroup=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NavGroup");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrderIndex;
        public int? OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Om_NavGroup, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Crm_CustomerCertificate table in the DRP Database.
    /// </summary>
    public partial class Crm_CustomerCertificate: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Crm_CustomerCertificate> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Crm_CustomerCertificate>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Crm_CustomerCertificate> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Crm_CustomerCertificate item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Crm_CustomerCertificate item=new Crm_CustomerCertificate();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Crm_CustomerCertificate> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Crm_CustomerCertificate(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Crm_CustomerCertificate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Crm_CustomerCertificate>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Crm_CustomerCertificate(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Crm_CustomerCertificate(Expression<Func<Crm_CustomerCertificate, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Crm_CustomerCertificate> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Crm_CustomerCertificate> _repo;
            
            if(db.TestMode){
                Crm_CustomerCertificate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Crm_CustomerCertificate>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Crm_CustomerCertificate> GetRepo(){
            return GetRepo("","");
        }
        
        public static Crm_CustomerCertificate SingleOrDefault(Expression<Func<Crm_CustomerCertificate, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Crm_CustomerCertificate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Crm_CustomerCertificate SingleOrDefault(Expression<Func<Crm_CustomerCertificate, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Crm_CustomerCertificate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Crm_CustomerCertificate, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Crm_CustomerCertificate, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Crm_CustomerCertificate> Find(Expression<Func<Crm_CustomerCertificate, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Crm_CustomerCertificate> Find(Expression<Func<Crm_CustomerCertificate, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Crm_CustomerCertificate> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Crm_CustomerCertificate> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Crm_CustomerCertificate> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Crm_CustomerCertificate> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Crm_CustomerCertificate> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Crm_CustomerCertificate> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Crm_CustomerCertificate)){
                Crm_CustomerCertificate compare=(Crm_CustomerCertificate)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomerID;
        public string CustomerID
        {
            get { return _CustomerID; }
            set
            {
                if(_CustomerID!=value){
                    _CustomerID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ItemType;
        public string ItemType
        {
            get { return _ItemType; }
            set
            {
                if(_ItemType!=value){
                    _ItemType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ItemVal;
        public string ItemVal
        {
            get { return _ItemVal; }
            set
            {
                if(_ItemVal!=value){
                    _ItemVal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemVal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SortIndex;
        public int? SortIndex
        {
            get { return _SortIndex; }
            set
            {
                if(_SortIndex!=value){
                    _SortIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SortIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Crm_CustomerCertificate, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Om_UserOnLine table in the DRP Database.
    /// </summary>
    public partial class Om_UserOnLine: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Om_UserOnLine> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Om_UserOnLine>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Om_UserOnLine> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Om_UserOnLine item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Om_UserOnLine item=new Om_UserOnLine();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Om_UserOnLine> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Om_UserOnLine(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Om_UserOnLine.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_UserOnLine>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Om_UserOnLine(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Om_UserOnLine(Expression<Func<Om_UserOnLine, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Om_UserOnLine> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Om_UserOnLine> _repo;
            
            if(db.TestMode){
                Om_UserOnLine.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_UserOnLine>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Om_UserOnLine> GetRepo(){
            return GetRepo("","");
        }
        
        public static Om_UserOnLine SingleOrDefault(Expression<Func<Om_UserOnLine, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Om_UserOnLine single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Om_UserOnLine SingleOrDefault(Expression<Func<Om_UserOnLine, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Om_UserOnLine single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Om_UserOnLine, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Om_UserOnLine, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Om_UserOnLine> Find(Expression<Func<Om_UserOnLine, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Om_UserOnLine> Find(Expression<Func<Om_UserOnLine, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Om_UserOnLine> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Om_UserOnLine> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Om_UserOnLine> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Om_UserOnLine> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Om_UserOnLine> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Om_UserOnLine> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Om_UserOnLine)){
                Om_UserOnLine compare=(Om_UserOnLine)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgName;
        public string OrgName
        {
            get { return _OrgName; }
            set
            {
                if(_OrgName!=value){
                    _OrgName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserID;
        public string UserID
        {
            get { return _UserID; }
            set
            {
                if(_UserID!=value){
                    _UserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserName;
        public string UserName
        {
            get { return _UserName; }
            set
            {
                if(_UserName!=value){
                    _UserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Om_UserOnLine, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Glo_Destination table in the DRP Database.
    /// </summary>
    public partial class Glo_Destination: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Glo_Destination> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Glo_Destination>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Glo_Destination> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Glo_Destination item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Glo_Destination item=new Glo_Destination();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Glo_Destination> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Glo_Destination(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Glo_Destination.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_Destination>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Glo_Destination(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Glo_Destination(Expression<Func<Glo_Destination, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Glo_Destination> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Glo_Destination> _repo;
            
            if(db.TestMode){
                Glo_Destination.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_Destination>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Glo_Destination> GetRepo(){
            return GetRepo("","");
        }
        
        public static Glo_Destination SingleOrDefault(Expression<Func<Glo_Destination, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Glo_Destination single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Glo_Destination SingleOrDefault(Expression<Func<Glo_Destination, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Glo_Destination single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Glo_Destination, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Glo_Destination, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Glo_Destination> Find(Expression<Func<Glo_Destination, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Glo_Destination> Find(Expression<Func<Glo_Destination, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Glo_Destination> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Glo_Destination> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Glo_Destination> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Glo_Destination> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Glo_Destination> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Glo_Destination> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Glo_Destination)){
                Glo_Destination compare=(Glo_Destination)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ParentID;
        public string ParentID
        {
            get { return _ParentID; }
            set
            {
                if(_ParentID!=value){
                    _ParentID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteTypeID;
        public string RouteTypeID
        {
            get { return _RouteTypeID; }
            set
            {
                if(_RouteTypeID!=value){
                    _RouteTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Glo_Destination, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Om_Tools table in the DRP Database.
    /// </summary>
    public partial class Om_Tool: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Om_Tool> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Om_Tool>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Om_Tool> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Om_Tool item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Om_Tool item=new Om_Tool();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Om_Tool> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Om_Tool(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Om_Tool.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_Tool>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Om_Tool(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Om_Tool(Expression<Func<Om_Tool, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Om_Tool> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Om_Tool> _repo;
            
            if(db.TestMode){
                Om_Tool.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_Tool>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Om_Tool> GetRepo(){
            return GetRepo("","");
        }
        
        public static Om_Tool SingleOrDefault(Expression<Func<Om_Tool, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Om_Tool single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Om_Tool SingleOrDefault(Expression<Func<Om_Tool, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Om_Tool single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Om_Tool, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Om_Tool, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Om_Tool> Find(Expression<Func<Om_Tool, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Om_Tool> Find(Expression<Func<Om_Tool, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Om_Tool> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Om_Tool> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Om_Tool> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Om_Tool> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Om_Tool> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Om_Tool> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Om_Tool)){
                Om_Tool compare=(Om_Tool)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _URL;
        public string URL
        {
            get { return _URL; }
            set
            {
                if(_URL!=value){
                    _URL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="URL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Target;
        public string Target
        {
            get { return _Target; }
            set
            {
                if(_Target!=value){
                    _Target=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Target");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrderIndex;
        public int? OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IconCls;
        public string IconCls
        {
            get { return _IconCls; }
            set
            {
                if(_IconCls!=value){
                    _IconCls=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IconCls");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Om_Tool, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_TicketOrder table in the DRP Database.
    /// </summary>
    public partial class Ord_TicketOrder: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_TicketOrder> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_TicketOrder>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_TicketOrder> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_TicketOrder item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_TicketOrder item=new Ord_TicketOrder();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_TicketOrder> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_TicketOrder(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_TicketOrder.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_TicketOrder>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_TicketOrder(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_TicketOrder(Expression<Func<Ord_TicketOrder, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_TicketOrder> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_TicketOrder> _repo;
            
            if(db.TestMode){
                Ord_TicketOrder.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_TicketOrder>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_TicketOrder> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_TicketOrder SingleOrDefault(Expression<Func<Ord_TicketOrder, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_TicketOrder single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_TicketOrder SingleOrDefault(Expression<Func<Ord_TicketOrder, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_TicketOrder single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_TicketOrder, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_TicketOrder, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_TicketOrder> Find(Expression<Func<Ord_TicketOrder, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_TicketOrder> Find(Expression<Func<Ord_TicketOrder, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_TicketOrder> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_TicketOrder> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_TicketOrder> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_TicketOrder> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_TicketOrder> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_TicketOrder> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_TicketOrder)){
                Ord_TicketOrder compare=(Ord_TicketOrder)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderName;
        public string OrderName
        {
            get { return _OrderName; }
            set
            {
                if(_OrderName!=value){
                    _OrderName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderNo;
        public string OrderNo
        {
            get { return _OrderNo; }
            set
            {
                if(_OrderNo!=value){
                    _OrderNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PNR;
        public string PNR
        {
            get { return _PNR; }
            set
            {
                if(_PNR!=value){
                    _PNR=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PNR");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ToFlightLeg;
        public string ToFlightLeg
        {
            get { return _ToFlightLeg; }
            set
            {
                if(_ToFlightLeg!=value){
                    _ToFlightLeg=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToFlightLeg");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ToFlightInfo;
        public string ToFlightInfo
        {
            get { return _ToFlightInfo; }
            set
            {
                if(_ToFlightInfo!=value){
                    _ToFlightInfo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToFlightInfo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ToAirport;
        public string ToAirport
        {
            get { return _ToAirport; }
            set
            {
                if(_ToAirport!=value){
                    _ToAirport=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToAirport");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ToAirLine;
        public string ToAirLine
        {
            get { return _ToAirLine; }
            set
            {
                if(_ToAirLine!=value){
                    _ToAirLine=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToAirLine");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ToCabin;
        public string ToCabin
        {
            get { return _ToCabin; }
            set
            {
                if(_ToCabin!=value){
                    _ToCabin=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToCabin");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _ToTicketPrice;
        public decimal? ToTicketPrice
        {
            get { return _ToTicketPrice; }
            set
            {
                if(_ToTicketPrice!=value){
                    _ToTicketPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToTicketPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FromFlightLeg;
        public string FromFlightLeg
        {
            get { return _FromFlightLeg; }
            set
            {
                if(_FromFlightLeg!=value){
                    _FromFlightLeg=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromFlightLeg");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FromFlightInfo;
        public string FromFlightInfo
        {
            get { return _FromFlightInfo; }
            set
            {
                if(_FromFlightInfo!=value){
                    _FromFlightInfo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromFlightInfo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FromAirport;
        public string FromAirport
        {
            get { return _FromAirport; }
            set
            {
                if(_FromAirport!=value){
                    _FromAirport=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromAirport");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FromAirLine;
        public string FromAirLine
        {
            get { return _FromAirLine; }
            set
            {
                if(_FromAirLine!=value){
                    _FromAirLine=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromAirLine");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FromCabin;
        public string FromCabin
        {
            get { return _FromCabin; }
            set
            {
                if(_FromCabin!=value){
                    _FromCabin=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromCabin");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _FromTicketPrice;
        public decimal? FromTicketPrice
        {
            get { return _FromTicketPrice; }
            set
            {
                if(_FromTicketPrice!=value){
                    _FromTicketPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromTicketPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Contact;
        public string Contact
        {
            get { return _Contact; }
            set
            {
                if(_Contact!=value){
                    _Contact=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Contact");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ContactPhone;
        public string ContactPhone
        {
            get { return _ContactPhone; }
            set
            {
                if(_ContactPhone!=value){
                    _ContactPhone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ContactPhone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TicketType;
        public string TicketType
        {
            get { return _TicketType; }
            set
            {
                if(_TicketType!=value){
                    _TicketType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AdultNum;
        public int AdultNum
        {
            get { return _AdultNum; }
            set
            {
                if(_AdultNum!=value){
                    _AdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ChildNum;
        public int ChildNum
        {
            get { return _ChildNum; }
            set
            {
                if(_ChildNum!=value){
                    _ChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderAmt;
        public decimal OrderAmt
        {
            get { return _OrderAmt; }
            set
            {
                if(_OrderAmt!=value){
                    _OrderAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderCost;
        public decimal OrderCost
        {
            get { return _OrderCost; }
            set
            {
                if(_OrderCost!=value){
                    _OrderCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _TourDate;
        public DateTime TourDate
        {
            get { return _TourDate; }
            set
            {
                if(_TourDate!=value){
                    _TourDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ReturnDate;
        public DateTime? ReturnDate
        {
            get { return _ReturnDate; }
            set
            {
                if(_ReturnDate!=value){
                    _ReturnDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReturnDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderStatus;
        public int OrderStatus
        {
            get { return _OrderStatus; }
            set
            {
                if(_OrderStatus!=value){
                    _OrderStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SupplierName;
        public string SupplierName
        {
            get { return _SupplierName; }
            set
            {
                if(_SupplierName!=value){
                    _SupplierName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SupplierName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _CollectedAmt;
        public decimal CollectedAmt
        {
            get { return _CollectedAmt; }
            set
            {
                if(_CollectedAmt!=value){
                    _CollectedAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CollectedAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _ToConfirmCollectedAmt;
        public decimal ToConfirmCollectedAmt
        {
            get { return _ToConfirmCollectedAmt; }
            set
            {
                if(_ToConfirmCollectedAmt!=value){
                    _ToConfirmCollectedAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToConfirmCollectedAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PaidAmt;
        public decimal PaidAmt
        {
            get { return _PaidAmt; }
            set
            {
                if(_PaidAmt!=value){
                    _PaidAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaidAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderInvoiceAmt;
        public decimal OrderInvoiceAmt
        {
            get { return _OrderInvoiceAmt; }
            set
            {
                if(_OrderInvoiceAmt!=value){
                    _OrderInvoiceAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderInvoiceAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _CostInvoiceAmt;
        public decimal CostInvoiceAmt
        {
            get { return _CostInvoiceAmt; }
            set
            {
                if(_CostInvoiceAmt!=value){
                    _CostInvoiceAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CostInvoiceAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserID;
        public string UpdateUserID
        {
            get { return _UpdateUserID; }
            set
            {
                if(_UpdateUserID!=value){
                    _UpdateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserName;
        public string UpdateUserName
        {
            get { return _UpdateUserName; }
            set
            {
                if(_UpdateUserName!=value){
                    _UpdateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdateDate;
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set
            {
                if(_UpdateDate!=value){
                    _UpdateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderCostID;
        public string OrderCostID
        {
            get { return _OrderCostID; }
            set
            {
                if(_OrderCostID!=value){
                    _OrderCostID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderCostID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SupplierID;
        public string SupplierID
        {
            get { return _SupplierID; }
            set
            {
                if(_SupplierID!=value){
                    _SupplierID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SupplierID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Participant;
        public string Participant
        {
            get { return _Participant; }
            set
            {
                if(_Participant!=value){
                    _Participant=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Participant");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptName;
        public string DeptName
        {
            get { return _DeptName; }
            set
            {
                if(_DeptName!=value){
                    _DeptName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ParticipantID;
        public string ParticipantID
        {
            get { return _ParticipantID; }
            set
            {
                if(_ParticipantID!=value){
                    _ParticipantID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParticipantID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PartDeptID;
        public string PartDeptID
        {
            get { return _PartDeptID; }
            set
            {
                if(_PartDeptID!=value){
                    _PartDeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PartDeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Company;
        public string Company
        {
            get { return _Company; }
            set
            {
                if(_Company!=value){
                    _Company=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Company");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_TicketOrder, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Glo_QQ table in the DRP Database.
    /// </summary>
    public partial class Glo_QQ: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Glo_QQ> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Glo_QQ>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Glo_QQ> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Glo_QQ item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Glo_QQ item=new Glo_QQ();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Glo_QQ> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Glo_QQ(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Glo_QQ.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_QQ>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Glo_QQ(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Glo_QQ(Expression<Func<Glo_QQ, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Glo_QQ> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Glo_QQ> _repo;
            
            if(db.TestMode){
                Glo_QQ.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Glo_QQ>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Glo_QQ> GetRepo(){
            return GetRepo("","");
        }
        
        public static Glo_QQ SingleOrDefault(Expression<Func<Glo_QQ, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Glo_QQ single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Glo_QQ SingleOrDefault(Expression<Func<Glo_QQ, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Glo_QQ single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Glo_QQ, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Glo_QQ, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Glo_QQ> Find(Expression<Func<Glo_QQ, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Glo_QQ> Find(Expression<Func<Glo_QQ, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Glo_QQ> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Glo_QQ> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Glo_QQ> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Glo_QQ> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Glo_QQ> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Glo_QQ> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Glo_QQ)){
                Glo_QQ compare=(Glo_QQ)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _QQ;
        public string QQ
        {
            get { return _QQ; }
            set
            {
                if(_QQ!=value){
                    _QQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrderIndex;
        public int? OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Glo_QQ, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Pro_Venue table in the DRP Database.
    /// </summary>
    public partial class Pro_Venue: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Pro_Venue> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Pro_Venue>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Pro_Venue> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Pro_Venue item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Pro_Venue item=new Pro_Venue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Pro_Venue> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Pro_Venue(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Pro_Venue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_Venue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Pro_Venue(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Pro_Venue(Expression<Func<Pro_Venue, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Pro_Venue> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Pro_Venue> _repo;
            
            if(db.TestMode){
                Pro_Venue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_Venue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Pro_Venue> GetRepo(){
            return GetRepo("","");
        }
        
        public static Pro_Venue SingleOrDefault(Expression<Func<Pro_Venue, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Pro_Venue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Pro_Venue SingleOrDefault(Expression<Func<Pro_Venue, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Pro_Venue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Pro_Venue, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Pro_Venue, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Pro_Venue> Find(Expression<Func<Pro_Venue, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Pro_Venue> Find(Expression<Func<Pro_Venue, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Pro_Venue> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Pro_Venue> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Pro_Venue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Pro_Venue> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Pro_Venue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Pro_Venue> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Pro_Venue)){
                Pro_Venue compare=(Pro_Venue)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DepartureID;
        public string DepartureID
        {
            get { return _DepartureID; }
            set
            {
                if(_DepartureID!=value){
                    _DepartureID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartureID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Departure;
        public string Departure
        {
            get { return _Departure; }
            set
            {
                if(_Departure!=value){
                    _Departure=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Departure");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PickAmt;
        public int PickAmt
        {
            get { return _PickAmt; }
            set
            {
                if(_PickAmt!=value){
                    _PickAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PickAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SendAmt;
        public int SendAmt
        {
            get { return _SendAmt; }
            set
            {
                if(_SendAmt!=value){
                    _SendAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SendAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteTypeID;
        public string RouteTypeID
        {
            get { return _RouteTypeID; }
            set
            {
                if(_RouteTypeID!=value){
                    _RouteTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteType;
        public string RouteType
        {
            get { return _RouteType; }
            set
            {
                if(_RouteType!=value){
                    _RouteType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MeetTime;
        public string MeetTime
        {
            get { return _MeetTime; }
            set
            {
                if(_MeetTime!=value){
                    _MeetTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Pro_Venue, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderCustomer table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderCustomer: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderCustomer> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderCustomer>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderCustomer> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderCustomer item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderCustomer item=new Ord_OrderCustomer();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderCustomer> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderCustomer(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderCustomer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderCustomer>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderCustomer(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderCustomer(Expression<Func<Ord_OrderCustomer, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderCustomer> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderCustomer> _repo;
            
            if(db.TestMode){
                Ord_OrderCustomer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderCustomer>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderCustomer> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderCustomer SingleOrDefault(Expression<Func<Ord_OrderCustomer, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderCustomer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderCustomer SingleOrDefault(Expression<Func<Ord_OrderCustomer, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderCustomer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderCustomer, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderCustomer, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderCustomer> Find(Expression<Func<Ord_OrderCustomer, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderCustomer> Find(Expression<Func<Ord_OrderCustomer, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderCustomer> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderCustomer> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderCustomer> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderCustomer> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderCustomer> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderCustomer> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderCustomer)){
                Ord_OrderCustomer compare=(Ord_OrderCustomer)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomerID;
        public string CustomerID
        {
            get { return _CustomerID; }
            set
            {
                if(_CustomerID!=value){
                    _CustomerID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Sex;
        public string Sex
        {
            get { return _Sex; }
            set
            {
                if(_Sex!=value){
                    _Sex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Sex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IDType;
        public string IDType
        {
            get { return _IDType; }
            set
            {
                if(_IDType!=value){
                    _IDType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IDType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IDNo;
        public string IDNo
        {
            get { return _IDNo; }
            set
            {
                if(_IDNo!=value){
                    _IDNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IDNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Company;
        public string Company
        {
            get { return _Company; }
            set
            {
                if(_Company!=value){
                    _Company=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Company");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsLeader;
        public bool IsLeader
        {
            get { return _IsLeader; }
            set
            {
                if(_IsLeader!=value){
                    _IsLeader=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsLeader");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrderIndex;
        public int? OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderCustomer, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the User_Favorites table in the DRP Database.
    /// </summary>
    public partial class User_Favorite: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<User_Favorite> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<User_Favorite>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<User_Favorite> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(User_Favorite item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                User_Favorite item=new User_Favorite();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<User_Favorite> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public User_Favorite(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                User_Favorite.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<User_Favorite>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public User_Favorite(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public User_Favorite(Expression<Func<User_Favorite, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<User_Favorite> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<User_Favorite> _repo;
            
            if(db.TestMode){
                User_Favorite.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<User_Favorite>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<User_Favorite> GetRepo(){
            return GetRepo("","");
        }
        
        public static User_Favorite SingleOrDefault(Expression<Func<User_Favorite, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            User_Favorite single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static User_Favorite SingleOrDefault(Expression<Func<User_Favorite, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            User_Favorite single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<User_Favorite, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<User_Favorite, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<User_Favorite> Find(Expression<Func<User_Favorite, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<User_Favorite> Find(Expression<Func<User_Favorite, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<User_Favorite> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<User_Favorite> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<User_Favorite> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<User_Favorite> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<User_Favorite> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<User_Favorite> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(User_Favorite)){
                User_Favorite compare=(User_Favorite)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserID;
        public string UserID
        {
            get { return _UserID; }
            set
            {
                if(_UserID!=value){
                    _UserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _URL;
        public string URL
        {
            get { return _URL; }
            set
            {
                if(_URL!=value){
                    _URL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="URL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrderIndex;
        public int? OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<User_Favorite, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Om_OrgSetting table in the DRP Database.
    /// </summary>
    public partial class Om_OrgSetting: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Om_OrgSetting> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Om_OrgSetting>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Om_OrgSetting> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Om_OrgSetting item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Om_OrgSetting item=new Om_OrgSetting();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Om_OrgSetting> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Om_OrgSetting(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Om_OrgSetting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_OrgSetting>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Om_OrgSetting(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Om_OrgSetting(Expression<Func<Om_OrgSetting, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Om_OrgSetting> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Om_OrgSetting> _repo;
            
            if(db.TestMode){
                Om_OrgSetting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_OrgSetting>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Om_OrgSetting> GetRepo(){
            return GetRepo("","");
        }
        
        public static Om_OrgSetting SingleOrDefault(Expression<Func<Om_OrgSetting, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Om_OrgSetting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Om_OrgSetting SingleOrDefault(Expression<Func<Om_OrgSetting, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Om_OrgSetting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Om_OrgSetting, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Om_OrgSetting, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Om_OrgSetting> Find(Expression<Func<Om_OrgSetting, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Om_OrgSetting> Find(Expression<Func<Om_OrgSetting, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Om_OrgSetting> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Om_OrgSetting> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Om_OrgSetting> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Om_OrgSetting> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Om_OrgSetting> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Om_OrgSetting> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Om_OrgSetting)){
                Om_OrgSetting compare=(Om_OrgSetting)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _xType;
        public int xType
        {
            get { return _xType; }
            set
            {
                if(_xType!=value){
                    _xType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="xType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _xVal;
        public int xVal
        {
            get { return _xVal; }
            set
            {
                if(_xVal!=value){
                    _xVal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="xVal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _effectiveData;
        public DateTime? effectiveData
        {
            get { return _effectiveData; }
            set
            {
                if(_effectiveData!=value){
                    _effectiveData=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="effectiveData");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Om_OrgSetting, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Rpt_OrderSheet table in the DRP Database.
    /// </summary>
    public partial class Rpt_OrderSheet: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Rpt_OrderSheet> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Rpt_OrderSheet>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Rpt_OrderSheet> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Rpt_OrderSheet item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Rpt_OrderSheet item=new Rpt_OrderSheet();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Rpt_OrderSheet> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Rpt_OrderSheet(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Rpt_OrderSheet.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Rpt_OrderSheet>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Rpt_OrderSheet(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Rpt_OrderSheet(Expression<Func<Rpt_OrderSheet, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Rpt_OrderSheet> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Rpt_OrderSheet> _repo;
            
            if(db.TestMode){
                Rpt_OrderSheet.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Rpt_OrderSheet>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Rpt_OrderSheet> GetRepo(){
            return GetRepo("","");
        }
        
        public static Rpt_OrderSheet SingleOrDefault(Expression<Func<Rpt_OrderSheet, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Rpt_OrderSheet single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Rpt_OrderSheet SingleOrDefault(Expression<Func<Rpt_OrderSheet, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Rpt_OrderSheet single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Rpt_OrderSheet, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Rpt_OrderSheet, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Rpt_OrderSheet> Find(Expression<Func<Rpt_OrderSheet, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Rpt_OrderSheet> Find(Expression<Func<Rpt_OrderSheet, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Rpt_OrderSheet> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Rpt_OrderSheet> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Rpt_OrderSheet> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Rpt_OrderSheet> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Rpt_OrderSheet> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Rpt_OrderSheet> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Rpt_OrderSheet)){
                Rpt_OrderSheet compare=(Rpt_OrderSheet)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderNo;
        public string OrderNo
        {
            get { return _OrderNo; }
            set
            {
                if(_OrderNo!=value){
                    _OrderNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderName;
        public string OrderName
        {
            get { return _OrderName; }
            set
            {
                if(_OrderName!=value){
                    _OrderName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _TourDate;
        public DateTime TourDate
        {
            get { return _TourDate; }
            set
            {
                if(_TourDate!=value){
                    _TourDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ReturnDate;
        public DateTime? ReturnDate
        {
            get { return _ReturnDate; }
            set
            {
                if(_ReturnDate!=value){
                    _ReturnDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReturnDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderType;
        public int OrderType
        {
            get { return _OrderType; }
            set
            {
                if(_OrderType!=value){
                    _OrderType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SupplierName;
        public string SupplierName
        {
            get { return _SupplierName; }
            set
            {
                if(_SupplierName!=value){
                    _SupplierName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SupplierName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomerName;
        public string CustomerName
        {
            get { return _CustomerName; }
            set
            {
                if(_CustomerName!=value){
                    _CustomerName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AdultNum;
        public int AdultNum
        {
            get { return _AdultNum; }
            set
            {
                if(_AdultNum!=value){
                    _AdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ChildNum;
        public int ChildNum
        {
            get { return _ChildNum; }
            set
            {
                if(_ChildNum!=value){
                    _ChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderAmt;
        public decimal OrderAmt
        {
            get { return _OrderAmt; }
            set
            {
                if(_OrderAmt!=value){
                    _OrderAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _CollectedAmt;
        public decimal CollectedAmt
        {
            get { return _CollectedAmt; }
            set
            {
                if(_CollectedAmt!=value){
                    _CollectedAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CollectedAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _UnCollectedAmt;
        public decimal UnCollectedAmt
        {
            get { return _UnCollectedAmt; }
            set
            {
                if(_UnCollectedAmt!=value){
                    _UnCollectedAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UnCollectedAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderCost;
        public decimal OrderCost
        {
            get { return _OrderCost; }
            set
            {
                if(_OrderCost!=value){
                    _OrderCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Profit;
        public decimal Profit
        {
            get { return _Profit; }
            set
            {
                if(_Profit!=value){
                    _Profit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Profit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderInvoiceAmt;
        public decimal OrderInvoiceAmt
        {
            get { return _OrderInvoiceAmt; }
            set
            {
                if(_OrderInvoiceAmt!=value){
                    _OrderInvoiceAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderInvoiceAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PaidAmt;
        public decimal PaidAmt
        {
            get { return _PaidAmt; }
            set
            {
                if(_PaidAmt!=value){
                    _PaidAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaidAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _UnPaidAmt;
        public decimal UnPaidAmt
        {
            get { return _UnPaidAmt; }
            set
            {
                if(_UnPaidAmt!=value){
                    _UnPaidAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UnPaidAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptName;
        public string DeptName
        {
            get { return _DeptName; }
            set
            {
                if(_DeptName!=value){
                    _DeptName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderStatus;
        public int OrderStatus
        {
            get { return _OrderStatus; }
            set
            {
                if(_OrderStatus!=value){
                    _OrderStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Participant;
        public string Participant
        {
            get { return _Participant; }
            set
            {
                if(_Participant!=value){
                    _Participant=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Participant");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ParticipantID;
        public string ParticipantID
        {
            get { return _ParticipantID; }
            set
            {
                if(_ParticipantID!=value){
                    _ParticipantID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParticipantID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _OrderCreateDate;
        public DateTime? OrderCreateDate
        {
            get { return _OrderCreateDate; }
            set
            {
                if(_OrderCreateDate!=value){
                    _OrderCreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderCreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Rpt_OrderSheet, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Pro_RouteInfo table in the DRP Database.
    /// </summary>
    public partial class Pro_RouteInfo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Pro_RouteInfo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Pro_RouteInfo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Pro_RouteInfo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Pro_RouteInfo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Pro_RouteInfo item=new Pro_RouteInfo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Pro_RouteInfo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Pro_RouteInfo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Pro_RouteInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_RouteInfo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Pro_RouteInfo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Pro_RouteInfo(Expression<Func<Pro_RouteInfo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Pro_RouteInfo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Pro_RouteInfo> _repo;
            
            if(db.TestMode){
                Pro_RouteInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Pro_RouteInfo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Pro_RouteInfo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Pro_RouteInfo SingleOrDefault(Expression<Func<Pro_RouteInfo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Pro_RouteInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Pro_RouteInfo SingleOrDefault(Expression<Func<Pro_RouteInfo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Pro_RouteInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Pro_RouteInfo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Pro_RouteInfo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Pro_RouteInfo> Find(Expression<Func<Pro_RouteInfo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Pro_RouteInfo> Find(Expression<Func<Pro_RouteInfo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Pro_RouteInfo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Pro_RouteInfo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Pro_RouteInfo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Pro_RouteInfo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Pro_RouteInfo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Pro_RouteInfo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Pro_RouteInfo)){
                Pro_RouteInfo compare=(Pro_RouteInfo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteNo;
        public string RouteNo
        {
            get { return _RouteNo; }
            set
            {
                if(_RouteNo!=value){
                    _RouteNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteName;
        public string RouteName
        {
            get { return _RouteName; }
            set
            {
                if(_RouteName!=value){
                    _RouteName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ScheduleDays;
        public int ScheduleDays
        {
            get { return _ScheduleDays; }
            set
            {
                if(_ScheduleDays!=value){
                    _ScheduleDays=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ScheduleDays");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteType;
        public string RouteType
        {
            get { return _RouteType; }
            set
            {
                if(_RouteType!=value){
                    _RouteType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteTypeID;
        public string RouteTypeID
        {
            get { return _RouteTypeID; }
            set
            {
                if(_RouteTypeID!=value){
                    _RouteTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Destination;
        public string Destination
        {
            get { return _Destination; }
            set
            {
                if(_Destination!=value){
                    _Destination=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Destination");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationID;
        public string DestinationID
        {
            get { return _DestinationID; }
            set
            {
                if(_DestinationID!=value){
                    _DestinationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationPath;
        public string DestinationPath
        {
            get { return _DestinationPath; }
            set
            {
                if(_DestinationPath!=value){
                    _DestinationPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Feature;
        public string Feature
        {
            get { return _Feature; }
            set
            {
                if(_Feature!=value){
                    _Feature=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Feature");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PriceInclude;
        public string PriceInclude
        {
            get { return _PriceInclude; }
            set
            {
                if(_PriceInclude!=value){
                    _PriceInclude=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PriceInclude");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PriceNonIncude;
        public string PriceNonIncude
        {
            get { return _PriceNonIncude; }
            set
            {
                if(_PriceNonIncude!=value){
                    _PriceNonIncude=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PriceNonIncude");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SelfItem;
        public string SelfItem
        {
            get { return _SelfItem; }
            set
            {
                if(_SelfItem!=value){
                    _SelfItem=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SelfItem");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remind;
        public string Remind
        {
            get { return _Remind; }
            set
            {
                if(_Remind!=value){
                    _Remind=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remind");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Shopping;
        public string Shopping
        {
            get { return _Shopping; }
            set
            {
                if(_Shopping!=value){
                    _Shopping=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Shopping");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserID;
        public string UpdateUserID
        {
            get { return _UpdateUserID; }
            set
            {
                if(_UpdateUserID!=value){
                    _UpdateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserName;
        public string UpdateUserName
        {
            get { return _UpdateUserName; }
            set
            {
                if(_UpdateUserName!=value){
                    _UpdateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdateDate;
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set
            {
                if(_UpdateDate!=value){
                    _UpdateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderIndex;
        public int OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteSource;
        public string RouteSource
        {
            get { return _RouteSource; }
            set
            {
                if(_RouteSource!=value){
                    _RouteSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteSourceID;
        public string RouteSourceID
        {
            get { return _RouteSourceID; }
            set
            {
                if(_RouteSourceID!=value){
                    _RouteSourceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteSourceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Pro_RouteInfo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sn_BasicInfo table in the DRP Database.
    /// </summary>
    public partial class Sn_BasicInfo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sn_BasicInfo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sn_BasicInfo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sn_BasicInfo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sn_BasicInfo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sn_BasicInfo item=new Sn_BasicInfo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sn_BasicInfo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sn_BasicInfo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sn_BasicInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_BasicInfo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sn_BasicInfo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sn_BasicInfo(Expression<Func<Sn_BasicInfo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sn_BasicInfo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sn_BasicInfo> _repo;
            
            if(db.TestMode){
                Sn_BasicInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_BasicInfo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sn_BasicInfo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sn_BasicInfo SingleOrDefault(Expression<Func<Sn_BasicInfo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sn_BasicInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sn_BasicInfo SingleOrDefault(Expression<Func<Sn_BasicInfo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sn_BasicInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sn_BasicInfo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sn_BasicInfo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sn_BasicInfo> Find(Expression<Func<Sn_BasicInfo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sn_BasicInfo> Find(Expression<Func<Sn_BasicInfo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sn_BasicInfo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sn_BasicInfo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sn_BasicInfo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sn_BasicInfo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sn_BasicInfo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sn_BasicInfo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sn_BasicInfo)){
                Sn_BasicInfo compare=(Sn_BasicInfo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsShowRoute;
        public bool IsShowRoute
        {
            get { return _IsShowRoute; }
            set
            {
                if(_IsShowRoute!=value){
                    _IsShowRoute=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsShowRoute");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LinkUrl;
        public string LinkUrl
        {
            get { return _LinkUrl; }
            set
            {
                if(_LinkUrl!=value){
                    _LinkUrl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LinkUrl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TravelName;
        public string TravelName
        {
            get { return _TravelName; }
            set
            {
                if(_TravelName!=value){
                    _TravelName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TravelName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _HotLine;
        public string HotLine
        {
            get { return _HotLine; }
            set
            {
                if(_HotLine!=value){
                    _HotLine=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HotLine");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Logo;
        public string Logo
        {
            get { return _Logo; }
            set
            {
                if(_Logo!=value){
                    _Logo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Logo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AboutUs;
        public string AboutUs
        {
            get { return _AboutUs; }
            set
            {
                if(_AboutUs!=value){
                    _AboutUs=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AboutUs");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sn_BasicInfo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sn_AdSlide table in the DRP Database.
    /// </summary>
    public partial class Sn_AdSlide: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sn_AdSlide> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sn_AdSlide>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sn_AdSlide> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sn_AdSlide item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sn_AdSlide item=new Sn_AdSlide();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sn_AdSlide> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sn_AdSlide(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sn_AdSlide.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_AdSlide>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sn_AdSlide(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sn_AdSlide(Expression<Func<Sn_AdSlide, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sn_AdSlide> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sn_AdSlide> _repo;
            
            if(db.TestMode){
                Sn_AdSlide.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_AdSlide>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sn_AdSlide> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sn_AdSlide SingleOrDefault(Expression<Func<Sn_AdSlide, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sn_AdSlide single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sn_AdSlide SingleOrDefault(Expression<Func<Sn_AdSlide, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sn_AdSlide single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sn_AdSlide, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sn_AdSlide, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sn_AdSlide> Find(Expression<Func<Sn_AdSlide, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sn_AdSlide> Find(Expression<Func<Sn_AdSlide, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sn_AdSlide> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sn_AdSlide> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sn_AdSlide> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sn_AdSlide> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sn_AdSlide> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sn_AdSlide> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sn_AdSlide)){
                Sn_AdSlide compare=(Sn_AdSlide)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ImgSrc;
        public string ImgSrc
        {
            get { return _ImgSrc; }
            set
            {
                if(_ImgSrc!=value){
                    _ImgSrc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ImgSrc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Summary;
        public string Summary
        {
            get { return _Summary; }
            set
            {
                if(_Summary!=value){
                    _Summary=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Summary");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LinkUrl;
        public string LinkUrl
        {
            get { return _LinkUrl; }
            set
            {
                if(_LinkUrl!=value){
                    _LinkUrl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LinkUrl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sn_AdSlide, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sn_MenuItem table in the DRP Database.
    /// </summary>
    public partial class Sn_MenuItem: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sn_MenuItem> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sn_MenuItem>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sn_MenuItem> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sn_MenuItem item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sn_MenuItem item=new Sn_MenuItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sn_MenuItem> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sn_MenuItem(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sn_MenuItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_MenuItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sn_MenuItem(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sn_MenuItem(Expression<Func<Sn_MenuItem, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sn_MenuItem> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sn_MenuItem> _repo;
            
            if(db.TestMode){
                Sn_MenuItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_MenuItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sn_MenuItem> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sn_MenuItem SingleOrDefault(Expression<Func<Sn_MenuItem, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sn_MenuItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sn_MenuItem SingleOrDefault(Expression<Func<Sn_MenuItem, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sn_MenuItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sn_MenuItem, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sn_MenuItem, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sn_MenuItem> Find(Expression<Func<Sn_MenuItem, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sn_MenuItem> Find(Expression<Func<Sn_MenuItem, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sn_MenuItem> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sn_MenuItem> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sn_MenuItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sn_MenuItem> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sn_MenuItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sn_MenuItem> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sn_MenuItem)){
                Sn_MenuItem compare=(Sn_MenuItem)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MenuName;
        public string MenuName
        {
            get { return _MenuName; }
            set
            {
                if(_MenuName!=value){
                    _MenuName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MenuName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MenuUrl;
        public string MenuUrl
        {
            get { return _MenuUrl; }
            set
            {
                if(_MenuUrl!=value){
                    _MenuUrl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MenuUrl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SortIndex;
        public int SortIndex
        {
            get { return _SortIndex; }
            set
            {
                if(_SortIndex!=value){
                    _SortIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SortIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CtrlChecked;
        public int CtrlChecked
        {
            get { return _CtrlChecked; }
            set
            {
                if(_CtrlChecked!=value){
                    _CtrlChecked=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CtrlChecked");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sn_MenuItem, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Om_Area table in the DRP Database.
    /// </summary>
    public partial class Om_Area: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Om_Area> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Om_Area>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Om_Area> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Om_Area item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Om_Area item=new Om_Area();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Om_Area> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Om_Area(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Om_Area.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_Area>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Om_Area(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Om_Area(Expression<Func<Om_Area, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Om_Area> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Om_Area> _repo;
            
            if(db.TestMode){
                Om_Area.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_Area>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Om_Area> GetRepo(){
            return GetRepo("","");
        }
        
        public static Om_Area SingleOrDefault(Expression<Func<Om_Area, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Om_Area single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Om_Area SingleOrDefault(Expression<Func<Om_Area, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Om_Area single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Om_Area, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Om_Area, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Om_Area> Find(Expression<Func<Om_Area, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Om_Area> Find(Expression<Func<Om_Area, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Om_Area> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Om_Area> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Om_Area> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Om_Area> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Om_Area> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Om_Area> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Om_Area)){
                Om_Area compare=(Om_Area)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ParentID;
        public string ParentID
        {
            get { return _ParentID; }
            set
            {
                if(_ParentID!=value){
                    _ParentID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AreaName;
        public string AreaName
        {
            get { return _AreaName; }
            set
            {
                if(_AreaName!=value){
                    _AreaName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AreaName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrderIndex;
        public int? OrderIndex
        {
            get { return _OrderIndex; }
            set
            {
                if(_OrderIndex!=value){
                    _OrderIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Om_Area, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_DrawMoney table in the DRP Database.
    /// </summary>
    public partial class Ord_DrawMoney: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_DrawMoney> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_DrawMoney>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_DrawMoney> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_DrawMoney item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_DrawMoney item=new Ord_DrawMoney();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_DrawMoney> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_DrawMoney(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_DrawMoney.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_DrawMoney>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_DrawMoney(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_DrawMoney(Expression<Func<Ord_DrawMoney, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_DrawMoney> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_DrawMoney> _repo;
            
            if(db.TestMode){
                Ord_DrawMoney.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_DrawMoney>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_DrawMoney> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_DrawMoney SingleOrDefault(Expression<Func<Ord_DrawMoney, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_DrawMoney single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_DrawMoney SingleOrDefault(Expression<Func<Ord_DrawMoney, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_DrawMoney single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_DrawMoney, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_DrawMoney, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_DrawMoney> Find(Expression<Func<Ord_DrawMoney, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_DrawMoney> Find(Expression<Func<Ord_DrawMoney, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_DrawMoney> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_DrawMoney> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_DrawMoney> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_DrawMoney> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_DrawMoney> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_DrawMoney> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_DrawMoney)){
                Ord_DrawMoney compare=(Ord_DrawMoney)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderID;
        public string OrderID
        {
            get { return _OrderID; }
            set
            {
                if(_OrderID!=value){
                    _OrderID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Amount;
        public decimal Amount
        {
            get { return _Amount; }
            set
            {
                if(_Amount!=value){
                    _Amount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Amount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Method;
        public string Method
        {
            get { return _Method; }
            set
            {
                if(_Method!=value){
                    _Method=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Method");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_DrawMoney, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sn_Memeber table in the DRP Database.
    /// </summary>
    public partial class Sn_Memeber: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sn_Memeber> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sn_Memeber>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sn_Memeber> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sn_Memeber item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sn_Memeber item=new Sn_Memeber();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sn_Memeber> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Sn_Memeber(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sn_Memeber.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_Memeber>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sn_Memeber(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sn_Memeber(Expression<Func<Sn_Memeber, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sn_Memeber> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Sn_Memeber> _repo;
            
            if(db.TestMode){
                Sn_Memeber.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sn_Memeber>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sn_Memeber> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sn_Memeber SingleOrDefault(Expression<Func<Sn_Memeber, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sn_Memeber single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sn_Memeber SingleOrDefault(Expression<Func<Sn_Memeber, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sn_Memeber single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sn_Memeber, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sn_Memeber, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sn_Memeber> Find(Expression<Func<Sn_Memeber, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sn_Memeber> Find(Expression<Func<Sn_Memeber, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sn_Memeber> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sn_Memeber> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sn_Memeber> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sn_Memeber> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sn_Memeber> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sn_Memeber> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sn_Memeber)){
                Sn_Memeber compare=(Sn_Memeber)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserAcct;
        public string UserAcct
        {
            get { return _UserAcct; }
            set
            {
                if(_UserAcct!=value){
                    _UserAcct=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserAcct");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserPwd;
        public string UserPwd
        {
            get { return _UserPwd; }
            set
            {
                if(_UserPwd!=value){
                    _UserPwd=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserPwd");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserName;
        public string UserName
        {
            get { return _UserName; }
            set
            {
                if(_UserName!=value){
                    _UserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NickName;
        public string NickName
        {
            get { return _NickName; }
            set
            {
                if(_NickName!=value){
                    _NickName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NickName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AppTokenID;
        public string AppTokenID
        {
            get { return _AppTokenID; }
            set
            {
                if(_AppTokenID!=value){
                    _AppTokenID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppTokenID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Photo;
        public string Photo
        {
            get { return _Photo; }
            set
            {
                if(_Photo!=value){
                    _Photo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Photo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IDNo;
        public string IDNo
        {
            get { return _IDNo; }
            set
            {
                if(_IDNo!=value){
                    _IDNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IDNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Integral;
        public int Integral
        {
            get { return _Integral; }
            set
            {
                if(_Integral!=value){
                    _Integral=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Integral");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _LastActiveDate;
        public DateTime LastActiveDate
        {
            get { return _LastActiveDate; }
            set
            {
                if(_LastActiveDate!=value){
                    _LastActiveDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastActiveDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Sn_Memeber, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Om_UserInfo table in the DRP Database.
    /// </summary>
    public partial class Om_UserInfo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Om_UserInfo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Om_UserInfo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Om_UserInfo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Om_UserInfo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Om_UserInfo item=new Om_UserInfo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Om_UserInfo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Om_UserInfo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Om_UserInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_UserInfo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Om_UserInfo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Om_UserInfo(Expression<Func<Om_UserInfo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Om_UserInfo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Om_UserInfo> _repo;
            
            if(db.TestMode){
                Om_UserInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Om_UserInfo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Om_UserInfo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Om_UserInfo SingleOrDefault(Expression<Func<Om_UserInfo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Om_UserInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Om_UserInfo SingleOrDefault(Expression<Func<Om_UserInfo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Om_UserInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Om_UserInfo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Om_UserInfo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Om_UserInfo> Find(Expression<Func<Om_UserInfo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Om_UserInfo> Find(Expression<Func<Om_UserInfo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Om_UserInfo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Om_UserInfo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Om_UserInfo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Om_UserInfo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Om_UserInfo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Om_UserInfo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Om_UserInfo)){
                Om_UserInfo compare=(Om_UserInfo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgName;
        public string OrgName
        {
            get { return _OrgName; }
            set
            {
                if(_OrgName!=value){
                    _OrgName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserName;
        public string UserName
        {
            get { return _UserName; }
            set
            {
                if(_UserName!=value){
                    _UserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserAcct;
        public string UserAcct
        {
            get { return _UserAcct; }
            set
            {
                if(_UserAcct!=value){
                    _UserAcct=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserAcct");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserPwd;
        public string UserPwd
        {
            get { return _UserPwd; }
            set
            {
                if(_UserPwd!=value){
                    _UserPwd=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserPwd");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataStatus;
        public int DataStatus
        {
            get { return _DataStatus; }
            set
            {
                if(_DataStatus!=value){
                    _DataStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateName;
        public string CreateName
        {
            get { return _CreateName; }
            set
            {
                if(_CreateName!=value){
                    _CreateName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Om_UserInfo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_BudgetComment table in the DRP Database.
    /// </summary>
    public partial class Ord_BudgetComment: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_BudgetComment> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_BudgetComment>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_BudgetComment> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_BudgetComment item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_BudgetComment item=new Ord_BudgetComment();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_BudgetComment> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_BudgetComment(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_BudgetComment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_BudgetComment>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_BudgetComment(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_BudgetComment(Expression<Func<Ord_BudgetComment, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_BudgetComment> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_BudgetComment> _repo;
            
            if(db.TestMode){
                Ord_BudgetComment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_BudgetComment>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_BudgetComment> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_BudgetComment SingleOrDefault(Expression<Func<Ord_BudgetComment, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_BudgetComment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_BudgetComment SingleOrDefault(Expression<Func<Ord_BudgetComment, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_BudgetComment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_BudgetComment, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_BudgetComment, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_BudgetComment> Find(Expression<Func<Ord_BudgetComment, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_BudgetComment> Find(Expression<Func<Ord_BudgetComment, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_BudgetComment> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_BudgetComment> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_BudgetComment> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_BudgetComment> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_BudgetComment> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_BudgetComment> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_BudgetComment)){
                Ord_BudgetComment compare=(Ord_BudgetComment)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderBudgetID;
        public string OrderBudgetID
        {
            get { return _OrderBudgetID; }
            set
            {
                if(_OrderBudgetID!=value){
                    _OrderBudgetID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderBudgetID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_BudgetComment, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Ord_OrderInfo table in the DRP Database.
    /// </summary>
    public partial class Ord_OrderInfo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Ord_OrderInfo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Ord_OrderInfo>(new DRP.DAL.DRPDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Ord_OrderInfo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Ord_OrderInfo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Ord_OrderInfo item=new Ord_OrderInfo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Ord_OrderInfo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DRP.DAL.DRPDB _db;
        public Ord_OrderInfo(string connectionString, string providerName) {

            _db=new DRP.DAL.DRPDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Ord_OrderInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderInfo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Ord_OrderInfo(){
             _db=new DRP.DAL.DRPDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Ord_OrderInfo(Expression<Func<Ord_OrderInfo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Ord_OrderInfo> GetRepo(string connectionString, string providerName){
            DRP.DAL.DRPDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DRP.DAL.DRPDB();
            }else{
                db=new DRP.DAL.DRPDB(connectionString, providerName);
            }
            IRepository<Ord_OrderInfo> _repo;
            
            if(db.TestMode){
                Ord_OrderInfo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Ord_OrderInfo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ord_OrderInfo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Ord_OrderInfo SingleOrDefault(Expression<Func<Ord_OrderInfo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Ord_OrderInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Ord_OrderInfo SingleOrDefault(Expression<Func<Ord_OrderInfo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Ord_OrderInfo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Ord_OrderInfo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Ord_OrderInfo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Ord_OrderInfo> Find(Expression<Func<Ord_OrderInfo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ord_OrderInfo> Find(Expression<Func<Ord_OrderInfo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Ord_OrderInfo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Ord_OrderInfo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ord_OrderInfo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ord_OrderInfo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ord_OrderInfo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Ord_OrderInfo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Ord_OrderInfo)){
                Ord_OrderInfo compare=(Ord_OrderInfo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ID.ToString();
                    }

        public string DescriptorColumn() {
            return "ID";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ID;
        public string ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderType;
        public int OrderType
        {
            get { return _OrderType; }
            set
            {
                if(_OrderType!=value){
                    _OrderType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteTypeID;
        public string RouteTypeID
        {
            get { return _RouteTypeID; }
            set
            {
                if(_RouteTypeID!=value){
                    _RouteTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RouteTypeName;
        public string RouteTypeName
        {
            get { return _RouteTypeName; }
            set
            {
                if(_RouteTypeName!=value){
                    _RouteTypeName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RouteTypeName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationID;
        public string DestinationID
        {
            get { return _DestinationID; }
            set
            {
                if(_DestinationID!=value){
                    _DestinationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationName;
        public string DestinationName
        {
            get { return _DestinationName; }
            set
            {
                if(_DestinationName!=value){
                    _DestinationName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DestinationPath;
        public string DestinationPath
        {
            get { return _DestinationPath; }
            set
            {
                if(_DestinationPath!=value){
                    _DestinationPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DestinationPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderName;
        public string OrderName
        {
            get { return _OrderName; }
            set
            {
                if(_OrderName!=value){
                    _OrderName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrderNo;
        public string OrderNo
        {
            get { return _OrderNo; }
            set
            {
                if(_OrderNo!=value){
                    _OrderNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Departure;
        public string Departure
        {
            get { return _Departure; }
            set
            {
                if(_Departure!=value){
                    _Departure=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Departure");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DepartureID;
        public string DepartureID
        {
            get { return _DepartureID; }
            set
            {
                if(_DepartureID!=value){
                    _DepartureID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartureID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AdultNum;
        public int AdultNum
        {
            get { return _AdultNum; }
            set
            {
                if(_AdultNum!=value){
                    _AdultNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdultNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ChildNum;
        public int ChildNum
        {
            get { return _ChildNum; }
            set
            {
                if(_ChildNum!=value){
                    _ChildNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ChildNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _AdjustAmt;
        public decimal AdjustAmt
        {
            get { return _AdjustAmt; }
            set
            {
                if(_AdjustAmt!=value){
                    _AdjustAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdjustAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderAmt;
        public decimal OrderAmt
        {
            get { return _OrderAmt; }
            set
            {
                if(_OrderAmt!=value){
                    _OrderAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderCost;
        public decimal OrderCost
        {
            get { return _OrderCost; }
            set
            {
                if(_OrderCost!=value){
                    _OrderCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _TourDate;
        public DateTime TourDate
        {
            get { return _TourDate; }
            set
            {
                if(_TourDate!=value){
                    _TourDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TourDays;
        public int TourDays
        {
            get { return _TourDays; }
            set
            {
                if(_TourDays!=value){
                    _TourDays=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourDays");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ReturnDate;
        public DateTime? ReturnDate
        {
            get { return _ReturnDate; }
            set
            {
                if(_ReturnDate!=value){
                    _ReturnDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReturnDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderStatus;
        public int OrderStatus
        {
            get { return _OrderStatus; }
            set
            {
                if(_OrderStatus!=value){
                    _OrderStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BudgetStatus;
        public int BudgetStatus
        {
            get { return _BudgetStatus; }
            set
            {
                if(_BudgetStatus!=value){
                    _BudgetStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BudgetStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Remark;
        public string Remark
        {
            get { return _Remark; }
            set
            {
                if(_Remark!=value){
                    _Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Schedule;
        public string Schedule
        {
            get { return _Schedule; }
            set
            {
                if(_Schedule!=value){
                    _Schedule=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Schedule");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _VenueName;
        public string VenueName
        {
            get { return _VenueName; }
            set
            {
                if(_VenueName!=value){
                    _VenueName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PickAmt;
        public int PickAmt
        {
            get { return _PickAmt; }
            set
            {
                if(_PickAmt!=value){
                    _PickAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PickAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SendAmt;
        public int SendAmt
        {
            get { return _SendAmt; }
            set
            {
                if(_SendAmt!=value){
                    _SendAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SendAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CollectTime;
        public string CollectTime
        {
            get { return _CollectTime; }
            set
            {
                if(_CollectTime!=value){
                    _CollectTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CollectTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _IsCloseCollected;
        public int? IsCloseCollected
        {
            get { return _IsCloseCollected; }
            set
            {
                if(_IsCloseCollected!=value){
                    _IsCloseCollected=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsCloseCollected");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TourID;
        public string TourID
        {
            get { return _TourID; }
            set
            {
                if(_TourID!=value){
                    _TourID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TourID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SourceID;
        public string SourceID
        {
            get { return _SourceID; }
            set
            {
                if(_SourceID!=value){
                    _SourceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SourceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SourceName;
        public string SourceName
        {
            get { return _SourceName; }
            set
            {
                if(_SourceName!=value){
                    _SourceName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SourceName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SeatNum;
        public int SeatNum
        {
            get { return _SeatNum; }
            set
            {
                if(_SeatNum!=value){
                    _SeatNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SeatNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomerID;
        public string CustomerID
        {
            get { return _CustomerID; }
            set
            {
                if(_CustomerID!=value){
                    _CustomerID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomerName;
        public string CustomerName
        {
            get { return _CustomerName; }
            set
            {
                if(_CustomerName!=value){
                    _CustomerName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SupplierName;
        public string SupplierName
        {
            get { return _SupplierName; }
            set
            {
                if(_SupplierName!=value){
                    _SupplierName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SupplierName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _CollectedAmt;
        public decimal CollectedAmt
        {
            get { return _CollectedAmt; }
            set
            {
                if(_CollectedAmt!=value){
                    _CollectedAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CollectedAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _ToConfirmCollectedAmt;
        public decimal ToConfirmCollectedAmt
        {
            get { return _ToConfirmCollectedAmt; }
            set
            {
                if(_ToConfirmCollectedAmt!=value){
                    _ToConfirmCollectedAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToConfirmCollectedAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PaidAmt;
        public decimal PaidAmt
        {
            get { return _PaidAmt; }
            set
            {
                if(_PaidAmt!=value){
                    _PaidAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaidAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderInvoiceAmt;
        public decimal OrderInvoiceAmt
        {
            get { return _OrderInvoiceAmt; }
            set
            {
                if(_OrderInvoiceAmt!=value){
                    _OrderInvoiceAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderInvoiceAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _CostInvoiceAmt;
        public decimal CostInvoiceAmt
        {
            get { return _CostInvoiceAmt; }
            set
            {
                if(_CostInvoiceAmt!=value){
                    _CostInvoiceAmt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CostInvoiceAmt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserID;
        public string CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                if(_CreateUserID!=value){
                    _CreateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CreateUserName;
        public string CreateUserName
        {
            get { return _CreateUserName; }
            set
            {
                if(_CreateUserName!=value){
                    _CreateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptID;
        public string DeptID
        {
            get { return _DeptID; }
            set
            {
                if(_DeptID!=value){
                    _DeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrgID;
        public string OrgID
        {
            get { return _OrgID; }
            set
            {
                if(_OrgID!=value){
                    _OrgID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrgID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserID;
        public string UpdateUserID
        {
            get { return _UpdateUserID; }
            set
            {
                if(_UpdateUserID!=value){
                    _UpdateUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UpdateUserName;
        public string UpdateUserName
        {
            get { return _UpdateUserName; }
            set
            {
                if(_UpdateUserName!=value){
                    _UpdateUserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdateDate;
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set
            {
                if(_UpdateDate!=value){
                    _UpdateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsCheckAccount;
        public bool IsCheckAccount
        {
            get { return _IsCheckAccount; }
            set
            {
                if(_IsCheckAccount!=value){
                    _IsCheckAccount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsCheckAccount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AuditRemark;
        public string AuditRemark
        {
            get { return _AuditRemark; }
            set
            {
                if(_AuditRemark!=value){
                    _AuditRemark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AuditRemark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Participant;
        public string Participant
        {
            get { return _Participant; }
            set
            {
                if(_Participant!=value){
                    _Participant=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Participant");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeptName;
        public string DeptName
        {
            get { return _DeptName; }
            set
            {
                if(_DeptName!=value){
                    _DeptName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeptName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ParticipantID;
        public string ParticipantID
        {
            get { return _ParticipantID; }
            set
            {
                if(_ParticipantID!=value){
                    _ParticipantID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParticipantID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PartDeptID;
        public string PartDeptID
        {
            get { return _PartDeptID; }
            set
            {
                if(_PartDeptID!=value){
                    _PartDeptID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PartDeptID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


		public bool MultiDelete(List<string> listID)
        {
            if (listID.Count == 0) return false;

            var tblName = tbl.Name;
            var keyID = GetKeyColumn();
            if (string.IsNullOrEmpty(tblName) || string.IsNullOrEmpty(keyID))
                return false;
            string sql = string.Format("DELETE {0} WHERE {1} IN ({2})",
                tblName,keyID, string.Join(",", listID.ToArray()));
            
            return new CodingHorror(sql).Execute() > -1;
        }

        public static void Delete(Expression<Func<Ord_OrderInfo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
}
